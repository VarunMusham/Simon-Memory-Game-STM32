
Simon Memory Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08003478  08003478  00013478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003588  08003588  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08003588  08003588  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003588  08003588  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003588  08003588  00013588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800358c  0800358c  0001358c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000184  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f0  200001f0  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00004615  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000114d  00000000  00000000  000246f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000004b0  00000000  00000000  00025848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000359  00000000  00000000  00025cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fc2c  00000000  00000000  00026051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00006dcf  00000000  00000000  00045c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bc63b  00000000  00000000  0004ca4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001a00  00000000  00000000  00109088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0010aa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003460 	.word	0x08003460

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08003460 	.word	0x08003460

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <genseq>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void genseq(int *pass,int trail)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
    int temp,i=0;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
    while(i<trail)
 800028e:	e011      	b.n	80002b4 <genseq+0x34>
    {
        temp=rand()%2;
 8000290:	f002 f9b4 	bl	80025fc <rand>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	f003 0301 	and.w	r3, r3, #1
 800029c:	bfb8      	it	lt
 800029e:	425b      	neglt	r3, r3
 80002a0:	60fb      	str	r3, [r7, #12]
        pass[i]=temp;
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	009b      	lsls	r3, r3, #2
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	4413      	add	r3, r2
 80002aa:	68fa      	ldr	r2, [r7, #12]
 80002ac:	601a      	str	r2, [r3, #0]
        i+=1;
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	3301      	adds	r3, #1
 80002b2:	617b      	str	r3, [r7, #20]
    while(i<trail)
 80002b4:	697a      	ldr	r2, [r7, #20]
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	dbe9      	blt.n	8000290 <genseq+0x10>
    }

  for(int i=0;i<trail;i++)
 80002bc:	2300      	movs	r3, #0
 80002be:	613b      	str	r3, [r7, #16]
 80002c0:	e037      	b.n	8000332 <genseq+0xb2>
  {
    if (pass[i]==1){
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	687a      	ldr	r2, [r7, #4]
 80002c8:	4413      	add	r3, r2
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d113      	bne.n	80002f8 <genseq+0x78>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2180      	movs	r1, #128	; 0x80
 80002d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d8:	f000 fe8a 	bl	8000ff0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80002dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002e0:	f000 fbda 	bl	8000a98 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2180      	movs	r1, #128	; 0x80
 80002e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ec:	f000 fe80 	bl	8000ff0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80002f0:	2064      	movs	r0, #100	; 0x64
 80002f2:	f000 fbd1 	bl	8000a98 <HAL_Delay>
 80002f6:	e019      	b.n	800032c <genseq+0xac>
    }
    else if (pass[i]==0){
 80002f8:	693b      	ldr	r3, [r7, #16]
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	4413      	add	r3, r2
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d112      	bne.n	800032c <genseq+0xac>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000306:	2201      	movs	r2, #1
 8000308:	2140      	movs	r1, #64	; 0x40
 800030a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030e:	f000 fe6f 	bl	8000ff0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000316:	f000 fbbf 	bl	8000a98 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 800031a:	2200      	movs	r2, #0
 800031c:	2140      	movs	r1, #64	; 0x40
 800031e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000322:	f000 fe65 	bl	8000ff0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000326:	2064      	movs	r0, #100	; 0x64
 8000328:	f000 fbb6 	bl	8000a98 <HAL_Delay>
  for(int i=0;i<trail;i++)
 800032c:	693b      	ldr	r3, [r7, #16]
 800032e:	3301      	adds	r3, #1
 8000330:	613b      	str	r3, [r7, #16]
 8000332:	693a      	ldr	r2, [r7, #16]
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	429a      	cmp	r2, r3
 8000338:	dbc3      	blt.n	80002c2 <genseq+0x42>
    }
  }
}
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	3718      	adds	r7, #24
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000348:	f000 fb40 	bl	80009cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034c:	f000 f92c 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000350:	f000 f966 	bl	8000620 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  trail=1;
 8000354:	4b8c      	ldr	r3, [pc, #560]	; (8000588 <main+0x244>)
 8000356:	2201      	movs	r2, #1
 8000358:	601a      	str	r2, [r3, #0]
  pass=(int*)malloc(16*sizeof(int));
 800035a:	2040      	movs	r0, #64	; 0x40
 800035c:	f002 f89a 	bl	8002494 <malloc>
 8000360:	4603      	mov	r3, r0
 8000362:	461a      	mov	r2, r3
 8000364:	4b89      	ldr	r3, [pc, #548]	; (800058c <main+0x248>)
 8000366:	601a      	str	r2, [r3, #0]
  wins=0;
 8000368:	4b89      	ldr	r3, [pc, #548]	; (8000590 <main+0x24c>)
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		i=0;
 800036e:	4b89      	ldr	r3, [pc, #548]	; (8000594 <main+0x250>)
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
		flag=0;
 8000374:	4b88      	ldr	r3, [pc, #544]	; (8000598 <main+0x254>)
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)){
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	4887      	ldr	r0, [pc, #540]	; (800059c <main+0x258>)
 800037e:	f000 fe1f 	bl	8000fc0 <HAL_GPIO_ReadPin>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0f2      	beq.n	800036e <main+0x2a>
		if (trail==16)
 8000388:	4b7f      	ldr	r3, [pc, #508]	; (8000588 <main+0x244>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b10      	cmp	r3, #16
 800038e:	d102      	bne.n	8000396 <main+0x52>
			trail=1;
 8000390:	4b7d      	ldr	r3, [pc, #500]	; (8000588 <main+0x244>)
 8000392:	2201      	movs	r2, #1
 8000394:	601a      	str	r2, [r3, #0]
		genseq(pass,trail);
 8000396:	4b7d      	ldr	r3, [pc, #500]	; (800058c <main+0x248>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a7b      	ldr	r2, [pc, #492]	; (8000588 <main+0x244>)
 800039c:	6812      	ldr	r2, [r2, #0]
 800039e:	4611      	mov	r1, r2
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ff6d 	bl	8000280 <genseq>
		inp=(int*)malloc((trail)*sizeof(int));
 80003a6:	4b78      	ldr	r3, [pc, #480]	; (8000588 <main+0x244>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	4618      	mov	r0, r3
 80003ae:	f002 f871 	bl	8002494 <malloc>
 80003b2:	4603      	mov	r3, r0
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b7a      	ldr	r3, [pc, #488]	; (80005a0 <main+0x25c>)
 80003b8:	601a      	str	r2, [r3, #0]
		while(i<trail)
 80003ba:	e074      	b.n	80004a6 <main+0x162>
		{
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7))
 80003bc:	2180      	movs	r1, #128	; 0x80
 80003be:	4879      	ldr	r0, [pc, #484]	; (80005a4 <main+0x260>)
 80003c0:	f000 fdfe 	bl	8000fc0 <HAL_GPIO_ReadPin>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d024      	beq.n	8000414 <main+0xd0>
			{
				while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7)){
 80003ca:	e00d      	b.n	80003e8 <main+0xa4>
				inp[i]=0;
 80003cc:	4b74      	ldr	r3, [pc, #464]	; (80005a0 <main+0x25c>)
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	4b70      	ldr	r3, [pc, #448]	; (8000594 <main+0x250>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4413      	add	r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);}
 80003dc:	2201      	movs	r2, #1
 80003de:	2140      	movs	r1, #64	; 0x40
 80003e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e4:	f000 fe04 	bl	8000ff0 <HAL_GPIO_WritePin>
				while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7)){
 80003e8:	2180      	movs	r1, #128	; 0x80
 80003ea:	486e      	ldr	r0, [pc, #440]	; (80005a4 <main+0x260>)
 80003ec:	f000 fde8 	bl	8000fc0 <HAL_GPIO_ReadPin>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1ea      	bne.n	80003cc <main+0x88>
				i+=1;
 80003f6:	4b67      	ldr	r3, [pc, #412]	; (8000594 <main+0x250>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	3301      	adds	r3, #1
 80003fc:	4a65      	ldr	r2, [pc, #404]	; (8000594 <main+0x250>)
 80003fe:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 8000400:	2200      	movs	r2, #0
 8000402:	2140      	movs	r1, #64	; 0x40
 8000404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000408:	f000 fdf2 	bl	8000ff0 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 800040c:	2064      	movs	r0, #100	; 0x64
 800040e:	f000 fb43 	bl	8000a98 <HAL_Delay>
 8000412:	e02e      	b.n	8000472 <main+0x12e>
			}
			else if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_9))
 8000414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041c:	f000 fdd0 	bl	8000fc0 <HAL_GPIO_ReadPin>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d025      	beq.n	8000472 <main+0x12e>
			{
				while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_9)){
 8000426:	e00d      	b.n	8000444 <main+0x100>
				inp[i]=1;
 8000428:	4b5d      	ldr	r3, [pc, #372]	; (80005a0 <main+0x25c>)
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	4b59      	ldr	r3, [pc, #356]	; (8000594 <main+0x250>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	4413      	add	r3, r2
 8000434:	2201      	movs	r2, #1
 8000436:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);}
 8000438:	2201      	movs	r2, #1
 800043a:	2180      	movs	r1, #128	; 0x80
 800043c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000440:	f000 fdd6 	bl	8000ff0 <HAL_GPIO_WritePin>
				while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_9)){
 8000444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044c:	f000 fdb8 	bl	8000fc0 <HAL_GPIO_ReadPin>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d1e8      	bne.n	8000428 <main+0xe4>
				i+=1;
 8000456:	4b4f      	ldr	r3, [pc, #316]	; (8000594 <main+0x250>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	3301      	adds	r3, #1
 800045c:	4a4d      	ldr	r2, [pc, #308]	; (8000594 <main+0x250>)
 800045e:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 8000460:	2200      	movs	r2, #0
 8000462:	2180      	movs	r1, #128	; 0x80
 8000464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000468:	f000 fdc2 	bl	8000ff0 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 800046c:	2064      	movs	r0, #100	; 0x64
 800046e:	f000 fb13 	bl	8000a98 <HAL_Delay>
			}
			if (inp[i-1]!=pass[i-1]&&i>0)
 8000472:	4b4b      	ldr	r3, [pc, #300]	; (80005a0 <main+0x25c>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b47      	ldr	r3, [pc, #284]	; (8000594 <main+0x250>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800047e:	3b01      	subs	r3, #1
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	4413      	add	r3, r2
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	4b41      	ldr	r3, [pc, #260]	; (800058c <main+0x248>)
 8000488:	6819      	ldr	r1, [r3, #0]
 800048a:	4b42      	ldr	r3, [pc, #264]	; (8000594 <main+0x250>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000492:	3b01      	subs	r3, #1
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	440b      	add	r3, r1
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	429a      	cmp	r2, r3
 800049c:	d003      	beq.n	80004a6 <main+0x162>
 800049e:	4b3d      	ldr	r3, [pc, #244]	; (8000594 <main+0x250>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	dc06      	bgt.n	80004b4 <main+0x170>
		while(i<trail)
 80004a6:	4b3b      	ldr	r3, [pc, #236]	; (8000594 <main+0x250>)
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	4b37      	ldr	r3, [pc, #220]	; (8000588 <main+0x244>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	429a      	cmp	r2, r3
 80004b0:	db84      	blt.n	80003bc <main+0x78>
 80004b2:	e000      	b.n	80004b6 <main+0x172>
				break;
 80004b4:	bf00      	nop
		}
		for (i=0;i<trail;i++)
 80004b6:	4b37      	ldr	r3, [pc, #220]	; (8000594 <main+0x250>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	e018      	b.n	80004f0 <main+0x1ac>
		{
			if (inp[i]!=pass[i])
 80004be:	4b38      	ldr	r3, [pc, #224]	; (80005a0 <main+0x25c>)
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	4b34      	ldr	r3, [pc, #208]	; (8000594 <main+0x250>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	4413      	add	r3, r2
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b2f      	ldr	r3, [pc, #188]	; (800058c <main+0x248>)
 80004ce:	6819      	ldr	r1, [r3, #0]
 80004d0:	4b30      	ldr	r3, [pc, #192]	; (8000594 <main+0x250>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	440b      	add	r3, r1
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	429a      	cmp	r2, r3
 80004dc:	d003      	beq.n	80004e6 <main+0x1a2>
			{
				flag=1;
 80004de:	4b2e      	ldr	r3, [pc, #184]	; (8000598 <main+0x254>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	601a      	str	r2, [r3, #0]
				break;
 80004e4:	e00a      	b.n	80004fc <main+0x1b8>
		for (i=0;i<trail;i++)
 80004e6:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <main+0x250>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	3301      	adds	r3, #1
 80004ec:	4a29      	ldr	r2, [pc, #164]	; (8000594 <main+0x250>)
 80004ee:	6013      	str	r3, [r2, #0]
 80004f0:	4b28      	ldr	r3, [pc, #160]	; (8000594 <main+0x250>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b24      	ldr	r3, [pc, #144]	; (8000588 <main+0x244>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	dbe0      	blt.n	80004be <main+0x17a>
			}
		}
		if (!flag)
 80004fc:	4b26      	ldr	r3, [pc, #152]	; (8000598 <main+0x254>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d114      	bne.n	800052e <main+0x1ea>
		{
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000504:	2201      	movs	r2, #1
 8000506:	2120      	movs	r1, #32
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f000 fd70 	bl	8000ff0 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000510:	20c8      	movs	r0, #200	; 0xc8
 8000512:	f000 fac1 	bl	8000a98 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000516:	2200      	movs	r2, #0
 8000518:	2120      	movs	r1, #32
 800051a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051e:	f000 fd67 	bl	8000ff0 <HAL_GPIO_WritePin>
			wins+=1;
 8000522:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <main+0x24c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	3301      	adds	r3, #1
 8000528:	4a19      	ldr	r2, [pc, #100]	; (8000590 <main+0x24c>)
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	e026      	b.n	800057c <main+0x238>
		}
		else {
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 800052e:	2201      	movs	r2, #1
 8000530:	2120      	movs	r1, #32
 8000532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000536:	f000 fd5b 	bl	8000ff0 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800053a:	20c8      	movs	r0, #200	; 0xc8
 800053c:	f000 faac 	bl	8000a98 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000540:	2200      	movs	r2, #0
 8000542:	2120      	movs	r1, #32
 8000544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000548:	f000 fd52 	bl	8000ff0 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f000 faa3 	bl	8000a98 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000552:	2201      	movs	r2, #1
 8000554:	2120      	movs	r1, #32
 8000556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055a:	f000 fd49 	bl	8000ff0 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800055e:	20c8      	movs	r0, #200	; 0xc8
 8000560:	f000 fa9a 	bl	8000a98 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000564:	2200      	movs	r2, #0
 8000566:	2120      	movs	r1, #32
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f000 fd40 	bl	8000ff0 <HAL_GPIO_WritePin>
			trail=0;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <main+0x244>)
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
			wins=0;
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <main+0x24c>)
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
		}
		trail+=1;
 800057c:	4b02      	ldr	r3, [pc, #8]	; (8000588 <main+0x244>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	4a01      	ldr	r2, [pc, #4]	; (8000588 <main+0x244>)
 8000584:	6013      	str	r3, [r2, #0]
		i=0;
 8000586:	e6f2      	b.n	800036e <main+0x2a>
 8000588:	20000000 	.word	0x20000000
 800058c:	20000088 	.word	0x20000088
 8000590:	20000098 	.word	0x20000098
 8000594:	2000008c 	.word	0x2000008c
 8000598:	20000090 	.word	0x20000090
 800059c:	48000400 	.word	0x48000400
 80005a0:	20000094 	.word	0x20000094
 80005a4:	48000800 	.word	0x48000800

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b090      	sub	sp, #64	; 0x40
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	2228      	movs	r2, #40	; 0x28
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 f963 	bl	8002882 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ca:	2302      	movs	r3, #2
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ce:	2301      	movs	r3, #1
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d2:	2310      	movs	r3, #16
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fd1e 	bl	8001020 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005ea:	f000 f899 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fd5e 	bl	80020c8 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000612:	f000 f885 	bl	8000720 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3740      	adds	r7, #64	; 0x40
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000636:	4b37      	ldr	r3, [pc, #220]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a36      	ldr	r2, [pc, #216]	; (8000714 <MX_GPIO_Init+0xf4>)
 800063c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b34      	ldr	r3, [pc, #208]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b31      	ldr	r3, [pc, #196]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a30      	ldr	r2, [pc, #192]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <MX_GPIO_Init+0xf4>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a2a      	ldr	r2, [pc, #168]	; (8000714 <MX_GPIO_Init+0xf4>)
 800066c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b28      	ldr	r3, [pc, #160]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a24      	ldr	r2, [pc, #144]	; (8000714 <MX_GPIO_Init+0xf4>)
 8000684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000688:	6153      	str	r3, [r2, #20]
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <MX_GPIO_Init+0xf4>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	21e0      	movs	r1, #224	; 0xe0
 800069a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069e:	f000 fca7 	bl	8000ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80006a2:	23e0      	movs	r3, #224	; 0xe0
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006bc:	f000 faf6 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <MX_GPIO_Init+0xf8>)
 80006d4:	f000 faea 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006e2:	2302      	movs	r3, #2
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f0:	f000 fadc 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006f4:	2340      	movs	r3, #64	; 0x40
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006fc:	2302      	movs	r3, #2
 80006fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_GPIO_Init+0xfc>)
 8000708:	f000 fad0 	bl	8000cac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	; 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	48000800 	.word	0x48000800
 800071c:	48000400 	.word	0x48000400

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <HAL_MspInit+0x44>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <HAL_MspInit+0x44>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <HAL_MspInit+0x44>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <HAL_MspInit+0x44>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a08      	ldr	r2, [pc, #32]	; (8000770 <HAL_MspInit+0x44>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_MspInit+0x44>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000778:	e7fe      	b.n	8000778 <NMI_Handler+0x4>

0800077a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <MemManage_Handler+0x4>

08000786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <BusFault_Handler+0x4>

0800078c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <UsageFault_Handler+0x4>

08000792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c0:	f000 f94a 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return 1;
 80007cc:	2301      	movs	r3, #1
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <_kill>:

int _kill(int pid, int sig)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80007e2:	f002 f8ad 	bl	8002940 <__errno>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2216      	movs	r2, #22
 80007ea:	601a      	str	r2, [r3, #0]
  return -1;
 80007ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <_exit>:

void _exit (int status)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000800:	f04f 31ff 	mov.w	r1, #4294967295
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ffe7 	bl	80007d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800080a:	e7fe      	b.n	800080a <_exit+0x12>

0800080c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	e00a      	b.n	8000834 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800081e:	f3af 8000 	nop.w
 8000822:	4601      	mov	r1, r0
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	60ba      	str	r2, [r7, #8]
 800082a:	b2ca      	uxtb	r2, r1
 800082c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	3301      	adds	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	429a      	cmp	r2, r3
 800083a:	dbf0      	blt.n	800081e <_read+0x12>
  }

  return len;
 800083c:	687b      	ldr	r3, [r7, #4]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	e009      	b.n	800086c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	60ba      	str	r2, [r7, #8]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	3301      	adds	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	dbf1      	blt.n	8000858 <_write+0x12>
  }
  return len;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_close>:

int _close(int file)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a6:	605a      	str	r2, [r3, #4]
  return 0;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <_isatty>:

int _isatty(int file)
{
 80008b6:	b480      	push	{r7}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f0:	4a14      	ldr	r2, [pc, #80]	; (8000944 <_sbrk+0x5c>)
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <_sbrk+0x60>)
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d102      	bne.n	800090a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <_sbrk+0x64>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <_sbrk+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	429a      	cmp	r2, r3
 8000916:	d207      	bcs.n	8000928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000918:	f002 f812 	bl	8002940 <__errno>
 800091c:	4603      	mov	r3, r0
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	e009      	b.n	800093c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <_sbrk+0x64>)
 8000938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20010000 	.word	0x20010000
 8000948:	00000400 	.word	0x00000400
 800094c:	2000009c 	.word	0x2000009c
 8000950:	200001f0 	.word	0x200001f0

08000954 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <SystemInit+0x20>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <SystemInit+0x20>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800097c:	f7ff ffea 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000982:	490d      	ldr	r1, [pc, #52]	; (80009b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <LoopForever+0xe>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000998:	4c0a      	ldr	r4, [pc, #40]	; (80009c4 <LoopForever+0x16>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a6:	f001 ffd1 	bl	800294c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009aa:	f7ff fccb 	bl	8000344 <main>

080009ae <LoopForever>:

LoopForever:
    b LoopForever
 80009ae:	e7fe      	b.n	80009ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80009bc:	08003590 	.word	0x08003590
  ldr r2, =_sbss
 80009c0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80009c4:	200001f0 	.word	0x200001f0

080009c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC1_2_IRQHandler>
	...

080009cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_Init+0x28>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_Init+0x28>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f931 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	200f      	movs	r0, #15
 80009e4:	f000 f808 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff fea0 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40022000 	.word	0x40022000

080009f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_InitTick+0x54>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x58>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f93b 	bl	8000c92 <HAL_SYSTICK_Config>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00e      	b.n	8000a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f000 f911 	bl	8000c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000004 	.word	0x20000004
 8000a50:	2000000c 	.word	0x2000000c
 8000a54:	20000008 	.word	0x20000008

08000a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	2000000c 	.word	0x2000000c
 8000a7c:	200000a0 	.word	0x200000a0

08000a80 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200000a0 	.word	0x200000a0

08000a98 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff ffee 	bl	8000a80 <HAL_GetTick>
 8000aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_Delay+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000abe:	bf00      	nop
 8000ac0:	f7ff ffde 	bl	8000a80 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000000c 	.word	0x2000000c

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	; (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	; 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c10:	d301      	bcc.n	8000c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00f      	b.n	8000c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <SysTick_Config+0x40>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1e:	210f      	movs	r1, #15
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f7ff ff8e 	bl	8000b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SysTick_Config+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SysTick_Config+0x40>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff47 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c6c:	f7ff ff5c 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f7ff ff8e 	bl	8000b98 <NVIC_EncodePriority>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff5d 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffb0 	bl	8000c00 <SysTick_Config>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cba:	e160      	b.n	8000f7e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 8152 	beq.w	8000f78 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d005      	beq.n	8000cec <HAL_GPIO_Init+0x40>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d130      	bne.n	8000d4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	68da      	ldr	r2, [r3, #12]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d22:	2201      	movs	r2, #1
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	091b      	lsrs	r3, r3, #4
 8000d38:	f003 0201 	and.w	r2, r3, #1
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d017      	beq.n	8000d8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d123      	bne.n	8000dde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	08da      	lsrs	r2, r3, #3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3208      	adds	r2, #8
 8000d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	220f      	movs	r2, #15
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	691a      	ldr	r2, [r3, #16]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	f003 0307 	and.w	r3, r3, #7
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	08da      	lsrs	r2, r3, #3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3208      	adds	r2, #8
 8000dd8:	6939      	ldr	r1, [r7, #16]
 8000dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0203 	and.w	r2, r3, #3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 80ac 	beq.w	8000f78 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e20:	4b5e      	ldr	r3, [pc, #376]	; (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a5d      	ldr	r2, [pc, #372]	; (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b5b      	ldr	r3, [pc, #364]	; (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e38:	4a59      	ldr	r2, [pc, #356]	; (8000fa0 <HAL_GPIO_Init+0x2f4>)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	3302      	adds	r3, #2
 8000e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e62:	d025      	beq.n	8000eb0 <HAL_GPIO_Init+0x204>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a4f      	ldr	r2, [pc, #316]	; (8000fa4 <HAL_GPIO_Init+0x2f8>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d01f      	beq.n	8000eac <HAL_GPIO_Init+0x200>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a4e      	ldr	r2, [pc, #312]	; (8000fa8 <HAL_GPIO_Init+0x2fc>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d019      	beq.n	8000ea8 <HAL_GPIO_Init+0x1fc>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a4d      	ldr	r2, [pc, #308]	; (8000fac <HAL_GPIO_Init+0x300>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d013      	beq.n	8000ea4 <HAL_GPIO_Init+0x1f8>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a4c      	ldr	r2, [pc, #304]	; (8000fb0 <HAL_GPIO_Init+0x304>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d00d      	beq.n	8000ea0 <HAL_GPIO_Init+0x1f4>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a4b      	ldr	r2, [pc, #300]	; (8000fb4 <HAL_GPIO_Init+0x308>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d007      	beq.n	8000e9c <HAL_GPIO_Init+0x1f0>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a4a      	ldr	r2, [pc, #296]	; (8000fb8 <HAL_GPIO_Init+0x30c>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d101      	bne.n	8000e98 <HAL_GPIO_Init+0x1ec>
 8000e94:	2306      	movs	r3, #6
 8000e96:	e00c      	b.n	8000eb2 <HAL_GPIO_Init+0x206>
 8000e98:	2307      	movs	r3, #7
 8000e9a:	e00a      	b.n	8000eb2 <HAL_GPIO_Init+0x206>
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	e008      	b.n	8000eb2 <HAL_GPIO_Init+0x206>
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	e006      	b.n	8000eb2 <HAL_GPIO_Init+0x206>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e004      	b.n	8000eb2 <HAL_GPIO_Init+0x206>
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	e002      	b.n	8000eb2 <HAL_GPIO_Init+0x206>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <HAL_GPIO_Init+0x206>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	f002 0203 	and.w	r2, r2, #3
 8000eb8:	0092      	lsls	r2, r2, #2
 8000eba:	4093      	lsls	r3, r2
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ec2:	4937      	ldr	r1, [pc, #220]	; (8000fa0 <HAL_GPIO_Init+0x2f4>)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	3302      	adds	r3, #2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed0:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <HAL_GPIO_Init+0x310>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ef4:	4a31      	ldr	r2, [pc, #196]	; (8000fbc <HAL_GPIO_Init+0x310>)
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000efa:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <HAL_GPIO_Init+0x310>)
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f1e:	4a27      	ldr	r2, [pc, #156]	; (8000fbc <HAL_GPIO_Init+0x310>)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f24:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <HAL_GPIO_Init+0x310>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f48:	4a1c      	ldr	r2, [pc, #112]	; (8000fbc <HAL_GPIO_Init+0x310>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_GPIO_Init+0x310>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <HAL_GPIO_Init+0x310>)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	fa22 f303 	lsr.w	r3, r2, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f47f ae97 	bne.w	8000cbc <HAL_GPIO_Init+0x10>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	371c      	adds	r7, #28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	48000800 	.word	0x48000800
 8000fac:	48000c00 	.word	0x48000c00
 8000fb0:	48001000 	.word	0x48001000
 8000fb4:	48001400 	.word	0x48001400
 8000fb8:	48001800 	.word	0x48001800
 8000fbc:	40010400 	.word	0x40010400

08000fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e001      	b.n	8000fe2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001000:	787b      	ldrb	r3, [r7, #1]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800100c:	e002      	b.n	8001014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800100e:	887a      	ldrh	r2, [r7, #2]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001026:	af00      	add	r7, sp, #0
 8001028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800102c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001030:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001036:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	f001 b83a 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800104a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 816f 	beq.w	800133a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800105c:	4bb5      	ldr	r3, [pc, #724]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	2b04      	cmp	r3, #4
 8001066:	d00c      	beq.n	8001082 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001068:	4bb2      	ldr	r3, [pc, #712]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b08      	cmp	r3, #8
 8001072:	d15c      	bne.n	800112e <HAL_RCC_OscConfig+0x10e>
 8001074:	4baf      	ldr	r3, [pc, #700]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800107c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001080:	d155      	bne.n	800112e <HAL_RCC_OscConfig+0x10e>
 8001082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001086:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001096:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109a:	fab3 f383 	clz	r3, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	095b      	lsrs	r3, r3, #5
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d102      	bne.n	80010b4 <HAL_RCC_OscConfig+0x94>
 80010ae:	4ba1      	ldr	r3, [pc, #644]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	e015      	b.n	80010e0 <HAL_RCC_OscConfig+0xc0>
 80010b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80010c0:	fa93 f3a3 	rbit	r3, r3
 80010c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80010c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010cc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010d0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80010d4:	fa93 f3a3 	rbit	r3, r3
 80010d8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010dc:	4b95      	ldr	r3, [pc, #596]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010e4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80010e8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80010ec:	fa92 f2a2 	rbit	r2, r2
 80010f0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80010f4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010f8:	fab2 f282 	clz	r2, r2
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	f042 0220 	orr.w	r2, r2, #32
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	f002 021f 	and.w	r2, r2, #31
 8001108:	2101      	movs	r1, #1
 800110a:	fa01 f202 	lsl.w	r2, r1, r2
 800110e:	4013      	ands	r3, r2
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 8111 	beq.w	8001338 <HAL_RCC_OscConfig+0x318>
 8001116:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800111a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f040 8108 	bne.w	8001338 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	f000 bfc6 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001132:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113e:	d106      	bne.n	800114e <HAL_RCC_OscConfig+0x12e>
 8001140:	4b7c      	ldr	r3, [pc, #496]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a7b      	ldr	r2, [pc, #492]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	e036      	b.n	80011bc <HAL_RCC_OscConfig+0x19c>
 800114e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001152:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0x158>
 800115e:	4b75      	ldr	r3, [pc, #468]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a74      	ldr	r2, [pc, #464]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	4b72      	ldr	r3, [pc, #456]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a71      	ldr	r2, [pc, #452]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e021      	b.n	80011bc <HAL_RCC_OscConfig+0x19c>
 8001178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800117c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x184>
 800118a:	4b6a      	ldr	r3, [pc, #424]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a69      	ldr	r2, [pc, #420]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b67      	ldr	r3, [pc, #412]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a66      	ldr	r2, [pc, #408]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 800119c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e00b      	b.n	80011bc <HAL_RCC_OscConfig+0x19c>
 80011a4:	4b63      	ldr	r3, [pc, #396]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a62      	ldr	r2, [pc, #392]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80011aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b60      	ldr	r3, [pc, #384]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a5f      	ldr	r2, [pc, #380]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80011b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ba:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d059      	beq.n	8001280 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fc58 	bl	8000a80 <HAL_GetTick>
 80011d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d4:	e00a      	b.n	80011ec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d6:	f7ff fc53 	bl	8000a80 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d902      	bls.n	80011ec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f000 bf67 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
 80011ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80011f8:	fa93 f3a3 	rbit	r3, r3
 80011fc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001200:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001204:	fab3 f383 	clz	r3, r3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	b2db      	uxtb	r3, r3
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d102      	bne.n	800121e <HAL_RCC_OscConfig+0x1fe>
 8001218:	4b46      	ldr	r3, [pc, #280]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	e015      	b.n	800124a <HAL_RCC_OscConfig+0x22a>
 800121e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001222:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001232:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001236:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800123a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001246:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800124e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001252:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001256:	fa92 f2a2 	rbit	r2, r2
 800125a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800125e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001262:	fab2 f282 	clz	r2, r2
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	f042 0220 	orr.w	r2, r2, #32
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	f002 021f 	and.w	r2, r2, #31
 8001272:	2101      	movs	r1, #1
 8001274:	fa01 f202 	lsl.w	r2, r1, r2
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0ab      	beq.n	80011d6 <HAL_RCC_OscConfig+0x1b6>
 800127e:	e05c      	b.n	800133a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fbfe 	bl	8000a80 <HAL_GetTick>
 8001284:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001288:	e00a      	b.n	80012a0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128a:	f7ff fbf9 	bl	8000a80 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d902      	bls.n	80012a0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	f000 bf0d 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
 80012a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80012ac:	fa93 f3a3 	rbit	r3, r3
 80012b0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80012b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b8:	fab3 f383 	clz	r3, r3
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d102      	bne.n	80012d2 <HAL_RCC_OscConfig+0x2b2>
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	e015      	b.n	80012fe <HAL_RCC_OscConfig+0x2de>
 80012d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80012de:	fa93 f3a3 	rbit	r3, r3
 80012e2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80012e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_RCC_OscConfig+0x314>)
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001302:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001306:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800130a:	fa92 f2a2 	rbit	r2, r2
 800130e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001312:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001316:	fab2 f282 	clz	r2, r2
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	f042 0220 	orr.w	r2, r2, #32
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	f002 021f 	and.w	r2, r2, #31
 8001326:	2101      	movs	r1, #1
 8001328:	fa01 f202 	lsl.w	r2, r1, r2
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1ab      	bne.n	800128a <HAL_RCC_OscConfig+0x26a>
 8001332:	e002      	b.n	800133a <HAL_RCC_OscConfig+0x31a>
 8001334:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800133e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 817f 	beq.w	800164e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001350:	4ba7      	ldr	r3, [pc, #668]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00c      	beq.n	8001376 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800135c:	4ba4      	ldr	r3, [pc, #656]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	2b08      	cmp	r3, #8
 8001366:	d173      	bne.n	8001450 <HAL_RCC_OscConfig+0x430>
 8001368:	4ba1      	ldr	r3, [pc, #644]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001374:	d16c      	bne.n	8001450 <HAL_RCC_OscConfig+0x430>
 8001376:	2302      	movs	r3, #2
 8001378:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001380:	fa93 f3a3 	rbit	r3, r3
 8001384:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001388:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138c:	fab3 f383 	clz	r3, r3
 8001390:	b2db      	uxtb	r3, r3
 8001392:	095b      	lsrs	r3, r3, #5
 8001394:	b2db      	uxtb	r3, r3
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b01      	cmp	r3, #1
 800139e:	d102      	bne.n	80013a6 <HAL_RCC_OscConfig+0x386>
 80013a0:	4b93      	ldr	r3, [pc, #588]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	e013      	b.n	80013ce <HAL_RCC_OscConfig+0x3ae>
 80013a6:	2302      	movs	r3, #2
 80013a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80013b0:	fa93 f3a3 	rbit	r3, r3
 80013b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80013b8:	2302      	movs	r3, #2
 80013ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80013be:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80013c2:	fa93 f3a3 	rbit	r3, r3
 80013c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013ca:	4b89      	ldr	r3, [pc, #548]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	2202      	movs	r2, #2
 80013d0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80013d4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80013d8:	fa92 f2a2 	rbit	r2, r2
 80013dc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80013e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013e4:	fab2 f282 	clz	r2, r2
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	f042 0220 	orr.w	r2, r2, #32
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	f002 021f 	and.w	r2, r2, #31
 80013f4:	2101      	movs	r1, #1
 80013f6:	fa01 f202 	lsl.w	r2, r1, r2
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00a      	beq.n	8001416 <HAL_RCC_OscConfig+0x3f6>
 8001400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001404:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d002      	beq.n	8001416 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	f000 be52 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b76      	ldr	r3, [pc, #472]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001422:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	21f8      	movs	r1, #248	; 0xf8
 800142c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001430:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001434:	fa91 f1a1 	rbit	r1, r1
 8001438:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800143c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001440:	fab1 f181 	clz	r1, r1
 8001444:	b2c9      	uxtb	r1, r1
 8001446:	408b      	lsls	r3, r1
 8001448:	4969      	ldr	r1, [pc, #420]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144e:	e0fe      	b.n	800164e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001454:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 8088 	beq.w	8001572 <HAL_RCC_OscConfig+0x552>
 8001462:	2301      	movs	r3, #1
 8001464:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001474:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001478:	fab3 f383 	clz	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001482:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	461a      	mov	r2, r3
 800148a:	2301      	movs	r3, #1
 800148c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff faf7 	bl	8000a80 <HAL_GetTick>
 8001492:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001496:	e00a      	b.n	80014ae <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001498:	f7ff faf2 	bl	8000a80 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d902      	bls.n	80014ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	f000 be06 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
 80014ae:	2302      	movs	r3, #2
 80014b0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80014b8:	fa93 f3a3 	rbit	r3, r3
 80014bc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80014c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	fab3 f383 	clz	r3, r3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d102      	bne.n	80014de <HAL_RCC_OscConfig+0x4be>
 80014d8:	4b45      	ldr	r3, [pc, #276]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	e013      	b.n	8001506 <HAL_RCC_OscConfig+0x4e6>
 80014de:	2302      	movs	r3, #2
 80014e0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80014e8:	fa93 f3a3 	rbit	r3, r3
 80014ec:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80014f0:	2302      	movs	r3, #2
 80014f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	2202      	movs	r2, #2
 8001508:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800150c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001510:	fa92 f2a2 	rbit	r2, r2
 8001514:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001518:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800151c:	fab2 f282 	clz	r2, r2
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	f042 0220 	orr.w	r2, r2, #32
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	f002 021f 	and.w	r2, r2, #31
 800152c:	2101      	movs	r1, #1
 800152e:	fa01 f202 	lsl.w	r2, r1, r2
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0af      	beq.n	8001498 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001544:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	21f8      	movs	r1, #248	; 0xf8
 800154e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001552:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001556:	fa91 f1a1 	rbit	r1, r1
 800155a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800155e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001562:	fab1 f181 	clz	r1, r1
 8001566:	b2c9      	uxtb	r1, r1
 8001568:	408b      	lsls	r3, r1
 800156a:	4921      	ldr	r1, [pc, #132]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
 8001570:	e06d      	b.n	800164e <HAL_RCC_OscConfig+0x62e>
 8001572:	2301      	movs	r3, #1
 8001574:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001578:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800157c:	fa93 f3a3 	rbit	r3, r3
 8001580:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001584:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001592:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	461a      	mov	r2, r3
 800159a:	2300      	movs	r3, #0
 800159c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff fa6f 	bl	8000a80 <HAL_GetTick>
 80015a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a6:	e00a      	b.n	80015be <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a8:	f7ff fa6a 	bl	8000a80 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d902      	bls.n	80015be <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	f000 bd7e 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015c8:	fa93 f3a3 	rbit	r3, r3
 80015cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80015d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d4:	fab3 f383 	clz	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_RCC_OscConfig+0x5d4>
 80015e8:	4b01      	ldr	r3, [pc, #4]	; (80015f0 <HAL_RCC_OscConfig+0x5d0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	e016      	b.n	800161c <HAL_RCC_OscConfig+0x5fc>
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	2302      	movs	r3, #2
 80015f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800160c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001618:	4bbf      	ldr	r3, [pc, #764]	; (8001918 <HAL_RCC_OscConfig+0x8f8>)
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	2202      	movs	r2, #2
 800161e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001622:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001626:	fa92 f2a2 	rbit	r2, r2
 800162a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800162e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001632:	fab2 f282 	clz	r2, r2
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	f042 0220 	orr.w	r2, r2, #32
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	f002 021f 	and.w	r2, r2, #31
 8001642:	2101      	movs	r1, #1
 8001644:	fa01 f202 	lsl.w	r2, r1, r2
 8001648:	4013      	ands	r3, r2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1ac      	bne.n	80015a8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001652:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8113 	beq.w	800188a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001668:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d07c      	beq.n	800176e <HAL_RCC_OscConfig+0x74e>
 8001674:	2301      	movs	r3, #1
 8001676:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001686:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	461a      	mov	r2, r3
 8001692:	4ba2      	ldr	r3, [pc, #648]	; (800191c <HAL_RCC_OscConfig+0x8fc>)
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	461a      	mov	r2, r3
 800169a:	2301      	movs	r3, #1
 800169c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff f9ef 	bl	8000a80 <HAL_GetTick>
 80016a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a6:	e00a      	b.n	80016be <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a8:	f7ff f9ea 	bl	8000a80 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d902      	bls.n	80016be <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	f000 bcfe 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
 80016be:	2302      	movs	r3, #2
 80016c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016c8:	fa93 f2a3 	rbit	r2, r3
 80016cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016de:	2202      	movs	r2, #2
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	fa93 f2a3 	rbit	r2, r3
 80016f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001702:	2202      	movs	r2, #2
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800170a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	fa93 f2a3 	rbit	r2, r3
 8001714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001718:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800171c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	4b7e      	ldr	r3, [pc, #504]	; (8001918 <HAL_RCC_OscConfig+0x8f8>)
 8001720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001726:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800172a:	2102      	movs	r1, #2
 800172c:	6019      	str	r1, [r3, #0]
 800172e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001732:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	fa93 f1a3 	rbit	r1, r3
 800173c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001740:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001744:	6019      	str	r1, [r3, #0]
  return result;
 8001746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	fab3 f383 	clz	r3, r3
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f003 031f 	and.w	r3, r3, #31
 8001760:	2101      	movs	r1, #1
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d09d      	beq.n	80016a8 <HAL_RCC_OscConfig+0x688>
 800176c:	e08d      	b.n	800188a <HAL_RCC_OscConfig+0x86a>
 800176e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001772:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	fa93 f2a3 	rbit	r2, r3
 8001788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800178c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001790:	601a      	str	r2, [r3, #0]
  return result;
 8001792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001796:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800179a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b5d      	ldr	r3, [pc, #372]	; (800191c <HAL_RCC_OscConfig+0x8fc>)
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	461a      	mov	r2, r3
 80017ac:	2300      	movs	r3, #0
 80017ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b0:	f7ff f966 	bl	8000a80 <HAL_GetTick>
 80017b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ba:	f7ff f961 	bl	8000a80 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d902      	bls.n	80017d0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	f000 bc75 	b.w	80020ba <HAL_RCC_OscConfig+0x109a>
 80017d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017d8:	2202      	movs	r2, #2
 80017da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fa93 f2a3 	rbit	r2, r3
 80017ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017fc:	2202      	movs	r2, #2
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	fa93 f2a3 	rbit	r2, r3
 800180e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001820:	2202      	movs	r2, #2
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001828:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fa93 f2a3 	rbit	r2, r3
 8001832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001836:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800183a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_RCC_OscConfig+0x8f8>)
 800183e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001844:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001848:	2102      	movs	r1, #2
 800184a:	6019      	str	r1, [r3, #0]
 800184c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001850:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	fa93 f1a3 	rbit	r1, r3
 800185a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800185e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001862:	6019      	str	r1, [r3, #0]
  return result;
 8001864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001868:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	fab3 f383 	clz	r3, r3
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f003 031f 	and.w	r3, r3, #31
 800187e:	2101      	movs	r1, #1
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d197      	bne.n	80017ba <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 81a5 	beq.w	8001bea <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <HAL_RCC_OscConfig+0x8f8>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d116      	bne.n	80018e0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_OscConfig+0x8f8>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <HAL_RCC_OscConfig+0x8f8>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	61d3      	str	r3, [r2, #28]
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <HAL_RCC_OscConfig+0x8f8>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018da:	2301      	movs	r3, #1
 80018dc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_RCC_OscConfig+0x900>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d121      	bne.n	8001930 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_RCC_OscConfig+0x900>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <HAL_RCC_OscConfig+0x900>)
 80018f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f8:	f7ff f8c2 	bl	8000a80 <HAL_GetTick>
 80018fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	e010      	b.n	8001924 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001902:	f7ff f8bd 	bl	8000a80 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d908      	bls.n	8001924 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e3d1      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	10908120 	.word	0x10908120
 8001920:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001924:	4b8d      	ldr	r3, [pc, #564]	; (8001b5c <HAL_RCC_OscConfig+0xb3c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0e8      	beq.n	8001902 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001934:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d106      	bne.n	800194e <HAL_RCC_OscConfig+0x92e>
 8001940:	4b87      	ldr	r3, [pc, #540]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4a86      	ldr	r2, [pc, #536]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6213      	str	r3, [r2, #32]
 800194c:	e035      	b.n	80019ba <HAL_RCC_OscConfig+0x99a>
 800194e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001952:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x958>
 800195e:	4b80      	ldr	r3, [pc, #512]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4a7f      	ldr	r2, [pc, #508]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6213      	str	r3, [r2, #32]
 800196a:	4b7d      	ldr	r3, [pc, #500]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4a7c      	ldr	r2, [pc, #496]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6213      	str	r3, [r2, #32]
 8001976:	e020      	b.n	80019ba <HAL_RCC_OscConfig+0x99a>
 8001978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b05      	cmp	r3, #5
 8001986:	d10c      	bne.n	80019a2 <HAL_RCC_OscConfig+0x982>
 8001988:	4b75      	ldr	r3, [pc, #468]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a74      	ldr	r2, [pc, #464]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	4b72      	ldr	r3, [pc, #456]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4a71      	ldr	r2, [pc, #452]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	e00b      	b.n	80019ba <HAL_RCC_OscConfig+0x99a>
 80019a2:	4b6f      	ldr	r3, [pc, #444]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	4a6e      	ldr	r2, [pc, #440]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6213      	str	r3, [r2, #32]
 80019ae:	4b6c      	ldr	r3, [pc, #432]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4a6b      	ldr	r2, [pc, #428]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 80019b4:	f023 0304 	bic.w	r3, r3, #4
 80019b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8081 	beq.w	8001ace <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019cc:	f7ff f858 	bl	8000a80 <HAL_GetTick>
 80019d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d4:	e00b      	b.n	80019ee <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7ff f853 	bl	8000a80 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e365      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
 80019ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019f6:	2202      	movs	r2, #2
 80019f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	fa93 f2a3 	rbit	r2, r3
 8001a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a16:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	fa93 f2a3 	rbit	r2, r3
 8001a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a30:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a34:	601a      	str	r2, [r3, #0]
  return result;
 8001a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f043 0302 	orr.w	r3, r3, #2
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d102      	bne.n	8001a5a <HAL_RCC_OscConfig+0xa3a>
 8001a54:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	e013      	b.n	8001a82 <HAL_RCC_OscConfig+0xa62>
 8001a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a62:	2202      	movs	r2, #2
 8001a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	fa93 f2a3 	rbit	r2, r3
 8001a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a78:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a86:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a8a:	2102      	movs	r1, #2
 8001a8c:	6011      	str	r1, [r2, #0]
 8001a8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	fa92 f1a2 	rbit	r1, r2
 8001a9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001aa0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001aa4:	6011      	str	r1, [r2, #0]
  return result;
 8001aa6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001aaa:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	fab2 f282 	clz	r2, r2
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	f002 021f 	and.w	r2, r2, #31
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d084      	beq.n	80019d6 <HAL_RCC_OscConfig+0x9b6>
 8001acc:	e083      	b.n	8001bd6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ace:	f7fe ffd7 	bl	8000a80 <HAL_GetTick>
 8001ad2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad6:	e00b      	b.n	8001af0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad8:	f7fe ffd2 	bl	8000a80 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e2e4      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
 8001af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001af8:	2202      	movs	r2, #2
 8001afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	fa93 f2a3 	rbit	r2, r3
 8001b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b18:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	fa93 f2a3 	rbit	r2, r3
 8001b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b32:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b36:	601a      	str	r2, [r3, #0]
  return result;
 8001b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	095b      	lsrs	r3, r3, #5
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d106      	bne.n	8001b64 <HAL_RCC_OscConfig+0xb44>
 8001b56:	4b02      	ldr	r3, [pc, #8]	; (8001b60 <HAL_RCC_OscConfig+0xb40>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	e017      	b.n	8001b8c <HAL_RCC_OscConfig+0xb6c>
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	40021000 	.word	0x40021000
 8001b64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b74:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fa93 f2a3 	rbit	r2, r3
 8001b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b82:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	4bb3      	ldr	r3, [pc, #716]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b94:	2102      	movs	r1, #2
 8001b96:	6011      	str	r1, [r2, #0]
 8001b98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b9c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	fa92 f1a2 	rbit	r1, r2
 8001ba6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001baa:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001bae:	6011      	str	r1, [r2, #0]
  return result;
 8001bb0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bb4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	fab2 f282 	clz	r2, r2
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	f002 021f 	and.w	r2, r2, #31
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d180      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bd6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d105      	bne.n	8001bea <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bde:	4b9e      	ldr	r3, [pc, #632]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4a9d      	ldr	r2, [pc, #628]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 825e 	beq.w	80020b8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bfc:	4b96      	ldr	r3, [pc, #600]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	f000 821f 	beq.w	8002048 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	f040 8170 	bne.w	8001efc <HAL_RCC_OscConfig+0xedc>
 8001c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c20:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	fa93 f2a3 	rbit	r2, r3
 8001c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c40:	601a      	str	r2, [r3, #0]
  return result;
 8001c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c46:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c4a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2300      	movs	r3, #0
 8001c60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7fe ff0d 	bl	8000a80 <HAL_GetTick>
 8001c66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6a:	e009      	b.n	8001c80 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7fe ff08 	bl	8000a80 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e21c      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
 8001c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c84:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c92:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fa93 f2a3 	rbit	r2, r3
 8001c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ca4:	601a      	str	r2, [r3, #0]
  return result;
 8001ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001caa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001cae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_OscConfig+0xcaa>
 8001cc4:	4b64      	ldr	r3, [pc, #400]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	e027      	b.n	8001d1a <HAL_RCC_OscConfig+0xcfa>
 8001cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001cd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cdc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	fa93 f2a3 	rbit	r2, r3
 8001ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d02:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d10:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	4b50      	ldr	r3, [pc, #320]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d1e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d22:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d26:	6011      	str	r1, [r2, #0]
 8001d28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d2c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	fa92 f1a2 	rbit	r1, r2
 8001d36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d3a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d3e:	6011      	str	r1, [r2, #0]
  return result;
 8001d40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d44:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	fab2 f282 	clz	r2, r2
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f042 0220 	orr.w	r2, r2, #32
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	f002 021f 	and.w	r2, r2, #31
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d182      	bne.n	8001c6c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d66:	4b3c      	ldr	r3, [pc, #240]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	f023 020f 	bic.w	r2, r3, #15
 8001d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	4937      	ldr	r1, [pc, #220]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001d80:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6a19      	ldr	r1, [r3, #32]
 8001d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	430b      	orrs	r3, r1
 8001da2:	492d      	ldr	r1, [pc, #180]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
 8001da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001db0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fa93 f2a3 	rbit	r2, r3
 8001dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001dcc:	601a      	str	r2, [r3, #0]
  return result;
 8001dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001dd6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	461a      	mov	r2, r3
 8001dea:	2301      	movs	r3, #1
 8001dec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7fe fe47 	bl	8000a80 <HAL_GetTick>
 8001df2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df6:	e009      	b.n	8001e0c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe fe42 	bl	8000a80 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e156      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
 8001e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e10:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	fa93 f2a3 	rbit	r2, r3
 8001e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e30:	601a      	str	r2, [r3, #0]
  return result;
 8001e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e36:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d105      	bne.n	8001e5c <HAL_RCC_OscConfig+0xe3c>
 8001e50:	4b01      	ldr	r3, [pc, #4]	; (8001e58 <HAL_RCC_OscConfig+0xe38>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	e02a      	b.n	8001eac <HAL_RCC_OscConfig+0xe8c>
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e60:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	fa93 f2a3 	rbit	r2, r3
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e86:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e94:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	fa93 f2a3 	rbit	r2, r3
 8001e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	4b86      	ldr	r3, [pc, #536]	; (80020c4 <HAL_RCC_OscConfig+0x10a4>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eb0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001eb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eb8:	6011      	str	r1, [r2, #0]
 8001eba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ebe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	fa92 f1a2 	rbit	r1, r2
 8001ec8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ecc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001ed0:	6011      	str	r1, [r2, #0]
  return result;
 8001ed2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ed6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	fab2 f282 	clz	r2, r2
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f042 0220 	orr.w	r2, r2, #32
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	f002 021f 	and.w	r2, r2, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f43f af7f 	beq.w	8001df8 <HAL_RCC_OscConfig+0xdd8>
 8001efa:	e0dd      	b.n	80020b8 <HAL_RCC_OscConfig+0x1098>
 8001efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	fa93 f2a3 	rbit	r2, r3
 8001f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f20:	601a      	str	r2, [r3, #0]
  return result;
 8001f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f2a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2300      	movs	r3, #0
 8001f40:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7fe fd9d 	bl	8000a80 <HAL_GetTick>
 8001f46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4a:	e009      	b.n	8001f60 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7fe fd98 	bl	8000a80 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0ac      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
 8001f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f72:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	fa93 f2a3 	rbit	r2, r3
 8001f7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f84:	601a      	str	r2, [r3, #0]
  return result;
 8001f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f8a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d102      	bne.n	8001faa <HAL_RCC_OscConfig+0xf8a>
 8001fa4:	4b47      	ldr	r3, [pc, #284]	; (80020c4 <HAL_RCC_OscConfig+0x10a4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	e027      	b.n	8001ffa <HAL_RCC_OscConfig+0xfda>
 8001faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fae:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001fb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fbc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001fd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	fa93 f2a3 	rbit	r2, r3
 8001fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <HAL_RCC_OscConfig+0x10a4>)
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ffe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002002:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002006:	6011      	str	r1, [r2, #0]
 8002008:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800200c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	fa92 f1a2 	rbit	r1, r2
 8002016:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800201a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800201e:	6011      	str	r1, [r2, #0]
  return result;
 8002020:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002024:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	fab2 f282 	clz	r2, r2
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	f042 0220 	orr.w	r2, r2, #32
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f002 021f 	and.w	r2, r2, #31
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d182      	bne.n	8001f4c <HAL_RCC_OscConfig+0xf2c>
 8002046:	e037      	b.n	80020b8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e02e      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_RCC_OscConfig+0x10a4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_RCC_OscConfig+0x10a4>)
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800206c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002070:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002078:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	429a      	cmp	r2, r3
 8002082:	d117      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002084:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002088:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800208c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002090:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002098:	429a      	cmp	r2, r3
 800209a:	d10b      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800209c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020a0:	f003 020f 	and.w	r2, r3, #15
 80020a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000

080020c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b09e      	sub	sp, #120	; 0x78
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e162      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020e0:	4b90      	ldr	r3, [pc, #576]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d910      	bls.n	8002110 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b8d      	ldr	r3, [pc, #564]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 0207 	bic.w	r2, r3, #7
 80020f6:	498b      	ldr	r1, [pc, #556]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b89      	ldr	r3, [pc, #548]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e14a      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211c:	4b82      	ldr	r3, [pc, #520]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	497f      	ldr	r1, [pc, #508]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80dc 	beq.w	80022f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d13c      	bne.n	80021be <HAL_RCC_ClockConfig+0xf6>
 8002144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002148:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b01      	cmp	r3, #1
 8002166:	d102      	bne.n	800216e <HAL_RCC_ClockConfig+0xa6>
 8002168:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	e00f      	b.n	800218e <HAL_RCC_ClockConfig+0xc6>
 800216e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002172:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	667b      	str	r3, [r7, #100]	; 0x64
 800217c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002180:	663b      	str	r3, [r7, #96]	; 0x60
 8002182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800218a:	4b67      	ldr	r3, [pc, #412]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002192:	65ba      	str	r2, [r7, #88]	; 0x58
 8002194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002196:	fa92 f2a2 	rbit	r2, r2
 800219a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800219c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800219e:	fab2 f282 	clz	r2, r2
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	f042 0220 	orr.w	r2, r2, #32
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f002 021f 	and.w	r2, r2, #31
 80021ae:	2101      	movs	r1, #1
 80021b0:	fa01 f202 	lsl.w	r2, r1, r2
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d17b      	bne.n	80022b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0f3      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d13c      	bne.n	8002240 <HAL_RCC_ClockConfig+0x178>
 80021c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	095b      	lsrs	r3, r3, #5
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d102      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x128>
 80021ea:	4b4f      	ldr	r3, [pc, #316]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	e00f      	b.n	8002210 <HAL_RCC_ClockConfig+0x148>
 80021f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	647b      	str	r3, [r7, #68]	; 0x44
 80021fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002202:	643b      	str	r3, [r7, #64]	; 0x40
 8002204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800220c:	4b46      	ldr	r3, [pc, #280]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002214:	63ba      	str	r2, [r7, #56]	; 0x38
 8002216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002218:	fa92 f2a2 	rbit	r2, r2
 800221c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800221e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002220:	fab2 f282 	clz	r2, r2
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	f042 0220 	orr.w	r2, r2, #32
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	f002 021f 	and.w	r2, r2, #31
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f202 	lsl.w	r2, r1, r2
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d13a      	bne.n	80022b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0b2      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
 8002240:	2302      	movs	r3, #2
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d102      	bne.n	8002268 <HAL_RCC_ClockConfig+0x1a0>
 8002262:	4b31      	ldr	r3, [pc, #196]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	e00d      	b.n	8002284 <HAL_RCC_ClockConfig+0x1bc>
 8002268:	2302      	movs	r3, #2
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
 8002274:	2302      	movs	r3, #2
 8002276:	623b      	str	r3, [r7, #32]
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	2202      	movs	r2, #2
 8002286:	61ba      	str	r2, [r7, #24]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	fa92 f2a2 	rbit	r2, r2
 800228e:	617a      	str	r2, [r7, #20]
  return result;
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	fab2 f282 	clz	r2, r2
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	f042 0220 	orr.w	r2, r2, #32
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	f002 021f 	and.w	r2, r2, #31
 80022a2:	2101      	movs	r1, #1
 80022a4:	fa01 f202 	lsl.w	r2, r1, r2
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e079      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f023 0203 	bic.w	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	491a      	ldr	r1, [pc, #104]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c4:	f7fe fbdc 	bl	8000a80 <HAL_GetTick>
 80022c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7fe fbd8 	bl	8000a80 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e061      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 020c 	and.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1eb      	bne.n	80022cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d214      	bcs.n	800232c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0207 	bic.w	r2, r3, #7
 800230a:	4906      	ldr	r1, [pc, #24]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <HAL_RCC_ClockConfig+0x25c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e040      	b.n	80023a6 <HAL_RCC_ClockConfig+0x2de>
 8002324:	40022000 	.word	0x40022000
 8002328:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCC_ClockConfig+0x2e8>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	491a      	ldr	r1, [pc, #104]	; (80023b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4912      	ldr	r1, [pc, #72]	; (80023b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800236a:	f000 f829 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 800236e:	4601      	mov	r1, r0
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002378:	22f0      	movs	r2, #240	; 0xf0
 800237a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	fa92 f2a2 	rbit	r2, r2
 8002382:	60fa      	str	r2, [r7, #12]
  return result;
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	fab2 f282 	clz	r2, r2
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	40d3      	lsrs	r3, r2
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x2ec>)
 8002390:	5cd3      	ldrb	r3, [r2, r3]
 8002392:	fa21 f303 	lsr.w	r3, r1, r3
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <HAL_RCC_ClockConfig+0x2f0>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_RCC_ClockConfig+0x2f4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fb2a 	bl	80009f8 <HAL_InitTick>
  
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3778      	adds	r7, #120	; 0x78
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	08003478 	.word	0x08003478
 80023b8:	20000004 	.word	0x20000004
 80023bc:	20000008 	.word	0x20000008

080023c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b08b      	sub	sp, #44	; 0x2c
 80023c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d002      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x30>
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x36>
 80023ee:	e03f      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023f0:	4b25      	ldr	r3, [pc, #148]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023f2:	623b      	str	r3, [r7, #32]
      break;
 80023f4:	e03f      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002400:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	fa92 f2a2 	rbit	r2, r2
 8002408:	607a      	str	r2, [r7, #4]
  return result;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	40d3      	lsrs	r3, r2
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_RCC_GetSysClockFreq+0xc4>)
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	220f      	movs	r2, #15
 8002424:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	fa92 f2a2 	rbit	r2, r2
 800242c:	60fa      	str	r2, [r7, #12]
  return result;
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	fab2 f282 	clz	r2, r2
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	40d3      	lsrs	r3, r2
 8002438:	4a15      	ldr	r2, [pc, #84]	; (8002490 <HAL_RCC_GetSysClockFreq+0xd0>)
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002448:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc8>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
 8002458:	e007      	b.n	800246a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800245a:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc8>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	623b      	str	r3, [r7, #32]
      break;
 800246e:	e002      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002472:	623b      	str	r3, [r7, #32]
      break;
 8002474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002476:	6a3b      	ldr	r3, [r7, #32]
}
 8002478:	4618      	mov	r0, r3
 800247a:	372c      	adds	r7, #44	; 0x2c
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40021000 	.word	0x40021000
 8002488:	007a1200 	.word	0x007a1200
 800248c:	08003488 	.word	0x08003488
 8002490:	08003498 	.word	0x08003498

08002494 <malloc>:
 8002494:	4b02      	ldr	r3, [pc, #8]	; (80024a0 <malloc+0xc>)
 8002496:	4601      	mov	r1, r0
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	f000 b823 	b.w	80024e4 <_malloc_r>
 800249e:	bf00      	nop
 80024a0:	20000068 	.word	0x20000068

080024a4 <sbrk_aligned>:
 80024a4:	b570      	push	{r4, r5, r6, lr}
 80024a6:	4e0e      	ldr	r6, [pc, #56]	; (80024e0 <sbrk_aligned+0x3c>)
 80024a8:	460c      	mov	r4, r1
 80024aa:	6831      	ldr	r1, [r6, #0]
 80024ac:	4605      	mov	r5, r0
 80024ae:	b911      	cbnz	r1, 80024b6 <sbrk_aligned+0x12>
 80024b0:	f000 fa24 	bl	80028fc <_sbrk_r>
 80024b4:	6030      	str	r0, [r6, #0]
 80024b6:	4621      	mov	r1, r4
 80024b8:	4628      	mov	r0, r5
 80024ba:	f000 fa1f 	bl	80028fc <_sbrk_r>
 80024be:	1c43      	adds	r3, r0, #1
 80024c0:	d00a      	beq.n	80024d8 <sbrk_aligned+0x34>
 80024c2:	1cc4      	adds	r4, r0, #3
 80024c4:	f024 0403 	bic.w	r4, r4, #3
 80024c8:	42a0      	cmp	r0, r4
 80024ca:	d007      	beq.n	80024dc <sbrk_aligned+0x38>
 80024cc:	1a21      	subs	r1, r4, r0
 80024ce:	4628      	mov	r0, r5
 80024d0:	f000 fa14 	bl	80028fc <_sbrk_r>
 80024d4:	3001      	adds	r0, #1
 80024d6:	d101      	bne.n	80024dc <sbrk_aligned+0x38>
 80024d8:	f04f 34ff 	mov.w	r4, #4294967295
 80024dc:	4620      	mov	r0, r4
 80024de:	bd70      	pop	{r4, r5, r6, pc}
 80024e0:	200000a8 	.word	0x200000a8

080024e4 <_malloc_r>:
 80024e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024e8:	1ccd      	adds	r5, r1, #3
 80024ea:	f025 0503 	bic.w	r5, r5, #3
 80024ee:	3508      	adds	r5, #8
 80024f0:	2d0c      	cmp	r5, #12
 80024f2:	bf38      	it	cc
 80024f4:	250c      	movcc	r5, #12
 80024f6:	2d00      	cmp	r5, #0
 80024f8:	4607      	mov	r7, r0
 80024fa:	db01      	blt.n	8002500 <_malloc_r+0x1c>
 80024fc:	42a9      	cmp	r1, r5
 80024fe:	d905      	bls.n	800250c <_malloc_r+0x28>
 8002500:	230c      	movs	r3, #12
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	2600      	movs	r6, #0
 8002506:	4630      	mov	r0, r6
 8002508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800250c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80025e0 <_malloc_r+0xfc>
 8002510:	f000 f868 	bl	80025e4 <__malloc_lock>
 8002514:	f8d8 3000 	ldr.w	r3, [r8]
 8002518:	461c      	mov	r4, r3
 800251a:	bb5c      	cbnz	r4, 8002574 <_malloc_r+0x90>
 800251c:	4629      	mov	r1, r5
 800251e:	4638      	mov	r0, r7
 8002520:	f7ff ffc0 	bl	80024a4 <sbrk_aligned>
 8002524:	1c43      	adds	r3, r0, #1
 8002526:	4604      	mov	r4, r0
 8002528:	d155      	bne.n	80025d6 <_malloc_r+0xf2>
 800252a:	f8d8 4000 	ldr.w	r4, [r8]
 800252e:	4626      	mov	r6, r4
 8002530:	2e00      	cmp	r6, #0
 8002532:	d145      	bne.n	80025c0 <_malloc_r+0xdc>
 8002534:	2c00      	cmp	r4, #0
 8002536:	d048      	beq.n	80025ca <_malloc_r+0xe6>
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	4631      	mov	r1, r6
 800253c:	4638      	mov	r0, r7
 800253e:	eb04 0903 	add.w	r9, r4, r3
 8002542:	f000 f9db 	bl	80028fc <_sbrk_r>
 8002546:	4581      	cmp	r9, r0
 8002548:	d13f      	bne.n	80025ca <_malloc_r+0xe6>
 800254a:	6821      	ldr	r1, [r4, #0]
 800254c:	1a6d      	subs	r5, r5, r1
 800254e:	4629      	mov	r1, r5
 8002550:	4638      	mov	r0, r7
 8002552:	f7ff ffa7 	bl	80024a4 <sbrk_aligned>
 8002556:	3001      	adds	r0, #1
 8002558:	d037      	beq.n	80025ca <_malloc_r+0xe6>
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	442b      	add	r3, r5
 800255e:	6023      	str	r3, [r4, #0]
 8002560:	f8d8 3000 	ldr.w	r3, [r8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d038      	beq.n	80025da <_malloc_r+0xf6>
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	42a2      	cmp	r2, r4
 800256c:	d12b      	bne.n	80025c6 <_malloc_r+0xe2>
 800256e:	2200      	movs	r2, #0
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	e00f      	b.n	8002594 <_malloc_r+0xb0>
 8002574:	6822      	ldr	r2, [r4, #0]
 8002576:	1b52      	subs	r2, r2, r5
 8002578:	d41f      	bmi.n	80025ba <_malloc_r+0xd6>
 800257a:	2a0b      	cmp	r2, #11
 800257c:	d917      	bls.n	80025ae <_malloc_r+0xca>
 800257e:	1961      	adds	r1, r4, r5
 8002580:	42a3      	cmp	r3, r4
 8002582:	6025      	str	r5, [r4, #0]
 8002584:	bf18      	it	ne
 8002586:	6059      	strne	r1, [r3, #4]
 8002588:	6863      	ldr	r3, [r4, #4]
 800258a:	bf08      	it	eq
 800258c:	f8c8 1000 	streq.w	r1, [r8]
 8002590:	5162      	str	r2, [r4, r5]
 8002592:	604b      	str	r3, [r1, #4]
 8002594:	4638      	mov	r0, r7
 8002596:	f104 060b 	add.w	r6, r4, #11
 800259a:	f000 f829 	bl	80025f0 <__malloc_unlock>
 800259e:	f026 0607 	bic.w	r6, r6, #7
 80025a2:	1d23      	adds	r3, r4, #4
 80025a4:	1af2      	subs	r2, r6, r3
 80025a6:	d0ae      	beq.n	8002506 <_malloc_r+0x22>
 80025a8:	1b9b      	subs	r3, r3, r6
 80025aa:	50a3      	str	r3, [r4, r2]
 80025ac:	e7ab      	b.n	8002506 <_malloc_r+0x22>
 80025ae:	42a3      	cmp	r3, r4
 80025b0:	6862      	ldr	r2, [r4, #4]
 80025b2:	d1dd      	bne.n	8002570 <_malloc_r+0x8c>
 80025b4:	f8c8 2000 	str.w	r2, [r8]
 80025b8:	e7ec      	b.n	8002594 <_malloc_r+0xb0>
 80025ba:	4623      	mov	r3, r4
 80025bc:	6864      	ldr	r4, [r4, #4]
 80025be:	e7ac      	b.n	800251a <_malloc_r+0x36>
 80025c0:	4634      	mov	r4, r6
 80025c2:	6876      	ldr	r6, [r6, #4]
 80025c4:	e7b4      	b.n	8002530 <_malloc_r+0x4c>
 80025c6:	4613      	mov	r3, r2
 80025c8:	e7cc      	b.n	8002564 <_malloc_r+0x80>
 80025ca:	230c      	movs	r3, #12
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	4638      	mov	r0, r7
 80025d0:	f000 f80e 	bl	80025f0 <__malloc_unlock>
 80025d4:	e797      	b.n	8002506 <_malloc_r+0x22>
 80025d6:	6025      	str	r5, [r4, #0]
 80025d8:	e7dc      	b.n	8002594 <_malloc_r+0xb0>
 80025da:	605b      	str	r3, [r3, #4]
 80025dc:	deff      	udf	#255	; 0xff
 80025de:	bf00      	nop
 80025e0:	200000a4 	.word	0x200000a4

080025e4 <__malloc_lock>:
 80025e4:	4801      	ldr	r0, [pc, #4]	; (80025ec <__malloc_lock+0x8>)
 80025e6:	f000 b9d6 	b.w	8002996 <__retarget_lock_acquire_recursive>
 80025ea:	bf00      	nop
 80025ec:	200001ec 	.word	0x200001ec

080025f0 <__malloc_unlock>:
 80025f0:	4801      	ldr	r0, [pc, #4]	; (80025f8 <__malloc_unlock+0x8>)
 80025f2:	f000 b9d1 	b.w	8002998 <__retarget_lock_release_recursive>
 80025f6:	bf00      	nop
 80025f8:	200001ec 	.word	0x200001ec

080025fc <rand>:
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <rand+0x5c>)
 80025fe:	b510      	push	{r4, lr}
 8002600:	681c      	ldr	r4, [r3, #0]
 8002602:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002604:	b9b3      	cbnz	r3, 8002634 <rand+0x38>
 8002606:	2018      	movs	r0, #24
 8002608:	f7ff ff44 	bl	8002494 <malloc>
 800260c:	4602      	mov	r2, r0
 800260e:	6320      	str	r0, [r4, #48]	; 0x30
 8002610:	b920      	cbnz	r0, 800261c <rand+0x20>
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <rand+0x60>)
 8002614:	4812      	ldr	r0, [pc, #72]	; (8002660 <rand+0x64>)
 8002616:	2152      	movs	r1, #82	; 0x52
 8002618:	f000 f9c0 	bl	800299c <__assert_func>
 800261c:	4911      	ldr	r1, [pc, #68]	; (8002664 <rand+0x68>)
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <rand+0x6c>)
 8002620:	e9c0 1300 	strd	r1, r3, [r0]
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <rand+0x70>)
 8002626:	6083      	str	r3, [r0, #8]
 8002628:	230b      	movs	r3, #11
 800262a:	8183      	strh	r3, [r0, #12]
 800262c:	2100      	movs	r1, #0
 800262e:	2001      	movs	r0, #1
 8002630:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002634:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002636:	480e      	ldr	r0, [pc, #56]	; (8002670 <rand+0x74>)
 8002638:	690b      	ldr	r3, [r1, #16]
 800263a:	694c      	ldr	r4, [r1, #20]
 800263c:	4a0d      	ldr	r2, [pc, #52]	; (8002674 <rand+0x78>)
 800263e:	4358      	muls	r0, r3
 8002640:	fb02 0004 	mla	r0, r2, r4, r0
 8002644:	fba3 3202 	umull	r3, r2, r3, r2
 8002648:	3301      	adds	r3, #1
 800264a:	eb40 0002 	adc.w	r0, r0, r2
 800264e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002652:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002656:	bd10      	pop	{r4, pc}
 8002658:	20000068 	.word	0x20000068
 800265c:	080034a8 	.word	0x080034a8
 8002660:	080034bf 	.word	0x080034bf
 8002664:	abcd330e 	.word	0xabcd330e
 8002668:	e66d1234 	.word	0xe66d1234
 800266c:	0005deec 	.word	0x0005deec
 8002670:	5851f42d 	.word	0x5851f42d
 8002674:	4c957f2d 	.word	0x4c957f2d

08002678 <std>:
 8002678:	2300      	movs	r3, #0
 800267a:	b510      	push	{r4, lr}
 800267c:	4604      	mov	r4, r0
 800267e:	e9c0 3300 	strd	r3, r3, [r0]
 8002682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002686:	6083      	str	r3, [r0, #8]
 8002688:	8181      	strh	r1, [r0, #12]
 800268a:	6643      	str	r3, [r0, #100]	; 0x64
 800268c:	81c2      	strh	r2, [r0, #14]
 800268e:	6183      	str	r3, [r0, #24]
 8002690:	4619      	mov	r1, r3
 8002692:	2208      	movs	r2, #8
 8002694:	305c      	adds	r0, #92	; 0x5c
 8002696:	f000 f8f4 	bl	8002882 <memset>
 800269a:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <std+0x58>)
 800269c:	6263      	str	r3, [r4, #36]	; 0x24
 800269e:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <std+0x5c>)
 80026a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80026a2:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <std+0x60>)
 80026a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <std+0x64>)
 80026a8:	6323      	str	r3, [r4, #48]	; 0x30
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <std+0x68>)
 80026ac:	6224      	str	r4, [r4, #32]
 80026ae:	429c      	cmp	r4, r3
 80026b0:	d006      	beq.n	80026c0 <std+0x48>
 80026b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80026b6:	4294      	cmp	r4, r2
 80026b8:	d002      	beq.n	80026c0 <std+0x48>
 80026ba:	33d0      	adds	r3, #208	; 0xd0
 80026bc:	429c      	cmp	r4, r3
 80026be:	d105      	bne.n	80026cc <std+0x54>
 80026c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026c8:	f000 b964 	b.w	8002994 <__retarget_lock_init_recursive>
 80026cc:	bd10      	pop	{r4, pc}
 80026ce:	bf00      	nop
 80026d0:	080027fd 	.word	0x080027fd
 80026d4:	0800281f 	.word	0x0800281f
 80026d8:	08002857 	.word	0x08002857
 80026dc:	0800287b 	.word	0x0800287b
 80026e0:	200000ac 	.word	0x200000ac

080026e4 <stdio_exit_handler>:
 80026e4:	4a02      	ldr	r2, [pc, #8]	; (80026f0 <stdio_exit_handler+0xc>)
 80026e6:	4903      	ldr	r1, [pc, #12]	; (80026f4 <stdio_exit_handler+0x10>)
 80026e8:	4803      	ldr	r0, [pc, #12]	; (80026f8 <stdio_exit_handler+0x14>)
 80026ea:	f000 b869 	b.w	80027c0 <_fwalk_sglue>
 80026ee:	bf00      	nop
 80026f0:	20000010 	.word	0x20000010
 80026f4:	08002b7d 	.word	0x08002b7d
 80026f8:	2000001c 	.word	0x2000001c

080026fc <cleanup_stdio>:
 80026fc:	6841      	ldr	r1, [r0, #4]
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <cleanup_stdio+0x34>)
 8002700:	4299      	cmp	r1, r3
 8002702:	b510      	push	{r4, lr}
 8002704:	4604      	mov	r4, r0
 8002706:	d001      	beq.n	800270c <cleanup_stdio+0x10>
 8002708:	f000 fa38 	bl	8002b7c <_fflush_r>
 800270c:	68a1      	ldr	r1, [r4, #8]
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <cleanup_stdio+0x38>)
 8002710:	4299      	cmp	r1, r3
 8002712:	d002      	beq.n	800271a <cleanup_stdio+0x1e>
 8002714:	4620      	mov	r0, r4
 8002716:	f000 fa31 	bl	8002b7c <_fflush_r>
 800271a:	68e1      	ldr	r1, [r4, #12]
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <cleanup_stdio+0x3c>)
 800271e:	4299      	cmp	r1, r3
 8002720:	d004      	beq.n	800272c <cleanup_stdio+0x30>
 8002722:	4620      	mov	r0, r4
 8002724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002728:	f000 ba28 	b.w	8002b7c <_fflush_r>
 800272c:	bd10      	pop	{r4, pc}
 800272e:	bf00      	nop
 8002730:	200000ac 	.word	0x200000ac
 8002734:	20000114 	.word	0x20000114
 8002738:	2000017c 	.word	0x2000017c

0800273c <global_stdio_init.part.0>:
 800273c:	b510      	push	{r4, lr}
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <global_stdio_init.part.0+0x30>)
 8002740:	4c0b      	ldr	r4, [pc, #44]	; (8002770 <global_stdio_init.part.0+0x34>)
 8002742:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <global_stdio_init.part.0+0x38>)
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	4620      	mov	r0, r4
 8002748:	2200      	movs	r2, #0
 800274a:	2104      	movs	r1, #4
 800274c:	f7ff ff94 	bl	8002678 <std>
 8002750:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002754:	2201      	movs	r2, #1
 8002756:	2109      	movs	r1, #9
 8002758:	f7ff ff8e 	bl	8002678 <std>
 800275c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002760:	2202      	movs	r2, #2
 8002762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002766:	2112      	movs	r1, #18
 8002768:	f7ff bf86 	b.w	8002678 <std>
 800276c:	200001e4 	.word	0x200001e4
 8002770:	200000ac 	.word	0x200000ac
 8002774:	080026e5 	.word	0x080026e5

08002778 <__sfp_lock_acquire>:
 8002778:	4801      	ldr	r0, [pc, #4]	; (8002780 <__sfp_lock_acquire+0x8>)
 800277a:	f000 b90c 	b.w	8002996 <__retarget_lock_acquire_recursive>
 800277e:	bf00      	nop
 8002780:	200001ed 	.word	0x200001ed

08002784 <__sfp_lock_release>:
 8002784:	4801      	ldr	r0, [pc, #4]	; (800278c <__sfp_lock_release+0x8>)
 8002786:	f000 b907 	b.w	8002998 <__retarget_lock_release_recursive>
 800278a:	bf00      	nop
 800278c:	200001ed 	.word	0x200001ed

08002790 <__sinit>:
 8002790:	b510      	push	{r4, lr}
 8002792:	4604      	mov	r4, r0
 8002794:	f7ff fff0 	bl	8002778 <__sfp_lock_acquire>
 8002798:	6a23      	ldr	r3, [r4, #32]
 800279a:	b11b      	cbz	r3, 80027a4 <__sinit+0x14>
 800279c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027a0:	f7ff bff0 	b.w	8002784 <__sfp_lock_release>
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <__sinit+0x28>)
 80027a6:	6223      	str	r3, [r4, #32]
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <__sinit+0x2c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f5      	bne.n	800279c <__sinit+0xc>
 80027b0:	f7ff ffc4 	bl	800273c <global_stdio_init.part.0>
 80027b4:	e7f2      	b.n	800279c <__sinit+0xc>
 80027b6:	bf00      	nop
 80027b8:	080026fd 	.word	0x080026fd
 80027bc:	200001e4 	.word	0x200001e4

080027c0 <_fwalk_sglue>:
 80027c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027c4:	4607      	mov	r7, r0
 80027c6:	4688      	mov	r8, r1
 80027c8:	4614      	mov	r4, r2
 80027ca:	2600      	movs	r6, #0
 80027cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027d0:	f1b9 0901 	subs.w	r9, r9, #1
 80027d4:	d505      	bpl.n	80027e2 <_fwalk_sglue+0x22>
 80027d6:	6824      	ldr	r4, [r4, #0]
 80027d8:	2c00      	cmp	r4, #0
 80027da:	d1f7      	bne.n	80027cc <_fwalk_sglue+0xc>
 80027dc:	4630      	mov	r0, r6
 80027de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027e2:	89ab      	ldrh	r3, [r5, #12]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d907      	bls.n	80027f8 <_fwalk_sglue+0x38>
 80027e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80027ec:	3301      	adds	r3, #1
 80027ee:	d003      	beq.n	80027f8 <_fwalk_sglue+0x38>
 80027f0:	4629      	mov	r1, r5
 80027f2:	4638      	mov	r0, r7
 80027f4:	47c0      	blx	r8
 80027f6:	4306      	orrs	r6, r0
 80027f8:	3568      	adds	r5, #104	; 0x68
 80027fa:	e7e9      	b.n	80027d0 <_fwalk_sglue+0x10>

080027fc <__sread>:
 80027fc:	b510      	push	{r4, lr}
 80027fe:	460c      	mov	r4, r1
 8002800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002804:	f000 f868 	bl	80028d8 <_read_r>
 8002808:	2800      	cmp	r0, #0
 800280a:	bfab      	itete	ge
 800280c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800280e:	89a3      	ldrhlt	r3, [r4, #12]
 8002810:	181b      	addge	r3, r3, r0
 8002812:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002816:	bfac      	ite	ge
 8002818:	6563      	strge	r3, [r4, #84]	; 0x54
 800281a:	81a3      	strhlt	r3, [r4, #12]
 800281c:	bd10      	pop	{r4, pc}

0800281e <__swrite>:
 800281e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002822:	461f      	mov	r7, r3
 8002824:	898b      	ldrh	r3, [r1, #12]
 8002826:	05db      	lsls	r3, r3, #23
 8002828:	4605      	mov	r5, r0
 800282a:	460c      	mov	r4, r1
 800282c:	4616      	mov	r6, r2
 800282e:	d505      	bpl.n	800283c <__swrite+0x1e>
 8002830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002834:	2302      	movs	r3, #2
 8002836:	2200      	movs	r2, #0
 8002838:	f000 f83c 	bl	80028b4 <_lseek_r>
 800283c:	89a3      	ldrh	r3, [r4, #12]
 800283e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002846:	81a3      	strh	r3, [r4, #12]
 8002848:	4632      	mov	r2, r6
 800284a:	463b      	mov	r3, r7
 800284c:	4628      	mov	r0, r5
 800284e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002852:	f000 b863 	b.w	800291c <_write_r>

08002856 <__sseek>:
 8002856:	b510      	push	{r4, lr}
 8002858:	460c      	mov	r4, r1
 800285a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800285e:	f000 f829 	bl	80028b4 <_lseek_r>
 8002862:	1c43      	adds	r3, r0, #1
 8002864:	89a3      	ldrh	r3, [r4, #12]
 8002866:	bf15      	itete	ne
 8002868:	6560      	strne	r0, [r4, #84]	; 0x54
 800286a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800286e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002872:	81a3      	strheq	r3, [r4, #12]
 8002874:	bf18      	it	ne
 8002876:	81a3      	strhne	r3, [r4, #12]
 8002878:	bd10      	pop	{r4, pc}

0800287a <__sclose>:
 800287a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800287e:	f000 b809 	b.w	8002894 <_close_r>

08002882 <memset>:
 8002882:	4402      	add	r2, r0
 8002884:	4603      	mov	r3, r0
 8002886:	4293      	cmp	r3, r2
 8002888:	d100      	bne.n	800288c <memset+0xa>
 800288a:	4770      	bx	lr
 800288c:	f803 1b01 	strb.w	r1, [r3], #1
 8002890:	e7f9      	b.n	8002886 <memset+0x4>
	...

08002894 <_close_r>:
 8002894:	b538      	push	{r3, r4, r5, lr}
 8002896:	4d06      	ldr	r5, [pc, #24]	; (80028b0 <_close_r+0x1c>)
 8002898:	2300      	movs	r3, #0
 800289a:	4604      	mov	r4, r0
 800289c:	4608      	mov	r0, r1
 800289e:	602b      	str	r3, [r5, #0]
 80028a0:	f7fd ffed 	bl	800087e <_close>
 80028a4:	1c43      	adds	r3, r0, #1
 80028a6:	d102      	bne.n	80028ae <_close_r+0x1a>
 80028a8:	682b      	ldr	r3, [r5, #0]
 80028aa:	b103      	cbz	r3, 80028ae <_close_r+0x1a>
 80028ac:	6023      	str	r3, [r4, #0]
 80028ae:	bd38      	pop	{r3, r4, r5, pc}
 80028b0:	200001e8 	.word	0x200001e8

080028b4 <_lseek_r>:
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	4d07      	ldr	r5, [pc, #28]	; (80028d4 <_lseek_r+0x20>)
 80028b8:	4604      	mov	r4, r0
 80028ba:	4608      	mov	r0, r1
 80028bc:	4611      	mov	r1, r2
 80028be:	2200      	movs	r2, #0
 80028c0:	602a      	str	r2, [r5, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f7fe f802 	bl	80008cc <_lseek>
 80028c8:	1c43      	adds	r3, r0, #1
 80028ca:	d102      	bne.n	80028d2 <_lseek_r+0x1e>
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	b103      	cbz	r3, 80028d2 <_lseek_r+0x1e>
 80028d0:	6023      	str	r3, [r4, #0]
 80028d2:	bd38      	pop	{r3, r4, r5, pc}
 80028d4:	200001e8 	.word	0x200001e8

080028d8 <_read_r>:
 80028d8:	b538      	push	{r3, r4, r5, lr}
 80028da:	4d07      	ldr	r5, [pc, #28]	; (80028f8 <_read_r+0x20>)
 80028dc:	4604      	mov	r4, r0
 80028de:	4608      	mov	r0, r1
 80028e0:	4611      	mov	r1, r2
 80028e2:	2200      	movs	r2, #0
 80028e4:	602a      	str	r2, [r5, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	f7fd ff90 	bl	800080c <_read>
 80028ec:	1c43      	adds	r3, r0, #1
 80028ee:	d102      	bne.n	80028f6 <_read_r+0x1e>
 80028f0:	682b      	ldr	r3, [r5, #0]
 80028f2:	b103      	cbz	r3, 80028f6 <_read_r+0x1e>
 80028f4:	6023      	str	r3, [r4, #0]
 80028f6:	bd38      	pop	{r3, r4, r5, pc}
 80028f8:	200001e8 	.word	0x200001e8

080028fc <_sbrk_r>:
 80028fc:	b538      	push	{r3, r4, r5, lr}
 80028fe:	4d06      	ldr	r5, [pc, #24]	; (8002918 <_sbrk_r+0x1c>)
 8002900:	2300      	movs	r3, #0
 8002902:	4604      	mov	r4, r0
 8002904:	4608      	mov	r0, r1
 8002906:	602b      	str	r3, [r5, #0]
 8002908:	f7fd ffee 	bl	80008e8 <_sbrk>
 800290c:	1c43      	adds	r3, r0, #1
 800290e:	d102      	bne.n	8002916 <_sbrk_r+0x1a>
 8002910:	682b      	ldr	r3, [r5, #0]
 8002912:	b103      	cbz	r3, 8002916 <_sbrk_r+0x1a>
 8002914:	6023      	str	r3, [r4, #0]
 8002916:	bd38      	pop	{r3, r4, r5, pc}
 8002918:	200001e8 	.word	0x200001e8

0800291c <_write_r>:
 800291c:	b538      	push	{r3, r4, r5, lr}
 800291e:	4d07      	ldr	r5, [pc, #28]	; (800293c <_write_r+0x20>)
 8002920:	4604      	mov	r4, r0
 8002922:	4608      	mov	r0, r1
 8002924:	4611      	mov	r1, r2
 8002926:	2200      	movs	r2, #0
 8002928:	602a      	str	r2, [r5, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	f7fd ff8b 	bl	8000846 <_write>
 8002930:	1c43      	adds	r3, r0, #1
 8002932:	d102      	bne.n	800293a <_write_r+0x1e>
 8002934:	682b      	ldr	r3, [r5, #0]
 8002936:	b103      	cbz	r3, 800293a <_write_r+0x1e>
 8002938:	6023      	str	r3, [r4, #0]
 800293a:	bd38      	pop	{r3, r4, r5, pc}
 800293c:	200001e8 	.word	0x200001e8

08002940 <__errno>:
 8002940:	4b01      	ldr	r3, [pc, #4]	; (8002948 <__errno+0x8>)
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000068 	.word	0x20000068

0800294c <__libc_init_array>:
 800294c:	b570      	push	{r4, r5, r6, lr}
 800294e:	4d0d      	ldr	r5, [pc, #52]	; (8002984 <__libc_init_array+0x38>)
 8002950:	4c0d      	ldr	r4, [pc, #52]	; (8002988 <__libc_init_array+0x3c>)
 8002952:	1b64      	subs	r4, r4, r5
 8002954:	10a4      	asrs	r4, r4, #2
 8002956:	2600      	movs	r6, #0
 8002958:	42a6      	cmp	r6, r4
 800295a:	d109      	bne.n	8002970 <__libc_init_array+0x24>
 800295c:	4d0b      	ldr	r5, [pc, #44]	; (800298c <__libc_init_array+0x40>)
 800295e:	4c0c      	ldr	r4, [pc, #48]	; (8002990 <__libc_init_array+0x44>)
 8002960:	f000 fd7e 	bl	8003460 <_init>
 8002964:	1b64      	subs	r4, r4, r5
 8002966:	10a4      	asrs	r4, r4, #2
 8002968:	2600      	movs	r6, #0
 800296a:	42a6      	cmp	r6, r4
 800296c:	d105      	bne.n	800297a <__libc_init_array+0x2e>
 800296e:	bd70      	pop	{r4, r5, r6, pc}
 8002970:	f855 3b04 	ldr.w	r3, [r5], #4
 8002974:	4798      	blx	r3
 8002976:	3601      	adds	r6, #1
 8002978:	e7ee      	b.n	8002958 <__libc_init_array+0xc>
 800297a:	f855 3b04 	ldr.w	r3, [r5], #4
 800297e:	4798      	blx	r3
 8002980:	3601      	adds	r6, #1
 8002982:	e7f2      	b.n	800296a <__libc_init_array+0x1e>
 8002984:	08003588 	.word	0x08003588
 8002988:	08003588 	.word	0x08003588
 800298c:	08003588 	.word	0x08003588
 8002990:	0800358c 	.word	0x0800358c

08002994 <__retarget_lock_init_recursive>:
 8002994:	4770      	bx	lr

08002996 <__retarget_lock_acquire_recursive>:
 8002996:	4770      	bx	lr

08002998 <__retarget_lock_release_recursive>:
 8002998:	4770      	bx	lr
	...

0800299c <__assert_func>:
 800299c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800299e:	4614      	mov	r4, r2
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <__assert_func+0x2c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4605      	mov	r5, r0
 80029a8:	68d8      	ldr	r0, [r3, #12]
 80029aa:	b14c      	cbz	r4, 80029c0 <__assert_func+0x24>
 80029ac:	4b07      	ldr	r3, [pc, #28]	; (80029cc <__assert_func+0x30>)
 80029ae:	9100      	str	r1, [sp, #0]
 80029b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80029b4:	4906      	ldr	r1, [pc, #24]	; (80029d0 <__assert_func+0x34>)
 80029b6:	462b      	mov	r3, r5
 80029b8:	f000 f908 	bl	8002bcc <fiprintf>
 80029bc:	f000 f918 	bl	8002bf0 <abort>
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <__assert_func+0x38>)
 80029c2:	461c      	mov	r4, r3
 80029c4:	e7f3      	b.n	80029ae <__assert_func+0x12>
 80029c6:	bf00      	nop
 80029c8:	20000068 	.word	0x20000068
 80029cc:	08003517 	.word	0x08003517
 80029d0:	08003524 	.word	0x08003524
 80029d4:	08003552 	.word	0x08003552

080029d8 <_free_r>:
 80029d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029da:	2900      	cmp	r1, #0
 80029dc:	d044      	beq.n	8002a68 <_free_r+0x90>
 80029de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029e2:	9001      	str	r0, [sp, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f1a1 0404 	sub.w	r4, r1, #4
 80029ea:	bfb8      	it	lt
 80029ec:	18e4      	addlt	r4, r4, r3
 80029ee:	f7ff fdf9 	bl	80025e4 <__malloc_lock>
 80029f2:	4a1e      	ldr	r2, [pc, #120]	; (8002a6c <_free_r+0x94>)
 80029f4:	9801      	ldr	r0, [sp, #4]
 80029f6:	6813      	ldr	r3, [r2, #0]
 80029f8:	b933      	cbnz	r3, 8002a08 <_free_r+0x30>
 80029fa:	6063      	str	r3, [r4, #4]
 80029fc:	6014      	str	r4, [r2, #0]
 80029fe:	b003      	add	sp, #12
 8002a00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a04:	f7ff bdf4 	b.w	80025f0 <__malloc_unlock>
 8002a08:	42a3      	cmp	r3, r4
 8002a0a:	d908      	bls.n	8002a1e <_free_r+0x46>
 8002a0c:	6825      	ldr	r5, [r4, #0]
 8002a0e:	1961      	adds	r1, r4, r5
 8002a10:	428b      	cmp	r3, r1
 8002a12:	bf01      	itttt	eq
 8002a14:	6819      	ldreq	r1, [r3, #0]
 8002a16:	685b      	ldreq	r3, [r3, #4]
 8002a18:	1949      	addeq	r1, r1, r5
 8002a1a:	6021      	streq	r1, [r4, #0]
 8002a1c:	e7ed      	b.n	80029fa <_free_r+0x22>
 8002a1e:	461a      	mov	r2, r3
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	b10b      	cbz	r3, 8002a28 <_free_r+0x50>
 8002a24:	42a3      	cmp	r3, r4
 8002a26:	d9fa      	bls.n	8002a1e <_free_r+0x46>
 8002a28:	6811      	ldr	r1, [r2, #0]
 8002a2a:	1855      	adds	r5, r2, r1
 8002a2c:	42a5      	cmp	r5, r4
 8002a2e:	d10b      	bne.n	8002a48 <_free_r+0x70>
 8002a30:	6824      	ldr	r4, [r4, #0]
 8002a32:	4421      	add	r1, r4
 8002a34:	1854      	adds	r4, r2, r1
 8002a36:	42a3      	cmp	r3, r4
 8002a38:	6011      	str	r1, [r2, #0]
 8002a3a:	d1e0      	bne.n	80029fe <_free_r+0x26>
 8002a3c:	681c      	ldr	r4, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	6053      	str	r3, [r2, #4]
 8002a42:	440c      	add	r4, r1
 8002a44:	6014      	str	r4, [r2, #0]
 8002a46:	e7da      	b.n	80029fe <_free_r+0x26>
 8002a48:	d902      	bls.n	8002a50 <_free_r+0x78>
 8002a4a:	230c      	movs	r3, #12
 8002a4c:	6003      	str	r3, [r0, #0]
 8002a4e:	e7d6      	b.n	80029fe <_free_r+0x26>
 8002a50:	6825      	ldr	r5, [r4, #0]
 8002a52:	1961      	adds	r1, r4, r5
 8002a54:	428b      	cmp	r3, r1
 8002a56:	bf04      	itt	eq
 8002a58:	6819      	ldreq	r1, [r3, #0]
 8002a5a:	685b      	ldreq	r3, [r3, #4]
 8002a5c:	6063      	str	r3, [r4, #4]
 8002a5e:	bf04      	itt	eq
 8002a60:	1949      	addeq	r1, r1, r5
 8002a62:	6021      	streq	r1, [r4, #0]
 8002a64:	6054      	str	r4, [r2, #4]
 8002a66:	e7ca      	b.n	80029fe <_free_r+0x26>
 8002a68:	b003      	add	sp, #12
 8002a6a:	bd30      	pop	{r4, r5, pc}
 8002a6c:	200000a4 	.word	0x200000a4

08002a70 <__sflush_r>:
 8002a70:	898a      	ldrh	r2, [r1, #12]
 8002a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a76:	4605      	mov	r5, r0
 8002a78:	0710      	lsls	r0, r2, #28
 8002a7a:	460c      	mov	r4, r1
 8002a7c:	d458      	bmi.n	8002b30 <__sflush_r+0xc0>
 8002a7e:	684b      	ldr	r3, [r1, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	dc05      	bgt.n	8002a90 <__sflush_r+0x20>
 8002a84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	dc02      	bgt.n	8002a90 <__sflush_r+0x20>
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a92:	2e00      	cmp	r6, #0
 8002a94:	d0f9      	beq.n	8002a8a <__sflush_r+0x1a>
 8002a96:	2300      	movs	r3, #0
 8002a98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a9c:	682f      	ldr	r7, [r5, #0]
 8002a9e:	6a21      	ldr	r1, [r4, #32]
 8002aa0:	602b      	str	r3, [r5, #0]
 8002aa2:	d032      	beq.n	8002b0a <__sflush_r+0x9a>
 8002aa4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002aa6:	89a3      	ldrh	r3, [r4, #12]
 8002aa8:	075a      	lsls	r2, r3, #29
 8002aaa:	d505      	bpl.n	8002ab8 <__sflush_r+0x48>
 8002aac:	6863      	ldr	r3, [r4, #4]
 8002aae:	1ac0      	subs	r0, r0, r3
 8002ab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ab2:	b10b      	cbz	r3, 8002ab8 <__sflush_r+0x48>
 8002ab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ab6:	1ac0      	subs	r0, r0, r3
 8002ab8:	2300      	movs	r3, #0
 8002aba:	4602      	mov	r2, r0
 8002abc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002abe:	6a21      	ldr	r1, [r4, #32]
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	47b0      	blx	r6
 8002ac4:	1c43      	adds	r3, r0, #1
 8002ac6:	89a3      	ldrh	r3, [r4, #12]
 8002ac8:	d106      	bne.n	8002ad8 <__sflush_r+0x68>
 8002aca:	6829      	ldr	r1, [r5, #0]
 8002acc:	291d      	cmp	r1, #29
 8002ace:	d82b      	bhi.n	8002b28 <__sflush_r+0xb8>
 8002ad0:	4a29      	ldr	r2, [pc, #164]	; (8002b78 <__sflush_r+0x108>)
 8002ad2:	410a      	asrs	r2, r1
 8002ad4:	07d6      	lsls	r6, r2, #31
 8002ad6:	d427      	bmi.n	8002b28 <__sflush_r+0xb8>
 8002ad8:	2200      	movs	r2, #0
 8002ada:	6062      	str	r2, [r4, #4]
 8002adc:	04d9      	lsls	r1, r3, #19
 8002ade:	6922      	ldr	r2, [r4, #16]
 8002ae0:	6022      	str	r2, [r4, #0]
 8002ae2:	d504      	bpl.n	8002aee <__sflush_r+0x7e>
 8002ae4:	1c42      	adds	r2, r0, #1
 8002ae6:	d101      	bne.n	8002aec <__sflush_r+0x7c>
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	b903      	cbnz	r3, 8002aee <__sflush_r+0x7e>
 8002aec:	6560      	str	r0, [r4, #84]	; 0x54
 8002aee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002af0:	602f      	str	r7, [r5, #0]
 8002af2:	2900      	cmp	r1, #0
 8002af4:	d0c9      	beq.n	8002a8a <__sflush_r+0x1a>
 8002af6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002afa:	4299      	cmp	r1, r3
 8002afc:	d002      	beq.n	8002b04 <__sflush_r+0x94>
 8002afe:	4628      	mov	r0, r5
 8002b00:	f7ff ff6a 	bl	80029d8 <_free_r>
 8002b04:	2000      	movs	r0, #0
 8002b06:	6360      	str	r0, [r4, #52]	; 0x34
 8002b08:	e7c0      	b.n	8002a8c <__sflush_r+0x1c>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	47b0      	blx	r6
 8002b10:	1c41      	adds	r1, r0, #1
 8002b12:	d1c8      	bne.n	8002aa6 <__sflush_r+0x36>
 8002b14:	682b      	ldr	r3, [r5, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0c5      	beq.n	8002aa6 <__sflush_r+0x36>
 8002b1a:	2b1d      	cmp	r3, #29
 8002b1c:	d001      	beq.n	8002b22 <__sflush_r+0xb2>
 8002b1e:	2b16      	cmp	r3, #22
 8002b20:	d101      	bne.n	8002b26 <__sflush_r+0xb6>
 8002b22:	602f      	str	r7, [r5, #0]
 8002b24:	e7b1      	b.n	8002a8a <__sflush_r+0x1a>
 8002b26:	89a3      	ldrh	r3, [r4, #12]
 8002b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b2c:	81a3      	strh	r3, [r4, #12]
 8002b2e:	e7ad      	b.n	8002a8c <__sflush_r+0x1c>
 8002b30:	690f      	ldr	r7, [r1, #16]
 8002b32:	2f00      	cmp	r7, #0
 8002b34:	d0a9      	beq.n	8002a8a <__sflush_r+0x1a>
 8002b36:	0793      	lsls	r3, r2, #30
 8002b38:	680e      	ldr	r6, [r1, #0]
 8002b3a:	bf08      	it	eq
 8002b3c:	694b      	ldreq	r3, [r1, #20]
 8002b3e:	600f      	str	r7, [r1, #0]
 8002b40:	bf18      	it	ne
 8002b42:	2300      	movne	r3, #0
 8002b44:	eba6 0807 	sub.w	r8, r6, r7
 8002b48:	608b      	str	r3, [r1, #8]
 8002b4a:	f1b8 0f00 	cmp.w	r8, #0
 8002b4e:	dd9c      	ble.n	8002a8a <__sflush_r+0x1a>
 8002b50:	6a21      	ldr	r1, [r4, #32]
 8002b52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b54:	4643      	mov	r3, r8
 8002b56:	463a      	mov	r2, r7
 8002b58:	4628      	mov	r0, r5
 8002b5a:	47b0      	blx	r6
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	dc06      	bgt.n	8002b6e <__sflush_r+0xfe>
 8002b60:	89a3      	ldrh	r3, [r4, #12]
 8002b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b66:	81a3      	strh	r3, [r4, #12]
 8002b68:	f04f 30ff 	mov.w	r0, #4294967295
 8002b6c:	e78e      	b.n	8002a8c <__sflush_r+0x1c>
 8002b6e:	4407      	add	r7, r0
 8002b70:	eba8 0800 	sub.w	r8, r8, r0
 8002b74:	e7e9      	b.n	8002b4a <__sflush_r+0xda>
 8002b76:	bf00      	nop
 8002b78:	dfbffffe 	.word	0xdfbffffe

08002b7c <_fflush_r>:
 8002b7c:	b538      	push	{r3, r4, r5, lr}
 8002b7e:	690b      	ldr	r3, [r1, #16]
 8002b80:	4605      	mov	r5, r0
 8002b82:	460c      	mov	r4, r1
 8002b84:	b913      	cbnz	r3, 8002b8c <_fflush_r+0x10>
 8002b86:	2500      	movs	r5, #0
 8002b88:	4628      	mov	r0, r5
 8002b8a:	bd38      	pop	{r3, r4, r5, pc}
 8002b8c:	b118      	cbz	r0, 8002b96 <_fflush_r+0x1a>
 8002b8e:	6a03      	ldr	r3, [r0, #32]
 8002b90:	b90b      	cbnz	r3, 8002b96 <_fflush_r+0x1a>
 8002b92:	f7ff fdfd 	bl	8002790 <__sinit>
 8002b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f3      	beq.n	8002b86 <_fflush_r+0xa>
 8002b9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ba0:	07d0      	lsls	r0, r2, #31
 8002ba2:	d404      	bmi.n	8002bae <_fflush_r+0x32>
 8002ba4:	0599      	lsls	r1, r3, #22
 8002ba6:	d402      	bmi.n	8002bae <_fflush_r+0x32>
 8002ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002baa:	f7ff fef4 	bl	8002996 <__retarget_lock_acquire_recursive>
 8002bae:	4628      	mov	r0, r5
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	f7ff ff5d 	bl	8002a70 <__sflush_r>
 8002bb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bb8:	07da      	lsls	r2, r3, #31
 8002bba:	4605      	mov	r5, r0
 8002bbc:	d4e4      	bmi.n	8002b88 <_fflush_r+0xc>
 8002bbe:	89a3      	ldrh	r3, [r4, #12]
 8002bc0:	059b      	lsls	r3, r3, #22
 8002bc2:	d4e1      	bmi.n	8002b88 <_fflush_r+0xc>
 8002bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bc6:	f7ff fee7 	bl	8002998 <__retarget_lock_release_recursive>
 8002bca:	e7dd      	b.n	8002b88 <_fflush_r+0xc>

08002bcc <fiprintf>:
 8002bcc:	b40e      	push	{r1, r2, r3}
 8002bce:	b503      	push	{r0, r1, lr}
 8002bd0:	4601      	mov	r1, r0
 8002bd2:	ab03      	add	r3, sp, #12
 8002bd4:	4805      	ldr	r0, [pc, #20]	; (8002bec <fiprintf+0x20>)
 8002bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bda:	6800      	ldr	r0, [r0, #0]
 8002bdc:	9301      	str	r3, [sp, #4]
 8002bde:	f000 f837 	bl	8002c50 <_vfiprintf_r>
 8002be2:	b002      	add	sp, #8
 8002be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002be8:	b003      	add	sp, #12
 8002bea:	4770      	bx	lr
 8002bec:	20000068 	.word	0x20000068

08002bf0 <abort>:
 8002bf0:	b508      	push	{r3, lr}
 8002bf2:	2006      	movs	r0, #6
 8002bf4:	f000 fb94 	bl	8003320 <raise>
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f7fd fdfd 	bl	80007f8 <_exit>

08002bfe <__sfputc_r>:
 8002bfe:	6893      	ldr	r3, [r2, #8]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	b410      	push	{r4}
 8002c06:	6093      	str	r3, [r2, #8]
 8002c08:	da08      	bge.n	8002c1c <__sfputc_r+0x1e>
 8002c0a:	6994      	ldr	r4, [r2, #24]
 8002c0c:	42a3      	cmp	r3, r4
 8002c0e:	db01      	blt.n	8002c14 <__sfputc_r+0x16>
 8002c10:	290a      	cmp	r1, #10
 8002c12:	d103      	bne.n	8002c1c <__sfputc_r+0x1e>
 8002c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c18:	f000 bac4 	b.w	80031a4 <__swbuf_r>
 8002c1c:	6813      	ldr	r3, [r2, #0]
 8002c1e:	1c58      	adds	r0, r3, #1
 8002c20:	6010      	str	r0, [r2, #0]
 8002c22:	7019      	strb	r1, [r3, #0]
 8002c24:	4608      	mov	r0, r1
 8002c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <__sfputs_r>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	4606      	mov	r6, r0
 8002c30:	460f      	mov	r7, r1
 8002c32:	4614      	mov	r4, r2
 8002c34:	18d5      	adds	r5, r2, r3
 8002c36:	42ac      	cmp	r4, r5
 8002c38:	d101      	bne.n	8002c3e <__sfputs_r+0x12>
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	e007      	b.n	8002c4e <__sfputs_r+0x22>
 8002c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c42:	463a      	mov	r2, r7
 8002c44:	4630      	mov	r0, r6
 8002c46:	f7ff ffda 	bl	8002bfe <__sfputc_r>
 8002c4a:	1c43      	adds	r3, r0, #1
 8002c4c:	d1f3      	bne.n	8002c36 <__sfputs_r+0xa>
 8002c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c50 <_vfiprintf_r>:
 8002c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c54:	460d      	mov	r5, r1
 8002c56:	b09d      	sub	sp, #116	; 0x74
 8002c58:	4614      	mov	r4, r2
 8002c5a:	4698      	mov	r8, r3
 8002c5c:	4606      	mov	r6, r0
 8002c5e:	b118      	cbz	r0, 8002c68 <_vfiprintf_r+0x18>
 8002c60:	6a03      	ldr	r3, [r0, #32]
 8002c62:	b90b      	cbnz	r3, 8002c68 <_vfiprintf_r+0x18>
 8002c64:	f7ff fd94 	bl	8002790 <__sinit>
 8002c68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c6a:	07d9      	lsls	r1, r3, #31
 8002c6c:	d405      	bmi.n	8002c7a <_vfiprintf_r+0x2a>
 8002c6e:	89ab      	ldrh	r3, [r5, #12]
 8002c70:	059a      	lsls	r2, r3, #22
 8002c72:	d402      	bmi.n	8002c7a <_vfiprintf_r+0x2a>
 8002c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c76:	f7ff fe8e 	bl	8002996 <__retarget_lock_acquire_recursive>
 8002c7a:	89ab      	ldrh	r3, [r5, #12]
 8002c7c:	071b      	lsls	r3, r3, #28
 8002c7e:	d501      	bpl.n	8002c84 <_vfiprintf_r+0x34>
 8002c80:	692b      	ldr	r3, [r5, #16]
 8002c82:	b99b      	cbnz	r3, 8002cac <_vfiprintf_r+0x5c>
 8002c84:	4629      	mov	r1, r5
 8002c86:	4630      	mov	r0, r6
 8002c88:	f000 faca 	bl	8003220 <__swsetup_r>
 8002c8c:	b170      	cbz	r0, 8002cac <_vfiprintf_r+0x5c>
 8002c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c90:	07dc      	lsls	r4, r3, #31
 8002c92:	d504      	bpl.n	8002c9e <_vfiprintf_r+0x4e>
 8002c94:	f04f 30ff 	mov.w	r0, #4294967295
 8002c98:	b01d      	add	sp, #116	; 0x74
 8002c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c9e:	89ab      	ldrh	r3, [r5, #12]
 8002ca0:	0598      	lsls	r0, r3, #22
 8002ca2:	d4f7      	bmi.n	8002c94 <_vfiprintf_r+0x44>
 8002ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ca6:	f7ff fe77 	bl	8002998 <__retarget_lock_release_recursive>
 8002caa:	e7f3      	b.n	8002c94 <_vfiprintf_r+0x44>
 8002cac:	2300      	movs	r3, #0
 8002cae:	9309      	str	r3, [sp, #36]	; 0x24
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cba:	2330      	movs	r3, #48	; 0x30
 8002cbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002e70 <_vfiprintf_r+0x220>
 8002cc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cc4:	f04f 0901 	mov.w	r9, #1
 8002cc8:	4623      	mov	r3, r4
 8002cca:	469a      	mov	sl, r3
 8002ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cd0:	b10a      	cbz	r2, 8002cd6 <_vfiprintf_r+0x86>
 8002cd2:	2a25      	cmp	r2, #37	; 0x25
 8002cd4:	d1f9      	bne.n	8002cca <_vfiprintf_r+0x7a>
 8002cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8002cda:	d00b      	beq.n	8002cf4 <_vfiprintf_r+0xa4>
 8002cdc:	465b      	mov	r3, fp
 8002cde:	4622      	mov	r2, r4
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	4630      	mov	r0, r6
 8002ce4:	f7ff ffa2 	bl	8002c2c <__sfputs_r>
 8002ce8:	3001      	adds	r0, #1
 8002cea:	f000 80a9 	beq.w	8002e40 <_vfiprintf_r+0x1f0>
 8002cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cf0:	445a      	add	r2, fp
 8002cf2:	9209      	str	r2, [sp, #36]	; 0x24
 8002cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80a1 	beq.w	8002e40 <_vfiprintf_r+0x1f0>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f04f 32ff 	mov.w	r2, #4294967295
 8002d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d08:	f10a 0a01 	add.w	sl, sl, #1
 8002d0c:	9304      	str	r3, [sp, #16]
 8002d0e:	9307      	str	r3, [sp, #28]
 8002d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d14:	931a      	str	r3, [sp, #104]	; 0x68
 8002d16:	4654      	mov	r4, sl
 8002d18:	2205      	movs	r2, #5
 8002d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d1e:	4854      	ldr	r0, [pc, #336]	; (8002e70 <_vfiprintf_r+0x220>)
 8002d20:	f7fd fa5e 	bl	80001e0 <memchr>
 8002d24:	9a04      	ldr	r2, [sp, #16]
 8002d26:	b9d8      	cbnz	r0, 8002d60 <_vfiprintf_r+0x110>
 8002d28:	06d1      	lsls	r1, r2, #27
 8002d2a:	bf44      	itt	mi
 8002d2c:	2320      	movmi	r3, #32
 8002d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d32:	0713      	lsls	r3, r2, #28
 8002d34:	bf44      	itt	mi
 8002d36:	232b      	movmi	r3, #43	; 0x2b
 8002d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d40:	2b2a      	cmp	r3, #42	; 0x2a
 8002d42:	d015      	beq.n	8002d70 <_vfiprintf_r+0x120>
 8002d44:	9a07      	ldr	r2, [sp, #28]
 8002d46:	4654      	mov	r4, sl
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f04f 0c0a 	mov.w	ip, #10
 8002d4e:	4621      	mov	r1, r4
 8002d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d54:	3b30      	subs	r3, #48	; 0x30
 8002d56:	2b09      	cmp	r3, #9
 8002d58:	d94d      	bls.n	8002df6 <_vfiprintf_r+0x1a6>
 8002d5a:	b1b0      	cbz	r0, 8002d8a <_vfiprintf_r+0x13a>
 8002d5c:	9207      	str	r2, [sp, #28]
 8002d5e:	e014      	b.n	8002d8a <_vfiprintf_r+0x13a>
 8002d60:	eba0 0308 	sub.w	r3, r0, r8
 8002d64:	fa09 f303 	lsl.w	r3, r9, r3
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	9304      	str	r3, [sp, #16]
 8002d6c:	46a2      	mov	sl, r4
 8002d6e:	e7d2      	b.n	8002d16 <_vfiprintf_r+0xc6>
 8002d70:	9b03      	ldr	r3, [sp, #12]
 8002d72:	1d19      	adds	r1, r3, #4
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	9103      	str	r1, [sp, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bfbb      	ittet	lt
 8002d7c:	425b      	neglt	r3, r3
 8002d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8002d82:	9307      	strge	r3, [sp, #28]
 8002d84:	9307      	strlt	r3, [sp, #28]
 8002d86:	bfb8      	it	lt
 8002d88:	9204      	strlt	r2, [sp, #16]
 8002d8a:	7823      	ldrb	r3, [r4, #0]
 8002d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8002d8e:	d10c      	bne.n	8002daa <_vfiprintf_r+0x15a>
 8002d90:	7863      	ldrb	r3, [r4, #1]
 8002d92:	2b2a      	cmp	r3, #42	; 0x2a
 8002d94:	d134      	bne.n	8002e00 <_vfiprintf_r+0x1b0>
 8002d96:	9b03      	ldr	r3, [sp, #12]
 8002d98:	1d1a      	adds	r2, r3, #4
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	9203      	str	r2, [sp, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	bfb8      	it	lt
 8002da2:	f04f 33ff 	movlt.w	r3, #4294967295
 8002da6:	3402      	adds	r4, #2
 8002da8:	9305      	str	r3, [sp, #20]
 8002daa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002e80 <_vfiprintf_r+0x230>
 8002dae:	7821      	ldrb	r1, [r4, #0]
 8002db0:	2203      	movs	r2, #3
 8002db2:	4650      	mov	r0, sl
 8002db4:	f7fd fa14 	bl	80001e0 <memchr>
 8002db8:	b138      	cbz	r0, 8002dca <_vfiprintf_r+0x17a>
 8002dba:	9b04      	ldr	r3, [sp, #16]
 8002dbc:	eba0 000a 	sub.w	r0, r0, sl
 8002dc0:	2240      	movs	r2, #64	; 0x40
 8002dc2:	4082      	lsls	r2, r0
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	3401      	adds	r4, #1
 8002dc8:	9304      	str	r3, [sp, #16]
 8002dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dce:	4829      	ldr	r0, [pc, #164]	; (8002e74 <_vfiprintf_r+0x224>)
 8002dd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dd4:	2206      	movs	r2, #6
 8002dd6:	f7fd fa03 	bl	80001e0 <memchr>
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	d03f      	beq.n	8002e5e <_vfiprintf_r+0x20e>
 8002dde:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <_vfiprintf_r+0x228>)
 8002de0:	bb1b      	cbnz	r3, 8002e2a <_vfiprintf_r+0x1da>
 8002de2:	9b03      	ldr	r3, [sp, #12]
 8002de4:	3307      	adds	r3, #7
 8002de6:	f023 0307 	bic.w	r3, r3, #7
 8002dea:	3308      	adds	r3, #8
 8002dec:	9303      	str	r3, [sp, #12]
 8002dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002df0:	443b      	add	r3, r7
 8002df2:	9309      	str	r3, [sp, #36]	; 0x24
 8002df4:	e768      	b.n	8002cc8 <_vfiprintf_r+0x78>
 8002df6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dfa:	460c      	mov	r4, r1
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	e7a6      	b.n	8002d4e <_vfiprintf_r+0xfe>
 8002e00:	2300      	movs	r3, #0
 8002e02:	3401      	adds	r4, #1
 8002e04:	9305      	str	r3, [sp, #20]
 8002e06:	4619      	mov	r1, r3
 8002e08:	f04f 0c0a 	mov.w	ip, #10
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e12:	3a30      	subs	r2, #48	; 0x30
 8002e14:	2a09      	cmp	r2, #9
 8002e16:	d903      	bls.n	8002e20 <_vfiprintf_r+0x1d0>
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0c6      	beq.n	8002daa <_vfiprintf_r+0x15a>
 8002e1c:	9105      	str	r1, [sp, #20]
 8002e1e:	e7c4      	b.n	8002daa <_vfiprintf_r+0x15a>
 8002e20:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e24:	4604      	mov	r4, r0
 8002e26:	2301      	movs	r3, #1
 8002e28:	e7f0      	b.n	8002e0c <_vfiprintf_r+0x1bc>
 8002e2a:	ab03      	add	r3, sp, #12
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	462a      	mov	r2, r5
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <_vfiprintf_r+0x22c>)
 8002e32:	a904      	add	r1, sp, #16
 8002e34:	4630      	mov	r0, r6
 8002e36:	f3af 8000 	nop.w
 8002e3a:	4607      	mov	r7, r0
 8002e3c:	1c78      	adds	r0, r7, #1
 8002e3e:	d1d6      	bne.n	8002dee <_vfiprintf_r+0x19e>
 8002e40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e42:	07d9      	lsls	r1, r3, #31
 8002e44:	d405      	bmi.n	8002e52 <_vfiprintf_r+0x202>
 8002e46:	89ab      	ldrh	r3, [r5, #12]
 8002e48:	059a      	lsls	r2, r3, #22
 8002e4a:	d402      	bmi.n	8002e52 <_vfiprintf_r+0x202>
 8002e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e4e:	f7ff fda3 	bl	8002998 <__retarget_lock_release_recursive>
 8002e52:	89ab      	ldrh	r3, [r5, #12]
 8002e54:	065b      	lsls	r3, r3, #25
 8002e56:	f53f af1d 	bmi.w	8002c94 <_vfiprintf_r+0x44>
 8002e5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e5c:	e71c      	b.n	8002c98 <_vfiprintf_r+0x48>
 8002e5e:	ab03      	add	r3, sp, #12
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	462a      	mov	r2, r5
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <_vfiprintf_r+0x22c>)
 8002e66:	a904      	add	r1, sp, #16
 8002e68:	4630      	mov	r0, r6
 8002e6a:	f000 f879 	bl	8002f60 <_printf_i>
 8002e6e:	e7e4      	b.n	8002e3a <_vfiprintf_r+0x1ea>
 8002e70:	08003553 	.word	0x08003553
 8002e74:	0800355d 	.word	0x0800355d
 8002e78:	00000000 	.word	0x00000000
 8002e7c:	08002c2d 	.word	0x08002c2d
 8002e80:	08003559 	.word	0x08003559

08002e84 <_printf_common>:
 8002e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e88:	4616      	mov	r6, r2
 8002e8a:	4699      	mov	r9, r3
 8002e8c:	688a      	ldr	r2, [r1, #8]
 8002e8e:	690b      	ldr	r3, [r1, #16]
 8002e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e94:	4293      	cmp	r3, r2
 8002e96:	bfb8      	it	lt
 8002e98:	4613      	movlt	r3, r2
 8002e9a:	6033      	str	r3, [r6, #0]
 8002e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ea0:	4607      	mov	r7, r0
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	b10a      	cbz	r2, 8002eaa <_printf_common+0x26>
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	6033      	str	r3, [r6, #0]
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	0699      	lsls	r1, r3, #26
 8002eae:	bf42      	ittt	mi
 8002eb0:	6833      	ldrmi	r3, [r6, #0]
 8002eb2:	3302      	addmi	r3, #2
 8002eb4:	6033      	strmi	r3, [r6, #0]
 8002eb6:	6825      	ldr	r5, [r4, #0]
 8002eb8:	f015 0506 	ands.w	r5, r5, #6
 8002ebc:	d106      	bne.n	8002ecc <_printf_common+0x48>
 8002ebe:	f104 0a19 	add.w	sl, r4, #25
 8002ec2:	68e3      	ldr	r3, [r4, #12]
 8002ec4:	6832      	ldr	r2, [r6, #0]
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	42ab      	cmp	r3, r5
 8002eca:	dc26      	bgt.n	8002f1a <_printf_common+0x96>
 8002ecc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ed0:	1e13      	subs	r3, r2, #0
 8002ed2:	6822      	ldr	r2, [r4, #0]
 8002ed4:	bf18      	it	ne
 8002ed6:	2301      	movne	r3, #1
 8002ed8:	0692      	lsls	r2, r2, #26
 8002eda:	d42b      	bmi.n	8002f34 <_printf_common+0xb0>
 8002edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ee0:	4649      	mov	r1, r9
 8002ee2:	4638      	mov	r0, r7
 8002ee4:	47c0      	blx	r8
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	d01e      	beq.n	8002f28 <_printf_common+0xa4>
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	6922      	ldr	r2, [r4, #16]
 8002eee:	f003 0306 	and.w	r3, r3, #6
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	bf02      	ittt	eq
 8002ef6:	68e5      	ldreq	r5, [r4, #12]
 8002ef8:	6833      	ldreq	r3, [r6, #0]
 8002efa:	1aed      	subeq	r5, r5, r3
 8002efc:	68a3      	ldr	r3, [r4, #8]
 8002efe:	bf0c      	ite	eq
 8002f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f04:	2500      	movne	r5, #0
 8002f06:	4293      	cmp	r3, r2
 8002f08:	bfc4      	itt	gt
 8002f0a:	1a9b      	subgt	r3, r3, r2
 8002f0c:	18ed      	addgt	r5, r5, r3
 8002f0e:	2600      	movs	r6, #0
 8002f10:	341a      	adds	r4, #26
 8002f12:	42b5      	cmp	r5, r6
 8002f14:	d11a      	bne.n	8002f4c <_printf_common+0xc8>
 8002f16:	2000      	movs	r0, #0
 8002f18:	e008      	b.n	8002f2c <_printf_common+0xa8>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	4652      	mov	r2, sl
 8002f1e:	4649      	mov	r1, r9
 8002f20:	4638      	mov	r0, r7
 8002f22:	47c0      	blx	r8
 8002f24:	3001      	adds	r0, #1
 8002f26:	d103      	bne.n	8002f30 <_printf_common+0xac>
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f30:	3501      	adds	r5, #1
 8002f32:	e7c6      	b.n	8002ec2 <_printf_common+0x3e>
 8002f34:	18e1      	adds	r1, r4, r3
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	2030      	movs	r0, #48	; 0x30
 8002f3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f3e:	4422      	add	r2, r4
 8002f40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f48:	3302      	adds	r3, #2
 8002f4a:	e7c7      	b.n	8002edc <_printf_common+0x58>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	4622      	mov	r2, r4
 8002f50:	4649      	mov	r1, r9
 8002f52:	4638      	mov	r0, r7
 8002f54:	47c0      	blx	r8
 8002f56:	3001      	adds	r0, #1
 8002f58:	d0e6      	beq.n	8002f28 <_printf_common+0xa4>
 8002f5a:	3601      	adds	r6, #1
 8002f5c:	e7d9      	b.n	8002f12 <_printf_common+0x8e>
	...

08002f60 <_printf_i>:
 8002f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f64:	7e0f      	ldrb	r7, [r1, #24]
 8002f66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f68:	2f78      	cmp	r7, #120	; 0x78
 8002f6a:	4691      	mov	r9, r2
 8002f6c:	4680      	mov	r8, r0
 8002f6e:	460c      	mov	r4, r1
 8002f70:	469a      	mov	sl, r3
 8002f72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f76:	d807      	bhi.n	8002f88 <_printf_i+0x28>
 8002f78:	2f62      	cmp	r7, #98	; 0x62
 8002f7a:	d80a      	bhi.n	8002f92 <_printf_i+0x32>
 8002f7c:	2f00      	cmp	r7, #0
 8002f7e:	f000 80d4 	beq.w	800312a <_printf_i+0x1ca>
 8002f82:	2f58      	cmp	r7, #88	; 0x58
 8002f84:	f000 80c0 	beq.w	8003108 <_printf_i+0x1a8>
 8002f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f90:	e03a      	b.n	8003008 <_printf_i+0xa8>
 8002f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f96:	2b15      	cmp	r3, #21
 8002f98:	d8f6      	bhi.n	8002f88 <_printf_i+0x28>
 8002f9a:	a101      	add	r1, pc, #4	; (adr r1, 8002fa0 <_printf_i+0x40>)
 8002f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fa0:	08002ff9 	.word	0x08002ff9
 8002fa4:	0800300d 	.word	0x0800300d
 8002fa8:	08002f89 	.word	0x08002f89
 8002fac:	08002f89 	.word	0x08002f89
 8002fb0:	08002f89 	.word	0x08002f89
 8002fb4:	08002f89 	.word	0x08002f89
 8002fb8:	0800300d 	.word	0x0800300d
 8002fbc:	08002f89 	.word	0x08002f89
 8002fc0:	08002f89 	.word	0x08002f89
 8002fc4:	08002f89 	.word	0x08002f89
 8002fc8:	08002f89 	.word	0x08002f89
 8002fcc:	08003111 	.word	0x08003111
 8002fd0:	08003039 	.word	0x08003039
 8002fd4:	080030cb 	.word	0x080030cb
 8002fd8:	08002f89 	.word	0x08002f89
 8002fdc:	08002f89 	.word	0x08002f89
 8002fe0:	08003133 	.word	0x08003133
 8002fe4:	08002f89 	.word	0x08002f89
 8002fe8:	08003039 	.word	0x08003039
 8002fec:	08002f89 	.word	0x08002f89
 8002ff0:	08002f89 	.word	0x08002f89
 8002ff4:	080030d3 	.word	0x080030d3
 8002ff8:	682b      	ldr	r3, [r5, #0]
 8002ffa:	1d1a      	adds	r2, r3, #4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	602a      	str	r2, [r5, #0]
 8003000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003008:	2301      	movs	r3, #1
 800300a:	e09f      	b.n	800314c <_printf_i+0x1ec>
 800300c:	6820      	ldr	r0, [r4, #0]
 800300e:	682b      	ldr	r3, [r5, #0]
 8003010:	0607      	lsls	r7, r0, #24
 8003012:	f103 0104 	add.w	r1, r3, #4
 8003016:	6029      	str	r1, [r5, #0]
 8003018:	d501      	bpl.n	800301e <_printf_i+0xbe>
 800301a:	681e      	ldr	r6, [r3, #0]
 800301c:	e003      	b.n	8003026 <_printf_i+0xc6>
 800301e:	0646      	lsls	r6, r0, #25
 8003020:	d5fb      	bpl.n	800301a <_printf_i+0xba>
 8003022:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003026:	2e00      	cmp	r6, #0
 8003028:	da03      	bge.n	8003032 <_printf_i+0xd2>
 800302a:	232d      	movs	r3, #45	; 0x2d
 800302c:	4276      	negs	r6, r6
 800302e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003032:	485a      	ldr	r0, [pc, #360]	; (800319c <_printf_i+0x23c>)
 8003034:	230a      	movs	r3, #10
 8003036:	e012      	b.n	800305e <_printf_i+0xfe>
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	6820      	ldr	r0, [r4, #0]
 800303c:	1d19      	adds	r1, r3, #4
 800303e:	6029      	str	r1, [r5, #0]
 8003040:	0605      	lsls	r5, r0, #24
 8003042:	d501      	bpl.n	8003048 <_printf_i+0xe8>
 8003044:	681e      	ldr	r6, [r3, #0]
 8003046:	e002      	b.n	800304e <_printf_i+0xee>
 8003048:	0641      	lsls	r1, r0, #25
 800304a:	d5fb      	bpl.n	8003044 <_printf_i+0xe4>
 800304c:	881e      	ldrh	r6, [r3, #0]
 800304e:	4853      	ldr	r0, [pc, #332]	; (800319c <_printf_i+0x23c>)
 8003050:	2f6f      	cmp	r7, #111	; 0x6f
 8003052:	bf0c      	ite	eq
 8003054:	2308      	moveq	r3, #8
 8003056:	230a      	movne	r3, #10
 8003058:	2100      	movs	r1, #0
 800305a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800305e:	6865      	ldr	r5, [r4, #4]
 8003060:	60a5      	str	r5, [r4, #8]
 8003062:	2d00      	cmp	r5, #0
 8003064:	bfa2      	ittt	ge
 8003066:	6821      	ldrge	r1, [r4, #0]
 8003068:	f021 0104 	bicge.w	r1, r1, #4
 800306c:	6021      	strge	r1, [r4, #0]
 800306e:	b90e      	cbnz	r6, 8003074 <_printf_i+0x114>
 8003070:	2d00      	cmp	r5, #0
 8003072:	d04b      	beq.n	800310c <_printf_i+0x1ac>
 8003074:	4615      	mov	r5, r2
 8003076:	fbb6 f1f3 	udiv	r1, r6, r3
 800307a:	fb03 6711 	mls	r7, r3, r1, r6
 800307e:	5dc7      	ldrb	r7, [r0, r7]
 8003080:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003084:	4637      	mov	r7, r6
 8003086:	42bb      	cmp	r3, r7
 8003088:	460e      	mov	r6, r1
 800308a:	d9f4      	bls.n	8003076 <_printf_i+0x116>
 800308c:	2b08      	cmp	r3, #8
 800308e:	d10b      	bne.n	80030a8 <_printf_i+0x148>
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	07de      	lsls	r6, r3, #31
 8003094:	d508      	bpl.n	80030a8 <_printf_i+0x148>
 8003096:	6923      	ldr	r3, [r4, #16]
 8003098:	6861      	ldr	r1, [r4, #4]
 800309a:	4299      	cmp	r1, r3
 800309c:	bfde      	ittt	le
 800309e:	2330      	movle	r3, #48	; 0x30
 80030a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030a8:	1b52      	subs	r2, r2, r5
 80030aa:	6122      	str	r2, [r4, #16]
 80030ac:	f8cd a000 	str.w	sl, [sp]
 80030b0:	464b      	mov	r3, r9
 80030b2:	aa03      	add	r2, sp, #12
 80030b4:	4621      	mov	r1, r4
 80030b6:	4640      	mov	r0, r8
 80030b8:	f7ff fee4 	bl	8002e84 <_printf_common>
 80030bc:	3001      	adds	r0, #1
 80030be:	d14a      	bne.n	8003156 <_printf_i+0x1f6>
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295
 80030c4:	b004      	add	sp, #16
 80030c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	f043 0320 	orr.w	r3, r3, #32
 80030d0:	6023      	str	r3, [r4, #0]
 80030d2:	4833      	ldr	r0, [pc, #204]	; (80031a0 <_printf_i+0x240>)
 80030d4:	2778      	movs	r7, #120	; 0x78
 80030d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	6829      	ldr	r1, [r5, #0]
 80030de:	061f      	lsls	r7, r3, #24
 80030e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80030e4:	d402      	bmi.n	80030ec <_printf_i+0x18c>
 80030e6:	065f      	lsls	r7, r3, #25
 80030e8:	bf48      	it	mi
 80030ea:	b2b6      	uxthmi	r6, r6
 80030ec:	07df      	lsls	r7, r3, #31
 80030ee:	bf48      	it	mi
 80030f0:	f043 0320 	orrmi.w	r3, r3, #32
 80030f4:	6029      	str	r1, [r5, #0]
 80030f6:	bf48      	it	mi
 80030f8:	6023      	strmi	r3, [r4, #0]
 80030fa:	b91e      	cbnz	r6, 8003104 <_printf_i+0x1a4>
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	f023 0320 	bic.w	r3, r3, #32
 8003102:	6023      	str	r3, [r4, #0]
 8003104:	2310      	movs	r3, #16
 8003106:	e7a7      	b.n	8003058 <_printf_i+0xf8>
 8003108:	4824      	ldr	r0, [pc, #144]	; (800319c <_printf_i+0x23c>)
 800310a:	e7e4      	b.n	80030d6 <_printf_i+0x176>
 800310c:	4615      	mov	r5, r2
 800310e:	e7bd      	b.n	800308c <_printf_i+0x12c>
 8003110:	682b      	ldr	r3, [r5, #0]
 8003112:	6826      	ldr	r6, [r4, #0]
 8003114:	6961      	ldr	r1, [r4, #20]
 8003116:	1d18      	adds	r0, r3, #4
 8003118:	6028      	str	r0, [r5, #0]
 800311a:	0635      	lsls	r5, r6, #24
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	d501      	bpl.n	8003124 <_printf_i+0x1c4>
 8003120:	6019      	str	r1, [r3, #0]
 8003122:	e002      	b.n	800312a <_printf_i+0x1ca>
 8003124:	0670      	lsls	r0, r6, #25
 8003126:	d5fb      	bpl.n	8003120 <_printf_i+0x1c0>
 8003128:	8019      	strh	r1, [r3, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	6123      	str	r3, [r4, #16]
 800312e:	4615      	mov	r5, r2
 8003130:	e7bc      	b.n	80030ac <_printf_i+0x14c>
 8003132:	682b      	ldr	r3, [r5, #0]
 8003134:	1d1a      	adds	r2, r3, #4
 8003136:	602a      	str	r2, [r5, #0]
 8003138:	681d      	ldr	r5, [r3, #0]
 800313a:	6862      	ldr	r2, [r4, #4]
 800313c:	2100      	movs	r1, #0
 800313e:	4628      	mov	r0, r5
 8003140:	f7fd f84e 	bl	80001e0 <memchr>
 8003144:	b108      	cbz	r0, 800314a <_printf_i+0x1ea>
 8003146:	1b40      	subs	r0, r0, r5
 8003148:	6060      	str	r0, [r4, #4]
 800314a:	6863      	ldr	r3, [r4, #4]
 800314c:	6123      	str	r3, [r4, #16]
 800314e:	2300      	movs	r3, #0
 8003150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003154:	e7aa      	b.n	80030ac <_printf_i+0x14c>
 8003156:	6923      	ldr	r3, [r4, #16]
 8003158:	462a      	mov	r2, r5
 800315a:	4649      	mov	r1, r9
 800315c:	4640      	mov	r0, r8
 800315e:	47d0      	blx	sl
 8003160:	3001      	adds	r0, #1
 8003162:	d0ad      	beq.n	80030c0 <_printf_i+0x160>
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	079b      	lsls	r3, r3, #30
 8003168:	d413      	bmi.n	8003192 <_printf_i+0x232>
 800316a:	68e0      	ldr	r0, [r4, #12]
 800316c:	9b03      	ldr	r3, [sp, #12]
 800316e:	4298      	cmp	r0, r3
 8003170:	bfb8      	it	lt
 8003172:	4618      	movlt	r0, r3
 8003174:	e7a6      	b.n	80030c4 <_printf_i+0x164>
 8003176:	2301      	movs	r3, #1
 8003178:	4632      	mov	r2, r6
 800317a:	4649      	mov	r1, r9
 800317c:	4640      	mov	r0, r8
 800317e:	47d0      	blx	sl
 8003180:	3001      	adds	r0, #1
 8003182:	d09d      	beq.n	80030c0 <_printf_i+0x160>
 8003184:	3501      	adds	r5, #1
 8003186:	68e3      	ldr	r3, [r4, #12]
 8003188:	9903      	ldr	r1, [sp, #12]
 800318a:	1a5b      	subs	r3, r3, r1
 800318c:	42ab      	cmp	r3, r5
 800318e:	dcf2      	bgt.n	8003176 <_printf_i+0x216>
 8003190:	e7eb      	b.n	800316a <_printf_i+0x20a>
 8003192:	2500      	movs	r5, #0
 8003194:	f104 0619 	add.w	r6, r4, #25
 8003198:	e7f5      	b.n	8003186 <_printf_i+0x226>
 800319a:	bf00      	nop
 800319c:	08003564 	.word	0x08003564
 80031a0:	08003575 	.word	0x08003575

080031a4 <__swbuf_r>:
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a6:	460e      	mov	r6, r1
 80031a8:	4614      	mov	r4, r2
 80031aa:	4605      	mov	r5, r0
 80031ac:	b118      	cbz	r0, 80031b6 <__swbuf_r+0x12>
 80031ae:	6a03      	ldr	r3, [r0, #32]
 80031b0:	b90b      	cbnz	r3, 80031b6 <__swbuf_r+0x12>
 80031b2:	f7ff faed 	bl	8002790 <__sinit>
 80031b6:	69a3      	ldr	r3, [r4, #24]
 80031b8:	60a3      	str	r3, [r4, #8]
 80031ba:	89a3      	ldrh	r3, [r4, #12]
 80031bc:	071a      	lsls	r2, r3, #28
 80031be:	d525      	bpl.n	800320c <__swbuf_r+0x68>
 80031c0:	6923      	ldr	r3, [r4, #16]
 80031c2:	b31b      	cbz	r3, 800320c <__swbuf_r+0x68>
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	6922      	ldr	r2, [r4, #16]
 80031c8:	1a98      	subs	r0, r3, r2
 80031ca:	6963      	ldr	r3, [r4, #20]
 80031cc:	b2f6      	uxtb	r6, r6
 80031ce:	4283      	cmp	r3, r0
 80031d0:	4637      	mov	r7, r6
 80031d2:	dc04      	bgt.n	80031de <__swbuf_r+0x3a>
 80031d4:	4621      	mov	r1, r4
 80031d6:	4628      	mov	r0, r5
 80031d8:	f7ff fcd0 	bl	8002b7c <_fflush_r>
 80031dc:	b9e0      	cbnz	r0, 8003218 <__swbuf_r+0x74>
 80031de:	68a3      	ldr	r3, [r4, #8]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	60a3      	str	r3, [r4, #8]
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	6022      	str	r2, [r4, #0]
 80031ea:	701e      	strb	r6, [r3, #0]
 80031ec:	6962      	ldr	r2, [r4, #20]
 80031ee:	1c43      	adds	r3, r0, #1
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d004      	beq.n	80031fe <__swbuf_r+0x5a>
 80031f4:	89a3      	ldrh	r3, [r4, #12]
 80031f6:	07db      	lsls	r3, r3, #31
 80031f8:	d506      	bpl.n	8003208 <__swbuf_r+0x64>
 80031fa:	2e0a      	cmp	r6, #10
 80031fc:	d104      	bne.n	8003208 <__swbuf_r+0x64>
 80031fe:	4621      	mov	r1, r4
 8003200:	4628      	mov	r0, r5
 8003202:	f7ff fcbb 	bl	8002b7c <_fflush_r>
 8003206:	b938      	cbnz	r0, 8003218 <__swbuf_r+0x74>
 8003208:	4638      	mov	r0, r7
 800320a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800320c:	4621      	mov	r1, r4
 800320e:	4628      	mov	r0, r5
 8003210:	f000 f806 	bl	8003220 <__swsetup_r>
 8003214:	2800      	cmp	r0, #0
 8003216:	d0d5      	beq.n	80031c4 <__swbuf_r+0x20>
 8003218:	f04f 37ff 	mov.w	r7, #4294967295
 800321c:	e7f4      	b.n	8003208 <__swbuf_r+0x64>
	...

08003220 <__swsetup_r>:
 8003220:	b538      	push	{r3, r4, r5, lr}
 8003222:	4b2a      	ldr	r3, [pc, #168]	; (80032cc <__swsetup_r+0xac>)
 8003224:	4605      	mov	r5, r0
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	460c      	mov	r4, r1
 800322a:	b118      	cbz	r0, 8003234 <__swsetup_r+0x14>
 800322c:	6a03      	ldr	r3, [r0, #32]
 800322e:	b90b      	cbnz	r3, 8003234 <__swsetup_r+0x14>
 8003230:	f7ff faae 	bl	8002790 <__sinit>
 8003234:	89a3      	ldrh	r3, [r4, #12]
 8003236:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800323a:	0718      	lsls	r0, r3, #28
 800323c:	d422      	bmi.n	8003284 <__swsetup_r+0x64>
 800323e:	06d9      	lsls	r1, r3, #27
 8003240:	d407      	bmi.n	8003252 <__swsetup_r+0x32>
 8003242:	2309      	movs	r3, #9
 8003244:	602b      	str	r3, [r5, #0]
 8003246:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800324a:	81a3      	strh	r3, [r4, #12]
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	e034      	b.n	80032bc <__swsetup_r+0x9c>
 8003252:	0758      	lsls	r0, r3, #29
 8003254:	d512      	bpl.n	800327c <__swsetup_r+0x5c>
 8003256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003258:	b141      	cbz	r1, 800326c <__swsetup_r+0x4c>
 800325a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800325e:	4299      	cmp	r1, r3
 8003260:	d002      	beq.n	8003268 <__swsetup_r+0x48>
 8003262:	4628      	mov	r0, r5
 8003264:	f7ff fbb8 	bl	80029d8 <_free_r>
 8003268:	2300      	movs	r3, #0
 800326a:	6363      	str	r3, [r4, #52]	; 0x34
 800326c:	89a3      	ldrh	r3, [r4, #12]
 800326e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003272:	81a3      	strh	r3, [r4, #12]
 8003274:	2300      	movs	r3, #0
 8003276:	6063      	str	r3, [r4, #4]
 8003278:	6923      	ldr	r3, [r4, #16]
 800327a:	6023      	str	r3, [r4, #0]
 800327c:	89a3      	ldrh	r3, [r4, #12]
 800327e:	f043 0308 	orr.w	r3, r3, #8
 8003282:	81a3      	strh	r3, [r4, #12]
 8003284:	6923      	ldr	r3, [r4, #16]
 8003286:	b94b      	cbnz	r3, 800329c <__swsetup_r+0x7c>
 8003288:	89a3      	ldrh	r3, [r4, #12]
 800328a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800328e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003292:	d003      	beq.n	800329c <__swsetup_r+0x7c>
 8003294:	4621      	mov	r1, r4
 8003296:	4628      	mov	r0, r5
 8003298:	f000 f884 	bl	80033a4 <__smakebuf_r>
 800329c:	89a0      	ldrh	r0, [r4, #12]
 800329e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032a2:	f010 0301 	ands.w	r3, r0, #1
 80032a6:	d00a      	beq.n	80032be <__swsetup_r+0x9e>
 80032a8:	2300      	movs	r3, #0
 80032aa:	60a3      	str	r3, [r4, #8]
 80032ac:	6963      	ldr	r3, [r4, #20]
 80032ae:	425b      	negs	r3, r3
 80032b0:	61a3      	str	r3, [r4, #24]
 80032b2:	6923      	ldr	r3, [r4, #16]
 80032b4:	b943      	cbnz	r3, 80032c8 <__swsetup_r+0xa8>
 80032b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032ba:	d1c4      	bne.n	8003246 <__swsetup_r+0x26>
 80032bc:	bd38      	pop	{r3, r4, r5, pc}
 80032be:	0781      	lsls	r1, r0, #30
 80032c0:	bf58      	it	pl
 80032c2:	6963      	ldrpl	r3, [r4, #20]
 80032c4:	60a3      	str	r3, [r4, #8]
 80032c6:	e7f4      	b.n	80032b2 <__swsetup_r+0x92>
 80032c8:	2000      	movs	r0, #0
 80032ca:	e7f7      	b.n	80032bc <__swsetup_r+0x9c>
 80032cc:	20000068 	.word	0x20000068

080032d0 <_raise_r>:
 80032d0:	291f      	cmp	r1, #31
 80032d2:	b538      	push	{r3, r4, r5, lr}
 80032d4:	4604      	mov	r4, r0
 80032d6:	460d      	mov	r5, r1
 80032d8:	d904      	bls.n	80032e4 <_raise_r+0x14>
 80032da:	2316      	movs	r3, #22
 80032dc:	6003      	str	r3, [r0, #0]
 80032de:	f04f 30ff 	mov.w	r0, #4294967295
 80032e2:	bd38      	pop	{r3, r4, r5, pc}
 80032e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80032e6:	b112      	cbz	r2, 80032ee <_raise_r+0x1e>
 80032e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80032ec:	b94b      	cbnz	r3, 8003302 <_raise_r+0x32>
 80032ee:	4620      	mov	r0, r4
 80032f0:	f000 f830 	bl	8003354 <_getpid_r>
 80032f4:	462a      	mov	r2, r5
 80032f6:	4601      	mov	r1, r0
 80032f8:	4620      	mov	r0, r4
 80032fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032fe:	f000 b817 	b.w	8003330 <_kill_r>
 8003302:	2b01      	cmp	r3, #1
 8003304:	d00a      	beq.n	800331c <_raise_r+0x4c>
 8003306:	1c59      	adds	r1, r3, #1
 8003308:	d103      	bne.n	8003312 <_raise_r+0x42>
 800330a:	2316      	movs	r3, #22
 800330c:	6003      	str	r3, [r0, #0]
 800330e:	2001      	movs	r0, #1
 8003310:	e7e7      	b.n	80032e2 <_raise_r+0x12>
 8003312:	2400      	movs	r4, #0
 8003314:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003318:	4628      	mov	r0, r5
 800331a:	4798      	blx	r3
 800331c:	2000      	movs	r0, #0
 800331e:	e7e0      	b.n	80032e2 <_raise_r+0x12>

08003320 <raise>:
 8003320:	4b02      	ldr	r3, [pc, #8]	; (800332c <raise+0xc>)
 8003322:	4601      	mov	r1, r0
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	f7ff bfd3 	b.w	80032d0 <_raise_r>
 800332a:	bf00      	nop
 800332c:	20000068 	.word	0x20000068

08003330 <_kill_r>:
 8003330:	b538      	push	{r3, r4, r5, lr}
 8003332:	4d07      	ldr	r5, [pc, #28]	; (8003350 <_kill_r+0x20>)
 8003334:	2300      	movs	r3, #0
 8003336:	4604      	mov	r4, r0
 8003338:	4608      	mov	r0, r1
 800333a:	4611      	mov	r1, r2
 800333c:	602b      	str	r3, [r5, #0]
 800333e:	f7fd fa4b 	bl	80007d8 <_kill>
 8003342:	1c43      	adds	r3, r0, #1
 8003344:	d102      	bne.n	800334c <_kill_r+0x1c>
 8003346:	682b      	ldr	r3, [r5, #0]
 8003348:	b103      	cbz	r3, 800334c <_kill_r+0x1c>
 800334a:	6023      	str	r3, [r4, #0]
 800334c:	bd38      	pop	{r3, r4, r5, pc}
 800334e:	bf00      	nop
 8003350:	200001e8 	.word	0x200001e8

08003354 <_getpid_r>:
 8003354:	f7fd ba38 	b.w	80007c8 <_getpid>

08003358 <__swhatbuf_r>:
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	460c      	mov	r4, r1
 800335c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003360:	2900      	cmp	r1, #0
 8003362:	b096      	sub	sp, #88	; 0x58
 8003364:	4615      	mov	r5, r2
 8003366:	461e      	mov	r6, r3
 8003368:	da0d      	bge.n	8003386 <__swhatbuf_r+0x2e>
 800336a:	89a3      	ldrh	r3, [r4, #12]
 800336c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003370:	f04f 0100 	mov.w	r1, #0
 8003374:	bf0c      	ite	eq
 8003376:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800337a:	2340      	movne	r3, #64	; 0x40
 800337c:	2000      	movs	r0, #0
 800337e:	6031      	str	r1, [r6, #0]
 8003380:	602b      	str	r3, [r5, #0]
 8003382:	b016      	add	sp, #88	; 0x58
 8003384:	bd70      	pop	{r4, r5, r6, pc}
 8003386:	466a      	mov	r2, sp
 8003388:	f000 f848 	bl	800341c <_fstat_r>
 800338c:	2800      	cmp	r0, #0
 800338e:	dbec      	blt.n	800336a <__swhatbuf_r+0x12>
 8003390:	9901      	ldr	r1, [sp, #4]
 8003392:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003396:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800339a:	4259      	negs	r1, r3
 800339c:	4159      	adcs	r1, r3
 800339e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033a2:	e7eb      	b.n	800337c <__swhatbuf_r+0x24>

080033a4 <__smakebuf_r>:
 80033a4:	898b      	ldrh	r3, [r1, #12]
 80033a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033a8:	079d      	lsls	r5, r3, #30
 80033aa:	4606      	mov	r6, r0
 80033ac:	460c      	mov	r4, r1
 80033ae:	d507      	bpl.n	80033c0 <__smakebuf_r+0x1c>
 80033b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80033b4:	6023      	str	r3, [r4, #0]
 80033b6:	6123      	str	r3, [r4, #16]
 80033b8:	2301      	movs	r3, #1
 80033ba:	6163      	str	r3, [r4, #20]
 80033bc:	b002      	add	sp, #8
 80033be:	bd70      	pop	{r4, r5, r6, pc}
 80033c0:	ab01      	add	r3, sp, #4
 80033c2:	466a      	mov	r2, sp
 80033c4:	f7ff ffc8 	bl	8003358 <__swhatbuf_r>
 80033c8:	9900      	ldr	r1, [sp, #0]
 80033ca:	4605      	mov	r5, r0
 80033cc:	4630      	mov	r0, r6
 80033ce:	f7ff f889 	bl	80024e4 <_malloc_r>
 80033d2:	b948      	cbnz	r0, 80033e8 <__smakebuf_r+0x44>
 80033d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033d8:	059a      	lsls	r2, r3, #22
 80033da:	d4ef      	bmi.n	80033bc <__smakebuf_r+0x18>
 80033dc:	f023 0303 	bic.w	r3, r3, #3
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	81a3      	strh	r3, [r4, #12]
 80033e6:	e7e3      	b.n	80033b0 <__smakebuf_r+0xc>
 80033e8:	89a3      	ldrh	r3, [r4, #12]
 80033ea:	6020      	str	r0, [r4, #0]
 80033ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f0:	81a3      	strh	r3, [r4, #12]
 80033f2:	9b00      	ldr	r3, [sp, #0]
 80033f4:	6163      	str	r3, [r4, #20]
 80033f6:	9b01      	ldr	r3, [sp, #4]
 80033f8:	6120      	str	r0, [r4, #16]
 80033fa:	b15b      	cbz	r3, 8003414 <__smakebuf_r+0x70>
 80033fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003400:	4630      	mov	r0, r6
 8003402:	f000 f81d 	bl	8003440 <_isatty_r>
 8003406:	b128      	cbz	r0, 8003414 <__smakebuf_r+0x70>
 8003408:	89a3      	ldrh	r3, [r4, #12]
 800340a:	f023 0303 	bic.w	r3, r3, #3
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	81a3      	strh	r3, [r4, #12]
 8003414:	89a3      	ldrh	r3, [r4, #12]
 8003416:	431d      	orrs	r5, r3
 8003418:	81a5      	strh	r5, [r4, #12]
 800341a:	e7cf      	b.n	80033bc <__smakebuf_r+0x18>

0800341c <_fstat_r>:
 800341c:	b538      	push	{r3, r4, r5, lr}
 800341e:	4d07      	ldr	r5, [pc, #28]	; (800343c <_fstat_r+0x20>)
 8003420:	2300      	movs	r3, #0
 8003422:	4604      	mov	r4, r0
 8003424:	4608      	mov	r0, r1
 8003426:	4611      	mov	r1, r2
 8003428:	602b      	str	r3, [r5, #0]
 800342a:	f7fd fa34 	bl	8000896 <_fstat>
 800342e:	1c43      	adds	r3, r0, #1
 8003430:	d102      	bne.n	8003438 <_fstat_r+0x1c>
 8003432:	682b      	ldr	r3, [r5, #0]
 8003434:	b103      	cbz	r3, 8003438 <_fstat_r+0x1c>
 8003436:	6023      	str	r3, [r4, #0]
 8003438:	bd38      	pop	{r3, r4, r5, pc}
 800343a:	bf00      	nop
 800343c:	200001e8 	.word	0x200001e8

08003440 <_isatty_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	4d06      	ldr	r5, [pc, #24]	; (800345c <_isatty_r+0x1c>)
 8003444:	2300      	movs	r3, #0
 8003446:	4604      	mov	r4, r0
 8003448:	4608      	mov	r0, r1
 800344a:	602b      	str	r3, [r5, #0]
 800344c:	f7fd fa33 	bl	80008b6 <_isatty>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	d102      	bne.n	800345a <_isatty_r+0x1a>
 8003454:	682b      	ldr	r3, [r5, #0]
 8003456:	b103      	cbz	r3, 800345a <_isatty_r+0x1a>
 8003458:	6023      	str	r3, [r4, #0]
 800345a:	bd38      	pop	{r3, r4, r5, pc}
 800345c:	200001e8 	.word	0x200001e8

08003460 <_init>:
 8003460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003462:	bf00      	nop
 8003464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003466:	bc08      	pop	{r3}
 8003468:	469e      	mov	lr, r3
 800346a:	4770      	bx	lr

0800346c <_fini>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	bf00      	nop
 8003470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003472:	bc08      	pop	{r3}
 8003474:	469e      	mov	lr, r3
 8003476:	4770      	bx	lr
