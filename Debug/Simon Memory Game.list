
Simon Memory Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004284  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004554  08004554  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08004554  08004554  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004554  08004554  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004554  08004554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004558  08004558  00014558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800455c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000001d8  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000244  20000244  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a3c4  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bc5  00000000  00000000  0002a4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ab8  00000000  00000000  0002c068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000834  00000000  00000000  0002cb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020f60  00000000  00000000  0002d354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e488  00000000  00000000  0004e2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6c81  00000000  00000000  0005c73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003518  00000000  00000000  001233c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  001268d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800440c 	.word	0x0800440c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800440c 	.word	0x0800440c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 800028a:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <delay+0x30>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	2200      	movs	r2, #0
 8000290:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000292:	bf00      	nop
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <delay+0x30>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800029a:	88fb      	ldrh	r3, [r7, #6]
 800029c:	429a      	cmp	r2, r3
 800029e:	d3f9      	bcc.n	8000294 <delay+0x14>
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000088 	.word	0x20000088

080002b4 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	461a      	mov	r2, r3
 80002c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ca:	4823      	ldr	r0, [pc, #140]	; (8000358 <send_to_lcd+0xa4>)
 80002cc:	f001 f8fa 	bl	80014c4 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	08db      	lsrs	r3, r3, #3
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	f003 0301 	and.w	r3, r3, #1
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	461a      	mov	r2, r3
 80002de:	2108      	movs	r1, #8
 80002e0:	481d      	ldr	r0, [pc, #116]	; (8000358 <send_to_lcd+0xa4>)
 80002e2:	f001 f8ef 	bl	80014c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	089b      	lsrs	r3, r3, #2
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	f003 0301 	and.w	r3, r3, #1
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	461a      	mov	r2, r3
 80002f4:	2104      	movs	r1, #4
 80002f6:	4818      	ldr	r0, [pc, #96]	; (8000358 <send_to_lcd+0xa4>)
 80002f8:	f001 f8e4 	bl	80014c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	085b      	lsrs	r3, r3, #1
 8000300:	b2db      	uxtb	r3, r3
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	b2db      	uxtb	r3, r3
 8000308:	461a      	mov	r2, r3
 800030a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030e:	4812      	ldr	r0, [pc, #72]	; (8000358 <send_to_lcd+0xa4>)
 8000310:	f001 f8d8 	bl	80014c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	f003 0301 	and.w	r3, r3, #1
 800031a:	b2db      	uxtb	r3, r3
 800031c:	461a      	mov	r2, r3
 800031e:	2180      	movs	r1, #128	; 0x80
 8000320:	480e      	ldr	r0, [pc, #56]	; (800035c <send_to_lcd+0xa8>)
 8000322:	f001 f8cf 	bl	80014c4 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000326:	2201      	movs	r2, #1
 8000328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800032c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000330:	f001 f8c8 	bl	80014c4 <HAL_GPIO_WritePin>
	delay (20);
 8000334:	2014      	movs	r0, #20
 8000336:	f7ff ffa3 	bl	8000280 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000344:	f001 f8be 	bl	80014c4 <HAL_GPIO_WritePin>
	delay (20);
 8000348:	2014      	movs	r0, #20
 800034a:	f7ff ff99 	bl	8000280 <delay>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	48000800 	.word	0x48000800
 800035c:	48000400 	.word	0x48000400

08000360 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	091b      	lsrs	r3, r3, #4
 800036e:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000370:	7bfb      	ldrb	r3, [r7, #15]
 8000372:	2100      	movs	r1, #0
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ff9d 	bl	80002b4 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	f003 030f 	and.w	r3, r3, #15
 8000380:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000382:	7bfb      	ldrb	r3, [r7, #15]
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ff94 	bl	80002b4 <send_to_lcd>
}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	091b      	lsrs	r3, r3, #4
 80003a2:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 80003a4:	7bfb      	ldrb	r3, [r7, #15]
 80003a6:	2101      	movs	r1, #1
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff83 	bl	80002b4 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	f003 030f 	and.w	r3, r3, #15
 80003b4:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 80003b6:	7bfb      	ldrb	r3, [r7, #15]
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff7a 	bl	80002b4 <send_to_lcd>
}
 80003c0:	bf00      	nop
 80003c2:	3710      	adds	r7, #16
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <lcd_put_cur>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_put_cur(int row, int col)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	6039      	str	r1, [r7, #0]
    switch (row)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d003      	beq.n	80003e0 <lcd_put_cur+0x18>
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d005      	beq.n	80003ea <lcd_put_cur+0x22>
 80003de:	e009      	b.n	80003f4 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e6:	603b      	str	r3, [r7, #0]
            break;
 80003e8:	e004      	b.n	80003f4 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80003f0:	603b      	str	r3, [r7, #0]
            break;
 80003f2:	bf00      	nop
    }

    lcd_send_cmd (col);
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ffb1 	bl	8000360 <lcd_send_cmd>
}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <lcd_init>:


void lcd_init (void)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800040a:	2032      	movs	r0, #50	; 0x32
 800040c:	f000 fdae 	bl	8000f6c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000410:	2030      	movs	r0, #48	; 0x30
 8000412:	f7ff ffa5 	bl	8000360 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000416:	2005      	movs	r0, #5
 8000418:	f000 fda8 	bl	8000f6c <HAL_Delay>
	lcd_send_cmd (0x30);
 800041c:	2030      	movs	r0, #48	; 0x30
 800041e:	f7ff ff9f 	bl	8000360 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000422:	2001      	movs	r0, #1
 8000424:	f000 fda2 	bl	8000f6c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000428:	2030      	movs	r0, #48	; 0x30
 800042a:	f7ff ff99 	bl	8000360 <lcd_send_cmd>
	HAL_Delay(10);
 800042e:	200a      	movs	r0, #10
 8000430:	f000 fd9c 	bl	8000f6c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000434:	2020      	movs	r0, #32
 8000436:	f7ff ff93 	bl	8000360 <lcd_send_cmd>
	HAL_Delay(10);
 800043a:	200a      	movs	r0, #10
 800043c:	f000 fd96 	bl	8000f6c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000440:	2028      	movs	r0, #40	; 0x28
 8000442:	f7ff ff8d 	bl	8000360 <lcd_send_cmd>
	HAL_Delay(1);
 8000446:	2001      	movs	r0, #1
 8000448:	f000 fd90 	bl	8000f6c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800044c:	2008      	movs	r0, #8
 800044e:	f7ff ff87 	bl	8000360 <lcd_send_cmd>
	HAL_Delay(1);
 8000452:	2001      	movs	r0, #1
 8000454:	f000 fd8a 	bl	8000f6c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000458:	2001      	movs	r0, #1
 800045a:	f7ff ff81 	bl	8000360 <lcd_send_cmd>
	HAL_Delay(1);
 800045e:	2001      	movs	r0, #1
 8000460:	f000 fd84 	bl	8000f6c <HAL_Delay>
	HAL_Delay(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f000 fd81 	bl	8000f6c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800046a:	2006      	movs	r0, #6
 800046c:	f7ff ff78 	bl	8000360 <lcd_send_cmd>
	HAL_Delay(1);
 8000470:	2001      	movs	r0, #1
 8000472:	f000 fd7b 	bl	8000f6c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000476:	200c      	movs	r0, #12
 8000478:	f7ff ff72 	bl	8000360 <lcd_send_cmd>
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}

08000480 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000488:	e006      	b.n	8000498 <lcd_send_string+0x18>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	1c5a      	adds	r2, r3, #1
 800048e:	607a      	str	r2, [r7, #4]
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ff7e 	bl	8000394 <lcd_send_data>
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d1f4      	bne.n	800048a <lcd_send_string+0xa>
}
 80004a0:	bf00      	nop
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <genseq>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void genseq(int *pass,int trail)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b086      	sub	sp, #24
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
 80004b2:	6039      	str	r1, [r7, #0]
    int temp,i=0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
    while(i<trail)
 80004b8:	e011      	b.n	80004de <genseq+0x34>
    {
        temp=rand()%2;
 80004ba:	f003 f875 	bl	80035a8 <rand>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	bfb8      	it	lt
 80004c8:	425b      	neglt	r3, r3
 80004ca:	60fb      	str	r3, [r7, #12]
        pass[i]=temp;
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	4413      	add	r3, r2
 80004d4:	68fa      	ldr	r2, [r7, #12]
 80004d6:	601a      	str	r2, [r3, #0]
        i+=1;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	3301      	adds	r3, #1
 80004dc:	617b      	str	r3, [r7, #20]
    while(i<trail)
 80004de:	697a      	ldr	r2, [r7, #20]
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	dbe9      	blt.n	80004ba <genseq+0x10>
    }

  for(int i=0;i<trail;i++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	e037      	b.n	800055c <genseq+0xb2>
  {
    if (pass[i]==1){
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4413      	add	r3, r2
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d113      	bne.n	8000522 <genseq+0x78>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000502:	f000 ffdf 	bl	80014c4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000506:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050a:	f000 fd2f 	bl	8000f6c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 800050e:	2200      	movs	r2, #0
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f000 ffd5 	bl	80014c4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800051a:	2064      	movs	r0, #100	; 0x64
 800051c:	f000 fd26 	bl	8000f6c <HAL_Delay>
 8000520:	e019      	b.n	8000556 <genseq+0xac>
    }
    else if (pass[i]==0){
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d112      	bne.n	8000556 <genseq+0xac>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000530:	2201      	movs	r2, #1
 8000532:	2140      	movs	r1, #64	; 0x40
 8000534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000538:	f000 ffc4 	bl	80014c4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800053c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000540:	f000 fd14 	bl	8000f6c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 8000544:	2200      	movs	r2, #0
 8000546:	2140      	movs	r1, #64	; 0x40
 8000548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054c:	f000 ffba 	bl	80014c4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000550:	2064      	movs	r0, #100	; 0x64
 8000552:	f000 fd0b 	bl	8000f6c <HAL_Delay>
  for(int i=0;i<trail;i++)
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	3301      	adds	r3, #1
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693a      	ldr	r2, [r7, #16]
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	429a      	cmp	r2, r3
 8000562:	dbc3      	blt.n	80004ec <genseq+0x42>
    }
  }
}
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <intToCharArray>:

void intToCharArray(int num, char charArray[])
{
 8000570:	b480      	push	{r7}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
    // Extract digits
    int d3 = num % 10;
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	4b21      	ldr	r3, [pc, #132]	; (8000604 <intToCharArray+0x94>)
 800057e:	fb83 1302 	smull	r1, r3, r3, r2
 8000582:	1099      	asrs	r1, r3, #2
 8000584:	17d3      	asrs	r3, r2, #31
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	460b      	mov	r3, r1
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	440b      	add	r3, r1
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	617b      	str	r3, [r7, #20]
    int d2 = (num % 100) / 10;
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <intToCharArray+0x98>)
 8000598:	fb83 1302 	smull	r1, r3, r3, r2
 800059c:	1159      	asrs	r1, r3, #5
 800059e:	17d3      	asrs	r3, r2, #31
 80005a0:	1acb      	subs	r3, r1, r3
 80005a2:	2164      	movs	r1, #100	; 0x64
 80005a4:	fb01 f303 	mul.w	r3, r1, r3
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	4a16      	ldr	r2, [pc, #88]	; (8000604 <intToCharArray+0x94>)
 80005ac:	fb82 1203 	smull	r1, r2, r2, r3
 80005b0:	1092      	asrs	r2, r2, #2
 80005b2:	17db      	asrs	r3, r3, #31
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	613b      	str	r3, [r7, #16]
    int d1 = num / 100;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a13      	ldr	r2, [pc, #76]	; (8000608 <intToCharArray+0x98>)
 80005bc:	fb82 1203 	smull	r1, r2, r2, r3
 80005c0:	1152      	asrs	r2, r2, #5
 80005c2:	17db      	asrs	r3, r3, #31
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	60fb      	str	r3, [r7, #12]

    // Convert digits to characters
    charArray[0] = '0' + d1;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	3330      	adds	r3, #48	; 0x30
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	701a      	strb	r2, [r3, #0]
    charArray[1] = '0' + d2;
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	3230      	adds	r2, #48	; 0x30
 80005de:	b2d2      	uxtb	r2, r2
 80005e0:	701a      	strb	r2, [r3, #0]
    charArray[2] = '0' + d3;
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	3302      	adds	r3, #2
 80005ea:	3230      	adds	r2, #48	; 0x30
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	701a      	strb	r2, [r3, #0]

    // Null-terminate the array
    charArray[3] = '\0';
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	3303      	adds	r3, #3
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
}
 80005f8:	bf00      	nop
 80005fa:	371c      	adds	r7, #28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	66666667 	.word	0x66666667
 8000608:	51eb851f 	.word	0x51eb851f

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fc46 	bl	8000ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f970 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 fa22 	bl	8000a60 <MX_GPIO_Init>
  MX_TIM1_Init();
 800061c:	f000 f9cc 	bl	80009b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000620:	48a8      	ldr	r0, [pc, #672]	; (80008c4 <main+0x2b8>)
 8000622:	f002 fc17 	bl	8002e54 <HAL_TIM_Base_Start>
  lcd_init();
 8000626:	f7ff feee 	bl	8000406 <lcd_init>
  lcd_put_cur(0,0);
 800062a:	2100      	movs	r1, #0
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff fecb 	bl	80003c8 <lcd_put_cur>
  lcd_send_string("Your Score 0");
 8000632:	48a5      	ldr	r0, [pc, #660]	; (80008c8 <main+0x2bc>)
 8000634:	f7ff ff24 	bl	8000480 <lcd_send_string>
  lcd_put_cur(1,0);
 8000638:	2100      	movs	r1, #0
 800063a:	2001      	movs	r0, #1
 800063c:	f7ff fec4 	bl	80003c8 <lcd_put_cur>
  lcd_send_string("High Score 0");
 8000640:	48a2      	ldr	r0, [pc, #648]	; (80008cc <main+0x2c0>)
 8000642:	f7ff ff1d 	bl	8000480 <lcd_send_string>
  trail=1;
 8000646:	4ba2      	ldr	r3, [pc, #648]	; (80008d0 <main+0x2c4>)
 8000648:	2201      	movs	r2, #1
 800064a:	601a      	str	r2, [r3, #0]
  pass=(int*)malloc(16*sizeof(int));
 800064c:	2040      	movs	r0, #64	; 0x40
 800064e:	f002 fef7 	bl	8003440 <malloc>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	4b9f      	ldr	r3, [pc, #636]	; (80008d4 <main+0x2c8>)
 8000658:	601a      	str	r2, [r3, #0]
  wins=0;
 800065a:	4b9f      	ldr	r3, [pc, #636]	; (80008d8 <main+0x2cc>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		i=0;
 8000660:	4b9e      	ldr	r3, [pc, #632]	; (80008dc <main+0x2d0>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
		flag=0;
 8000666:	4b9e      	ldr	r3, [pc, #632]	; (80008e0 <main+0x2d4>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6)){
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	489d      	ldr	r0, [pc, #628]	; (80008e4 <main+0x2d8>)
 8000670:	f000 ff10 	bl	8001494 <HAL_GPIO_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f2      	beq.n	8000660 <main+0x54>
		if (trail==16)
 800067a:	4b95      	ldr	r3, [pc, #596]	; (80008d0 <main+0x2c4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b10      	cmp	r3, #16
 8000680:	d102      	bne.n	8000688 <main+0x7c>
			trail=1;
 8000682:	4b93      	ldr	r3, [pc, #588]	; (80008d0 <main+0x2c4>)
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
		genseq(pass,trail);
 8000688:	4b92      	ldr	r3, [pc, #584]	; (80008d4 <main+0x2c8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a90      	ldr	r2, [pc, #576]	; (80008d0 <main+0x2c4>)
 800068e:	6812      	ldr	r2, [r2, #0]
 8000690:	4611      	mov	r1, r2
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff09 	bl	80004aa <genseq>
		inp=(int*)malloc((trail)*sizeof(int));
 8000698:	4b8d      	ldr	r3, [pc, #564]	; (80008d0 <main+0x2c4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 fece 	bl	8003440 <malloc>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b8f      	ldr	r3, [pc, #572]	; (80008e8 <main+0x2dc>)
 80006aa:	601a      	str	r2, [r3, #0]
		while(i<trail)
 80006ac:	e074      	b.n	8000798 <main+0x18c>
		{
			if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7))
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	488e      	ldr	r0, [pc, #568]	; (80008ec <main+0x2e0>)
 80006b2:	f000 feef 	bl	8001494 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d024      	beq.n	8000706 <main+0xfa>
			{
				while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7)){
 80006bc:	e00d      	b.n	80006da <main+0xce>
				inp[i]=0;
 80006be:	4b8a      	ldr	r3, [pc, #552]	; (80008e8 <main+0x2dc>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4b86      	ldr	r3, [pc, #536]	; (80008dc <main+0x2d0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);}
 80006ce:	2201      	movs	r2, #1
 80006d0:	2140      	movs	r1, #64	; 0x40
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f000 fef5 	bl	80014c4 <HAL_GPIO_WritePin>
				while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_7)){
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	4883      	ldr	r0, [pc, #524]	; (80008ec <main+0x2e0>)
 80006de:	f000 fed9 	bl	8001494 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1ea      	bne.n	80006be <main+0xb2>
				i+=1;
 80006e8:	4b7c      	ldr	r3, [pc, #496]	; (80008dc <main+0x2d0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a7b      	ldr	r2, [pc, #492]	; (80008dc <main+0x2d0>)
 80006f0:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f000 fee3 	bl	80014c4 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80006fe:	2064      	movs	r0, #100	; 0x64
 8000700:	f000 fc34 	bl	8000f6c <HAL_Delay>
 8000704:	e02e      	b.n	8000764 <main+0x158>
			}
			else if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_9))
 8000706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070e:	f000 fec1 	bl	8001494 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d025      	beq.n	8000764 <main+0x158>
			{
				while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_9)){
 8000718:	e00d      	b.n	8000736 <main+0x12a>
				inp[i]=1;
 800071a:	4b73      	ldr	r3, [pc, #460]	; (80008e8 <main+0x2dc>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b6f      	ldr	r3, [pc, #444]	; (80008dc <main+0x2d0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);}
 800072a:	2201      	movs	r2, #1
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000732:	f000 fec7 	bl	80014c4 <HAL_GPIO_WritePin>
				while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_9)){
 8000736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f000 fea9 	bl	8001494 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1e8      	bne.n	800071a <main+0x10e>
				i+=1;
 8000748:	4b64      	ldr	r3, [pc, #400]	; (80008dc <main+0x2d0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	4a63      	ldr	r2, [pc, #396]	; (80008dc <main+0x2d0>)
 8000750:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 8000752:	2200      	movs	r2, #0
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075a:	f000 feb3 	bl	80014c4 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 800075e:	2064      	movs	r0, #100	; 0x64
 8000760:	f000 fc04 	bl	8000f6c <HAL_Delay>
			}
			if (inp[i-1]!=pass[i-1]&&i>0)
 8000764:	4b60      	ldr	r3, [pc, #384]	; (80008e8 <main+0x2dc>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b5c      	ldr	r3, [pc, #368]	; (80008dc <main+0x2d0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000770:	3b01      	subs	r3, #1
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b56      	ldr	r3, [pc, #344]	; (80008d4 <main+0x2c8>)
 800077a:	6819      	ldr	r1, [r3, #0]
 800077c:	4b57      	ldr	r3, [pc, #348]	; (80008dc <main+0x2d0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000784:	3b01      	subs	r3, #1
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	440b      	add	r3, r1
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	429a      	cmp	r2, r3
 800078e:	d003      	beq.n	8000798 <main+0x18c>
 8000790:	4b52      	ldr	r3, [pc, #328]	; (80008dc <main+0x2d0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	dc06      	bgt.n	80007a6 <main+0x19a>
		while(i<trail)
 8000798:	4b50      	ldr	r3, [pc, #320]	; (80008dc <main+0x2d0>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b4c      	ldr	r3, [pc, #304]	; (80008d0 <main+0x2c4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	db84      	blt.n	80006ae <main+0xa2>
 80007a4:	e000      	b.n	80007a8 <main+0x19c>
				break;
 80007a6:	bf00      	nop
		}
		for (i=0;i<trail;i++)
 80007a8:	4b4c      	ldr	r3, [pc, #304]	; (80008dc <main+0x2d0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	e018      	b.n	80007e2 <main+0x1d6>
		{
			if (inp[i]!=pass[i])
 80007b0:	4b4d      	ldr	r3, [pc, #308]	; (80008e8 <main+0x2dc>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b49      	ldr	r3, [pc, #292]	; (80008dc <main+0x2d0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	4b45      	ldr	r3, [pc, #276]	; (80008d4 <main+0x2c8>)
 80007c0:	6819      	ldr	r1, [r3, #0]
 80007c2:	4b46      	ldr	r3, [pc, #280]	; (80008dc <main+0x2d0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d003      	beq.n	80007d8 <main+0x1cc>
			{
				flag=1;
 80007d0:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <main+0x2d4>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	601a      	str	r2, [r3, #0]
				break;
 80007d6:	e00a      	b.n	80007ee <main+0x1e2>
		for (i=0;i<trail;i++)
 80007d8:	4b40      	ldr	r3, [pc, #256]	; (80008dc <main+0x2d0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3301      	adds	r3, #1
 80007de:	4a3f      	ldr	r2, [pc, #252]	; (80008dc <main+0x2d0>)
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	4b3e      	ldr	r3, [pc, #248]	; (80008dc <main+0x2d0>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	4b3a      	ldr	r3, [pc, #232]	; (80008d0 <main+0x2c4>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	dbe0      	blt.n	80007b0 <main+0x1a4>
			}
		}
		if (!flag)
 80007ee:	4b3c      	ldr	r3, [pc, #240]	; (80008e0 <main+0x2d4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d121      	bne.n	800083a <main+0x22e>
		{
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f000 fe61 	bl	80014c4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000802:	20c8      	movs	r0, #200	; 0xc8
 8000804:	f000 fbb2 	bl	8000f6c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000808:	2200      	movs	r2, #0
 800080a:	2120      	movs	r1, #32
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f000 fe58 	bl	80014c4 <HAL_GPIO_WritePin>
			wins+=1;
 8000814:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <main+0x2cc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3301      	adds	r3, #1
 800081a:	4a2f      	ldr	r2, [pc, #188]	; (80008d8 <main+0x2cc>)
 800081c:	6013      	str	r3, [r2, #0]
			intToCharArray(wins, charArray);
 800081e:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <main+0x2cc>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4933      	ldr	r1, [pc, #204]	; (80008f0 <main+0x2e4>)
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fea3 	bl	8000570 <intToCharArray>
			lcd_put_cur(0,11);
 800082a:	210b      	movs	r1, #11
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff fdcb 	bl	80003c8 <lcd_put_cur>
			lcd_send_string(charArray);
 8000832:	482f      	ldr	r0, [pc, #188]	; (80008f0 <main+0x2e4>)
 8000834:	f7ff fe24 	bl	8000480 <lcd_send_string>
 8000838:	e03d      	b.n	80008b6 <main+0x2aa>
		}
		else {
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 800083a:	2201      	movs	r2, #1
 800083c:	2120      	movs	r1, #32
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f000 fe3f 	bl	80014c4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000846:	20c8      	movs	r0, #200	; 0xc8
 8000848:	f000 fb90 	bl	8000f6c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 800084c:	2200      	movs	r2, #0
 800084e:	2120      	movs	r1, #32
 8000850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000854:	f000 fe36 	bl	80014c4 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000858:	2064      	movs	r0, #100	; 0x64
 800085a:	f000 fb87 	bl	8000f6c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 800085e:	2201      	movs	r2, #1
 8000860:	2120      	movs	r1, #32
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f000 fe2d 	bl	80014c4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800086a:	20c8      	movs	r0, #200	; 0xc8
 800086c:	f000 fb7e 	bl	8000f6c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000870:	2200      	movs	r2, #0
 8000872:	2120      	movs	r1, #32
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f000 fe24 	bl	80014c4 <HAL_GPIO_WritePin>
			trail=0;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <main+0x2c4>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
			if (high<wins)
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <main+0x2e8>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <main+0x2cc>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	429a      	cmp	r2, r3
 800088c:	da10      	bge.n	80008b0 <main+0x2a4>
			{
				high=wins;
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <main+0x2cc>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <main+0x2e8>)
 8000894:	6013      	str	r3, [r2, #0]
				intToCharArray(high, charArray);
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <main+0x2e8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4915      	ldr	r1, [pc, #84]	; (80008f0 <main+0x2e4>)
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fe67 	bl	8000570 <intToCharArray>
				lcd_put_cur(1,11);
 80008a2:	210b      	movs	r1, #11
 80008a4:	2001      	movs	r0, #1
 80008a6:	f7ff fd8f 	bl	80003c8 <lcd_put_cur>
				lcd_send_string(charArray);
 80008aa:	4811      	ldr	r0, [pc, #68]	; (80008f0 <main+0x2e4>)
 80008ac:	f7ff fde8 	bl	8000480 <lcd_send_string>
			}
			wins=0;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <main+0x2cc>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
		}
		trail+=1;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <main+0x2c4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	3301      	adds	r3, #1
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <main+0x2c4>)
 80008be:	6013      	str	r3, [r2, #0]
		i=0;
 80008c0:	e6ce      	b.n	8000660 <main+0x54>
 80008c2:	bf00      	nop
 80008c4:	20000088 	.word	0x20000088
 80008c8:	08004424 	.word	0x08004424
 80008cc:	08004434 	.word	0x08004434
 80008d0:	20000000 	.word	0x20000000
 80008d4:	200000d4 	.word	0x200000d4
 80008d8:	200000e4 	.word	0x200000e4
 80008dc:	200000d8 	.word	0x200000d8
 80008e0:	200000dc 	.word	0x200000dc
 80008e4:	48000400 	.word	0x48000400
 80008e8:	200000e0 	.word	0x200000e0
 80008ec:	48000800 	.word	0x48000800
 80008f0:	200000ec 	.word	0x200000ec
 80008f4:	200000e8 	.word	0x200000e8

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b0a6      	sub	sp, #152	; 0x98
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000902:	2228      	movs	r2, #40	; 0x28
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f002 ff91 	bl	800382e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2258      	movs	r2, #88	; 0x58
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f002 ff83 	bl	800382e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000928:	2301      	movs	r3, #1
 800092a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800092c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000930:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000932:	2301      	movs	r3, #1
 8000934:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000940:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000944:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000952:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000956:	4618      	mov	r0, r3
 8000958:	f000 fdcc 	bl	80014f4 <HAL_RCC_OscConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000962:	f000 f927 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000966:	230f      	movs	r3, #15
 8000968:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096a:	2302      	movs	r3, #2
 800096c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000980:	2102      	movs	r1, #2
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fe0a 	bl	800259c <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800098e:	f000 f911 	bl	8000bb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000996:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000998:	2300      	movs	r3, #0
 800099a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	4618      	mov	r0, r3
 80009a0:	f001 ffe2 	bl	8002968 <HAL_RCCEx_PeriphCLKConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009aa:	f000 f903 	bl	8000bb4 <Error_Handler>
  }
}
 80009ae:	bf00      	nop
 80009b0:	3798      	adds	r7, #152	; 0x98
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <MX_TIM1_Init+0xa0>)
 80009d8:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <MX_TIM1_Init+0xa4>)
 80009da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_TIM1_Init+0xa0>)
 80009de:	2247      	movs	r2, #71	; 0x47
 80009e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_TIM1_Init+0xa0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_TIM1_Init+0xa0>)
 80009ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80009ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_TIM1_Init+0xa0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_TIM1_Init+0xa0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_TIM1_Init+0xa0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a02:	4815      	ldr	r0, [pc, #84]	; (8000a58 <MX_TIM1_Init+0xa0>)
 8000a04:	f002 f9ce 	bl	8002da4 <HAL_TIM_Base_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a0e:	f000 f8d1 	bl	8000bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <MX_TIM1_Init+0xa0>)
 8000a20:	f002 fa80 	bl	8002f24 <HAL_TIM_ConfigClockSource>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a2a:	f000 f8c3 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	; (8000a58 <MX_TIM1_Init+0xa0>)
 8000a40:	f002 fc72 	bl	8003328 <HAL_TIMEx_MasterConfigSynchronization>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a4a:	f000 f8b3 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000088 	.word	0x20000088
 8000a5c:	40012c00 	.word	0x40012c00

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	4b4c      	ldr	r3, [pc, #304]	; (8000ba8 <MX_GPIO_Init+0x148>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	4a4b      	ldr	r2, [pc, #300]	; (8000ba8 <MX_GPIO_Init+0x148>)
 8000a7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a80:	6153      	str	r3, [r2, #20]
 8000a82:	4b49      	ldr	r3, [pc, #292]	; (8000ba8 <MX_GPIO_Init+0x148>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8e:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <MX_GPIO_Init+0x148>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	4a45      	ldr	r2, [pc, #276]	; (8000ba8 <MX_GPIO_Init+0x148>)
 8000a94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a98:	6153      	str	r3, [r2, #20]
 8000a9a:	4b43      	ldr	r3, [pc, #268]	; (8000ba8 <MX_GPIO_Init+0x148>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b40      	ldr	r3, [pc, #256]	; (8000ba8 <MX_GPIO_Init+0x148>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	4a3f      	ldr	r2, [pc, #252]	; (8000ba8 <MX_GPIO_Init+0x148>)
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	6153      	str	r3, [r2, #20]
 8000ab2:	4b3d      	ldr	r3, [pc, #244]	; (8000ba8 <MX_GPIO_Init+0x148>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b3a      	ldr	r3, [pc, #232]	; (8000ba8 <MX_GPIO_Init+0x148>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	4a39      	ldr	r2, [pc, #228]	; (8000ba8 <MX_GPIO_Init+0x148>)
 8000ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac8:	6153      	str	r3, [r2, #20]
 8000aca:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <MX_GPIO_Init+0x148>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f243 410c 	movw	r1, #13324	; 0x340c
 8000adc:	4833      	ldr	r0, [pc, #204]	; (8000bac <MX_GPIO_Init+0x14c>)
 8000ade:	f000 fcf1 	bl	80014c4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f248 01e0 	movw	r1, #32992	; 0x80e0
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f000 fcea 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	482e      	ldr	r0, [pc, #184]	; (8000bb0 <MX_GPIO_Init+0x150>)
 8000af6:	f000 fce5 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC10
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10
 8000afa:	f243 430c 	movw	r3, #13324	; 0x340c
 8000afe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4826      	ldr	r0, [pc, #152]	; (8000bac <MX_GPIO_Init+0x14c>)
 8000b14:	f000 fb34 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8000b18:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f000 fb24 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4818      	ldr	r0, [pc, #96]	; (8000bac <MX_GPIO_Init+0x14c>)
 8000b4c:	f000 fb18 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f000 fb0a 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b6c:	2340      	movs	r3, #64	; 0x40
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_GPIO_Init+0x150>)
 8000b80:	f000 fafe 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_GPIO_Init+0x150>)
 8000b9c:	f000 faf0 	bl	8001180 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	48000800 	.word	0x48000800
 8000bb0:	48000400 	.word	0x48000400

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x8>
	...

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_MspInit+0x44>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <HAL_MspInit+0x44>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6193      	str	r3, [r2, #24]
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_MspInit+0x44>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_MspInit+0x44>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_MspInit+0x44>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_MspInit+0x44>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000

08000c08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_TIM_Base_MspInit+0x38>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d10b      	bne.n	8000c32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_TIM_Base_MspInit+0x3c>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <HAL_TIM_Base_MspInit+0x3c>)
 8000c20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c24:	6193      	str	r3, [r2, #24]
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <HAL_TIM_Base_MspInit+0x3c>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40012c00 	.word	0x40012c00
 8000c44:	40021000 	.word	0x40021000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f94a 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return 1;
 8000ca0:	2301      	movs	r3, #1
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <_kill>:

int _kill(int pid, int sig)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cb6:	f002 fe19 	bl	80038ec <__errno>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2216      	movs	r2, #22
 8000cbe:	601a      	str	r2, [r3, #0]
  return -1;
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <_exit>:

void _exit (int status)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ffe7 	bl	8000cac <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cde:	e7fe      	b.n	8000cde <_exit+0x12>

08000ce0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	e00a      	b.n	8000d08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cf2:	f3af 8000 	nop.w
 8000cf6:	4601      	mov	r1, r0
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60ba      	str	r2, [r7, #8]
 8000cfe:	b2ca      	uxtb	r2, r1
 8000d00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dbf0      	blt.n	8000cf2 <_read+0x12>
  }

  return len;
 8000d10:	687b      	ldr	r3, [r7, #4]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	60f8      	str	r0, [r7, #12]
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	e009      	b.n	8000d40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	1c5a      	adds	r2, r3, #1
 8000d30:	60ba      	str	r2, [r7, #8]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dbf1      	blt.n	8000d2c <_write+0x12>
  }
  return len;
 8000d48:	687b      	ldr	r3, [r7, #4]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_close>:

int _close(int file)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_isatty>:

int _isatty(int file)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <_sbrk+0x5c>)
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <_sbrk+0x60>)
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_sbrk+0x64>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <_sbrk+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d207      	bcs.n	8000dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dec:	f002 fd7e 	bl	80038ec <__errno>
 8000df0:	4603      	mov	r3, r0
 8000df2:	220c      	movs	r2, #12
 8000df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e009      	b.n	8000e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <_sbrk+0x64>)
 8000e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20010000 	.word	0x20010000
 8000e1c:	00000400 	.word	0x00000400
 8000e20:	200000f0 	.word	0x200000f0
 8000e24:	20000248 	.word	0x20000248

08000e28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SystemInit+0x20>)
 8000e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <SystemInit+0x20>)
 8000e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e84 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e50:	f7ff ffea 	bl	8000e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e56:	490d      	ldr	r1, [pc, #52]	; (8000e8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <LoopForever+0xe>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e6c:	4c0a      	ldr	r4, [pc, #40]	; (8000e98 <LoopForever+0x16>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f002 fd3d 	bl	80038f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e7e:	f7ff fbc5 	bl	800060c <main>

08000e82 <LoopForever>:

LoopForever:
    b LoopForever
 8000e82:	e7fe      	b.n	8000e82 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e84:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e8c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e90:	0800455c 	.word	0x0800455c
  ldr r2, =_sbss
 8000e94:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e98:	20000244 	.word	0x20000244

08000e9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC1_2_IRQHandler>
	...

08000ea0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_Init+0x28>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_Init+0x28>)
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 f931 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f000 f808 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebc:	f7ff fe80 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40022000 	.word	0x40022000

08000ecc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_InitTick+0x54>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x58>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f93b 	bl	8001166 <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00e      	b.n	8000f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d80a      	bhi.n	8000f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 f911 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <HAL_InitTick+0x5c>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000004 	.word	0x20000004
 8000f24:	2000000c 	.word	0x2000000c
 8000f28:	20000008 	.word	0x20000008

08000f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2000000c 	.word	0x2000000c
 8000f50:	200000f4 	.word	0x200000f4

08000f54 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	200000f4 	.word	0x200000f4

08000f6c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f74:	f7ff ffee 	bl	8000f54 <HAL_GetTick>
 8000f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d005      	beq.n	8000f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_Delay+0x44>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f92:	bf00      	nop
 8000f94:	f7ff ffde 	bl	8000f54 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d8f7      	bhi.n	8000f94 <HAL_Delay+0x28>
  {
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000000c 	.word	0x2000000c

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	; (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	; (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff8e 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff47 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff5c 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff8e 	bl	800106c <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5d 	bl	8001018 <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffb0 	bl	80010d4 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b087      	sub	sp, #28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118e:	e160      	b.n	8001452 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	2101      	movs	r1, #1
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	4013      	ands	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 8152 	beq.w	800144c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d005      	beq.n	80011c0 <HAL_GPIO_Init+0x40>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d130      	bne.n	8001222 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f6:	2201      	movs	r2, #1
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	f003 0201 	and.w	r2, r3, #1
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b03      	cmp	r3, #3
 800122c:	d017      	beq.n	800125e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d123      	bne.n	80012b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	220f      	movs	r2, #15
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	691a      	ldr	r2, [r3, #16]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	08da      	lsrs	r2, r3, #3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3208      	adds	r2, #8
 80012ac:	6939      	ldr	r1, [r7, #16]
 80012ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2203      	movs	r2, #3
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0203 	and.w	r2, r3, #3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 80ac 	beq.w	800144c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f4:	4b5e      	ldr	r3, [pc, #376]	; (8001470 <HAL_GPIO_Init+0x2f0>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a5d      	ldr	r2, [pc, #372]	; (8001470 <HAL_GPIO_Init+0x2f0>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b5b      	ldr	r3, [pc, #364]	; (8001470 <HAL_GPIO_Init+0x2f0>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800130c:	4a59      	ldr	r2, [pc, #356]	; (8001474 <HAL_GPIO_Init+0x2f4>)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	220f      	movs	r2, #15
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001336:	d025      	beq.n	8001384 <HAL_GPIO_Init+0x204>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a4f      	ldr	r2, [pc, #316]	; (8001478 <HAL_GPIO_Init+0x2f8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d01f      	beq.n	8001380 <HAL_GPIO_Init+0x200>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a4e      	ldr	r2, [pc, #312]	; (800147c <HAL_GPIO_Init+0x2fc>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d019      	beq.n	800137c <HAL_GPIO_Init+0x1fc>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a4d      	ldr	r2, [pc, #308]	; (8001480 <HAL_GPIO_Init+0x300>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d013      	beq.n	8001378 <HAL_GPIO_Init+0x1f8>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a4c      	ldr	r2, [pc, #304]	; (8001484 <HAL_GPIO_Init+0x304>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d00d      	beq.n	8001374 <HAL_GPIO_Init+0x1f4>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a4b      	ldr	r2, [pc, #300]	; (8001488 <HAL_GPIO_Init+0x308>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d007      	beq.n	8001370 <HAL_GPIO_Init+0x1f0>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a4a      	ldr	r2, [pc, #296]	; (800148c <HAL_GPIO_Init+0x30c>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d101      	bne.n	800136c <HAL_GPIO_Init+0x1ec>
 8001368:	2306      	movs	r3, #6
 800136a:	e00c      	b.n	8001386 <HAL_GPIO_Init+0x206>
 800136c:	2307      	movs	r3, #7
 800136e:	e00a      	b.n	8001386 <HAL_GPIO_Init+0x206>
 8001370:	2305      	movs	r3, #5
 8001372:	e008      	b.n	8001386 <HAL_GPIO_Init+0x206>
 8001374:	2304      	movs	r3, #4
 8001376:	e006      	b.n	8001386 <HAL_GPIO_Init+0x206>
 8001378:	2303      	movs	r3, #3
 800137a:	e004      	b.n	8001386 <HAL_GPIO_Init+0x206>
 800137c:	2302      	movs	r3, #2
 800137e:	e002      	b.n	8001386 <HAL_GPIO_Init+0x206>
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <HAL_GPIO_Init+0x206>
 8001384:	2300      	movs	r3, #0
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	f002 0203 	and.w	r2, r2, #3
 800138c:	0092      	lsls	r2, r2, #2
 800138e:	4093      	lsls	r3, r2
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001396:	4937      	ldr	r1, [pc, #220]	; (8001474 <HAL_GPIO_Init+0x2f4>)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a4:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <HAL_GPIO_Init+0x310>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013c8:	4a31      	ldr	r2, [pc, #196]	; (8001490 <HAL_GPIO_Init+0x310>)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ce:	4b30      	ldr	r3, [pc, #192]	; (8001490 <HAL_GPIO_Init+0x310>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013f2:	4a27      	ldr	r2, [pc, #156]	; (8001490 <HAL_GPIO_Init+0x310>)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f8:	4b25      	ldr	r3, [pc, #148]	; (8001490 <HAL_GPIO_Init+0x310>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800141c:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <HAL_GPIO_Init+0x310>)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_GPIO_Init+0x310>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <HAL_GPIO_Init+0x310>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3301      	adds	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	f47f ae97 	bne.w	8001190 <HAL_GPIO_Init+0x10>
  }
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40021000 	.word	0x40021000
 8001474:	40010000 	.word	0x40010000
 8001478:	48000400 	.word	0x48000400
 800147c:	48000800 	.word	0x48000800
 8001480:	48000c00 	.word	0x48000c00
 8001484:	48001000 	.word	0x48001000
 8001488:	48001400 	.word	0x48001400
 800148c:	48001800 	.word	0x48001800
 8001490:	40010400 	.word	0x40010400

08001494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014ac:	2301      	movs	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	e001      	b.n	80014b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
 80014d0:	4613      	mov	r3, r2
 80014d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d4:	787b      	ldrb	r3, [r7, #1]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001500:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001504:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001506:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800150a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	f001 b83a 	b.w	800258e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800151e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 816f 	beq.w	800180e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001530:	4bb5      	ldr	r3, [pc, #724]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	2b04      	cmp	r3, #4
 800153a:	d00c      	beq.n	8001556 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800153c:	4bb2      	ldr	r3, [pc, #712]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 030c 	and.w	r3, r3, #12
 8001544:	2b08      	cmp	r3, #8
 8001546:	d15c      	bne.n	8001602 <HAL_RCC_OscConfig+0x10e>
 8001548:	4baf      	ldr	r3, [pc, #700]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001554:	d155      	bne.n	8001602 <HAL_RCC_OscConfig+0x10e>
 8001556:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800155a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001562:	fa93 f3a3 	rbit	r3, r3
 8001566:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800156a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156e:	fab3 f383 	clz	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	095b      	lsrs	r3, r3, #5
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d102      	bne.n	8001588 <HAL_RCC_OscConfig+0x94>
 8001582:	4ba1      	ldr	r3, [pc, #644]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	e015      	b.n	80015b4 <HAL_RCC_OscConfig+0xc0>
 8001588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800158c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800159c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80015a4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80015a8:	fa93 f3a3 	rbit	r3, r3
 80015ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80015b0:	4b95      	ldr	r3, [pc, #596]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015b8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80015bc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80015c0:	fa92 f2a2 	rbit	r2, r2
 80015c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80015c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80015cc:	fab2 f282 	clz	r2, r2
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	f042 0220 	orr.w	r2, r2, #32
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	f002 021f 	and.w	r2, r2, #31
 80015dc:	2101      	movs	r1, #1
 80015de:	fa01 f202 	lsl.w	r2, r1, r2
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 8111 	beq.w	800180c <HAL_RCC_OscConfig+0x318>
 80015ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f040 8108 	bne.w	800180c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	f000 bfc6 	b.w	800258e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001606:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001612:	d106      	bne.n	8001622 <HAL_RCC_OscConfig+0x12e>
 8001614:	4b7c      	ldr	r3, [pc, #496]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a7b      	ldr	r2, [pc, #492]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 800161a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	e036      	b.n	8001690 <HAL_RCC_OscConfig+0x19c>
 8001622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001626:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x158>
 8001632:	4b75      	ldr	r3, [pc, #468]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a74      	ldr	r2, [pc, #464]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 8001638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	4b72      	ldr	r3, [pc, #456]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a71      	ldr	r2, [pc, #452]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 8001644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	e021      	b.n	8001690 <HAL_RCC_OscConfig+0x19c>
 800164c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001650:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x184>
 800165e:	4b6a      	ldr	r3, [pc, #424]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a69      	ldr	r2, [pc, #420]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 8001664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b67      	ldr	r3, [pc, #412]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a66      	ldr	r2, [pc, #408]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0x19c>
 8001678:	4b63      	ldr	r3, [pc, #396]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a62      	ldr	r2, [pc, #392]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b60      	ldr	r3, [pc, #384]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a5f      	ldr	r2, [pc, #380]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001694:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d059      	beq.n	8001754 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fc58 	bl	8000f54 <HAL_GetTick>
 80016a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016aa:	f7ff fc53 	bl	8000f54 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d902      	bls.n	80016c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	f000 bf67 	b.w	800258e <HAL_RCC_OscConfig+0x109a>
 80016c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80016cc:	fa93 f3a3 	rbit	r3, r3
 80016d0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80016d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d8:	fab3 f383 	clz	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d102      	bne.n	80016f2 <HAL_RCC_OscConfig+0x1fe>
 80016ec:	4b46      	ldr	r3, [pc, #280]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	e015      	b.n	800171e <HAL_RCC_OscConfig+0x22a>
 80016f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800170e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001712:	fa93 f3a3 	rbit	r3, r3
 8001716:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800171a:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001722:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001726:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800172a:	fa92 f2a2 	rbit	r2, r2
 800172e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001732:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001736:	fab2 f282 	clz	r2, r2
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	f042 0220 	orr.w	r2, r2, #32
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	f002 021f 	and.w	r2, r2, #31
 8001746:	2101      	movs	r1, #1
 8001748:	fa01 f202 	lsl.w	r2, r1, r2
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0ab      	beq.n	80016aa <HAL_RCC_OscConfig+0x1b6>
 8001752:	e05c      	b.n	800180e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fbfe 	bl	8000f54 <HAL_GetTick>
 8001758:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800175e:	f7ff fbf9 	bl	8000f54 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	; 0x64
 800176c:	d902      	bls.n	8001774 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	f000 bf0d 	b.w	800258e <HAL_RCC_OscConfig+0x109a>
 8001774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001778:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001788:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178c:	fab3 f383 	clz	r3, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b01      	cmp	r3, #1
 800179e:	d102      	bne.n	80017a6 <HAL_RCC_OscConfig+0x2b2>
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	e015      	b.n	80017d2 <HAL_RCC_OscConfig+0x2de>
 80017a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80017ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017be:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_RCC_OscConfig+0x314>)
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017d6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80017da:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80017de:	fa92 f2a2 	rbit	r2, r2
 80017e2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80017e6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80017ea:	fab2 f282 	clz	r2, r2
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f042 0220 	orr.w	r2, r2, #32
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f002 021f 	and.w	r2, r2, #31
 80017fa:	2101      	movs	r1, #1
 80017fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001800:	4013      	ands	r3, r2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ab      	bne.n	800175e <HAL_RCC_OscConfig+0x26a>
 8001806:	e002      	b.n	800180e <HAL_RCC_OscConfig+0x31a>
 8001808:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001812:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 817f 	beq.w	8001b22 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001824:	4ba7      	ldr	r3, [pc, #668]	; (8001ac4 <HAL_RCC_OscConfig+0x5d0>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00c      	beq.n	800184a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001830:	4ba4      	ldr	r3, [pc, #656]	; (8001ac4 <HAL_RCC_OscConfig+0x5d0>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b08      	cmp	r3, #8
 800183a:	d173      	bne.n	8001924 <HAL_RCC_OscConfig+0x430>
 800183c:	4ba1      	ldr	r3, [pc, #644]	; (8001ac4 <HAL_RCC_OscConfig+0x5d0>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001848:	d16c      	bne.n	8001924 <HAL_RCC_OscConfig+0x430>
 800184a:	2302      	movs	r3, #2
 800184c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001854:	fa93 f3a3 	rbit	r3, r3
 8001858:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800185c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	095b      	lsrs	r3, r3, #5
 8001868:	b2db      	uxtb	r3, r3
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d102      	bne.n	800187a <HAL_RCC_OscConfig+0x386>
 8001874:	4b93      	ldr	r3, [pc, #588]	; (8001ac4 <HAL_RCC_OscConfig+0x5d0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	e013      	b.n	80018a2 <HAL_RCC_OscConfig+0x3ae>
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800188c:	2302      	movs	r3, #2
 800188e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001892:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001896:	fa93 f3a3 	rbit	r3, r3
 800189a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800189e:	4b89      	ldr	r3, [pc, #548]	; (8001ac4 <HAL_RCC_OscConfig+0x5d0>)
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	2202      	movs	r2, #2
 80018a4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80018a8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80018ac:	fa92 f2a2 	rbit	r2, r2
 80018b0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80018b4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80018b8:	fab2 f282 	clz	r2, r2
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	f042 0220 	orr.w	r2, r2, #32
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	f002 021f 	and.w	r2, r2, #31
 80018c8:	2101      	movs	r1, #1
 80018ca:	fa01 f202 	lsl.w	r2, r1, r2
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00a      	beq.n	80018ea <HAL_RCC_OscConfig+0x3f6>
 80018d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d002      	beq.n	80018ea <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f000 be52 	b.w	800258e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	4b76      	ldr	r3, [pc, #472]	; (8001ac4 <HAL_RCC_OscConfig+0x5d0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	21f8      	movs	r1, #248	; 0xf8
 8001900:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001908:	fa91 f1a1 	rbit	r1, r1
 800190c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001910:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001914:	fab1 f181 	clz	r1, r1
 8001918:	b2c9      	uxtb	r1, r1
 800191a:	408b      	lsls	r3, r1
 800191c:	4969      	ldr	r1, [pc, #420]	; (8001ac4 <HAL_RCC_OscConfig+0x5d0>)
 800191e:	4313      	orrs	r3, r2
 8001920:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001922:	e0fe      	b.n	8001b22 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001928:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 8088 	beq.w	8001a46 <HAL_RCC_OscConfig+0x552>
 8001936:	2301      	movs	r3, #1
 8001938:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001948:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001956:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	461a      	mov	r2, r3
 800195e:	2301      	movs	r3, #1
 8001960:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff faf7 	bl	8000f54 <HAL_GetTick>
 8001966:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196a:	e00a      	b.n	8001982 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800196c:	f7ff faf2 	bl	8000f54 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d902      	bls.n	8001982 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	f000 be06 	b.w	800258e <HAL_RCC_OscConfig+0x109a>
 8001982:	2302      	movs	r3, #2
 8001984:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800198c:	fa93 f3a3 	rbit	r3, r3
 8001990:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001994:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d102      	bne.n	80019b2 <HAL_RCC_OscConfig+0x4be>
 80019ac:	4b45      	ldr	r3, [pc, #276]	; (8001ac4 <HAL_RCC_OscConfig+0x5d0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	e013      	b.n	80019da <HAL_RCC_OscConfig+0x4e6>
 80019b2:	2302      	movs	r3, #2
 80019b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80019bc:	fa93 f3a3 	rbit	r3, r3
 80019c0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80019c4:	2302      	movs	r3, #2
 80019c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80019ca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80019d6:	4b3b      	ldr	r3, [pc, #236]	; (8001ac4 <HAL_RCC_OscConfig+0x5d0>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	2202      	movs	r2, #2
 80019dc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80019e0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80019e4:	fa92 f2a2 	rbit	r2, r2
 80019e8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80019ec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80019f0:	fab2 f282 	clz	r2, r2
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	f042 0220 	orr.w	r2, r2, #32
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	f002 021f 	and.w	r2, r2, #31
 8001a00:	2101      	movs	r1, #1
 8001a02:	fa01 f202 	lsl.w	r2, r1, r2
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0af      	beq.n	800196c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_RCC_OscConfig+0x5d0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	21f8      	movs	r1, #248	; 0xf8
 8001a22:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001a2a:	fa91 f1a1 	rbit	r1, r1
 8001a2e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001a32:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a36:	fab1 f181 	clz	r1, r1
 8001a3a:	b2c9      	uxtb	r1, r1
 8001a3c:	408b      	lsls	r3, r1
 8001a3e:	4921      	ldr	r1, [pc, #132]	; (8001ac4 <HAL_RCC_OscConfig+0x5d0>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
 8001a44:	e06d      	b.n	8001b22 <HAL_RCC_OscConfig+0x62e>
 8001a46:	2301      	movs	r3, #1
 8001a48:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001a58:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2300      	movs	r3, #0
 8001a70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a72:	f7ff fa6f 	bl	8000f54 <HAL_GetTick>
 8001a76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fa6a 	bl	8000f54 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d902      	bls.n	8001a92 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	f000 bd7e 	b.w	800258e <HAL_RCC_OscConfig+0x109a>
 8001a92:	2302      	movs	r3, #2
 8001a94:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001aa4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5d4>
 8001abc:	4b01      	ldr	r3, [pc, #4]	; (8001ac4 <HAL_RCC_OscConfig+0x5d0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	e016      	b.n	8001af0 <HAL_RCC_OscConfig+0x5fc>
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001ada:	2302      	movs	r3, #2
 8001adc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ae0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001aec:	4bbf      	ldr	r3, [pc, #764]	; (8001dec <HAL_RCC_OscConfig+0x8f8>)
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	2202      	movs	r2, #2
 8001af2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001af6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001afa:	fa92 f2a2 	rbit	r2, r2
 8001afe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001b02:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b06:	fab2 f282 	clz	r2, r2
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	f042 0220 	orr.w	r2, r2, #32
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	f002 021f 	and.w	r2, r2, #31
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1ac      	bne.n	8001a7c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8113 	beq.w	8001d5e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d07c      	beq.n	8001c42 <HAL_RCC_OscConfig+0x74e>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001b5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5e:	fab3 f383 	clz	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	4ba2      	ldr	r3, [pc, #648]	; (8001df0 <HAL_RCC_OscConfig+0x8fc>)
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2301      	movs	r3, #1
 8001b70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b72:	f7ff f9ef 	bl	8000f54 <HAL_GetTick>
 8001b76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b7c:	f7ff f9ea 	bl	8000f54 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d902      	bls.n	8001b92 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	f000 bcfe 	b.w	800258e <HAL_RCC_OscConfig+0x109a>
 8001b92:	2302      	movs	r3, #2
 8001b94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b9c:	fa93 f2a3 	rbit	r2, r3
 8001ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bde:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	fa93 f2a3 	rbit	r2, r3
 8001be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001bf0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf2:	4b7e      	ldr	r3, [pc, #504]	; (8001dec <HAL_RCC_OscConfig+0x8f8>)
 8001bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bfe:	2102      	movs	r1, #2
 8001c00:	6019      	str	r1, [r3, #0]
 8001c02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	fa93 f1a3 	rbit	r1, r3
 8001c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c18:	6019      	str	r1, [r3, #0]
  return result;
 8001c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	2101      	movs	r1, #1
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d09d      	beq.n	8001b7c <HAL_RCC_OscConfig+0x688>
 8001c40:	e08d      	b.n	8001d5e <HAL_RCC_OscConfig+0x86a>
 8001c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c52:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c60:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c64:	601a      	str	r2, [r3, #0]
  return result;
 8001c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c6e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b5d      	ldr	r3, [pc, #372]	; (8001df0 <HAL_RCC_OscConfig+0x8fc>)
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2300      	movs	r3, #0
 8001c82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c84:	f7ff f966 	bl	8000f54 <HAL_GetTick>
 8001c88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8c:	e00a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c8e:	f7ff f961 	bl	8000f54 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d902      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	f000 bc75 	b.w	800258e <HAL_RCC_OscConfig+0x109a>
 8001ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001cac:	2202      	movs	r2, #2
 8001cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	fa93 f2a3 	rbit	r2, r3
 8001cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ccc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	fa93 f2a3 	rbit	r2, r3
 8001ce2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	fa93 f2a3 	rbit	r2, r3
 8001d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d0a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001d0e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_RCC_OscConfig+0x8f8>)
 8001d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d18:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d1c:	2102      	movs	r1, #2
 8001d1e:	6019      	str	r1, [r3, #0]
 8001d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d24:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	fa93 f1a3 	rbit	r1, r3
 8001d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d32:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d36:	6019      	str	r1, [r3, #0]
  return result;
 8001d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	2101      	movs	r1, #1
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d197      	bne.n	8001c8e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 81a5 	beq.w	80020be <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <HAL_RCC_OscConfig+0x8f8>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d116      	bne.n	8001db4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_RCC_OscConfig+0x8f8>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4a18      	ldr	r2, [pc, #96]	; (8001dec <HAL_RCC_OscConfig+0x8f8>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	61d3      	str	r3, [r2, #28]
 8001d92:	4b16      	ldr	r3, [pc, #88]	; (8001dec <HAL_RCC_OscConfig+0x8f8>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dac:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_RCC_OscConfig+0x900>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d121      	bne.n	8001e04 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_RCC_OscConfig+0x900>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <HAL_RCC_OscConfig+0x900>)
 8001dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f8c2 	bl	8000f54 <HAL_GetTick>
 8001dd0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd4:	e010      	b.n	8001df8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd6:	f7ff f8bd 	bl	8000f54 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d908      	bls.n	8001df8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e3d1      	b.n	800258e <HAL_RCC_OscConfig+0x109a>
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000
 8001df0:	10908120 	.word	0x10908120
 8001df4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	4b8d      	ldr	r3, [pc, #564]	; (8002030 <HAL_RCC_OscConfig+0xb3c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0e8      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d106      	bne.n	8001e22 <HAL_RCC_OscConfig+0x92e>
 8001e14:	4b87      	ldr	r3, [pc, #540]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4a86      	ldr	r2, [pc, #536]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6213      	str	r3, [r2, #32]
 8001e20:	e035      	b.n	8001e8e <HAL_RCC_OscConfig+0x99a>
 8001e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x958>
 8001e32:	4b80      	ldr	r3, [pc, #512]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a7f      	ldr	r2, [pc, #508]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6213      	str	r3, [r2, #32]
 8001e3e:	4b7d      	ldr	r3, [pc, #500]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a7c      	ldr	r2, [pc, #496]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	e020      	b.n	8001e8e <HAL_RCC_OscConfig+0x99a>
 8001e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d10c      	bne.n	8001e76 <HAL_RCC_OscConfig+0x982>
 8001e5c:	4b75      	ldr	r3, [pc, #468]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	4a74      	ldr	r2, [pc, #464]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	6213      	str	r3, [r2, #32]
 8001e68:	4b72      	ldr	r3, [pc, #456]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a71      	ldr	r2, [pc, #452]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6213      	str	r3, [r2, #32]
 8001e74:	e00b      	b.n	8001e8e <HAL_RCC_OscConfig+0x99a>
 8001e76:	4b6f      	ldr	r3, [pc, #444]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4a6e      	ldr	r2, [pc, #440]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6213      	str	r3, [r2, #32]
 8001e82:	4b6c      	ldr	r3, [pc, #432]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a6b      	ldr	r2, [pc, #428]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001e88:	f023 0304 	bic.w	r3, r3, #4
 8001e8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8081 	beq.w	8001fa2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea0:	f7ff f858 	bl	8000f54 <HAL_GetTick>
 8001ea4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea8:	e00b      	b.n	8001ec2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7ff f853 	bl	8000f54 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e365      	b.n	800258e <HAL_RCC_OscConfig+0x109a>
 8001ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001eca:	2202      	movs	r2, #2
 8001ecc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	fa93 f2a3 	rbit	r2, r3
 8001edc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001eee:	2202      	movs	r2, #2
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	fa93 f2a3 	rbit	r2, r3
 8001f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f04:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f08:	601a      	str	r2, [r3, #0]
  return result;
 8001f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001f12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d102      	bne.n	8001f2e <HAL_RCC_OscConfig+0xa3a>
 8001f28:	4b42      	ldr	r3, [pc, #264]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	e013      	b.n	8001f56 <HAL_RCC_OscConfig+0xa62>
 8001f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f32:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f36:	2202      	movs	r2, #2
 8001f38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	fa93 f2a3 	rbit	r2, r3
 8001f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	4b38      	ldr	r3, [pc, #224]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f5a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f5e:	2102      	movs	r1, #2
 8001f60:	6011      	str	r1, [r2, #0]
 8001f62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f66:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	fa92 f1a2 	rbit	r1, r2
 8001f70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f74:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001f78:	6011      	str	r1, [r2, #0]
  return result;
 8001f7a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f7e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	fab2 f282 	clz	r2, r2
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	f002 021f 	and.w	r2, r2, #31
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d084      	beq.n	8001eaa <HAL_RCC_OscConfig+0x9b6>
 8001fa0:	e083      	b.n	80020aa <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe ffd7 	bl	8000f54 <HAL_GetTick>
 8001fa6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fac:	f7fe ffd2 	bl	8000f54 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e2e4      	b.n	800258e <HAL_RCC_OscConfig+0x109a>
 8001fc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001fcc:	2202      	movs	r2, #2
 8001fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	fa93 f2a3 	rbit	r2, r3
 8001fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	fa93 f2a3 	rbit	r2, r3
 8002002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002006:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800200a:	601a      	str	r2, [r3, #0]
  return result;
 800200c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002010:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002014:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	095b      	lsrs	r3, r3, #5
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d106      	bne.n	8002038 <HAL_RCC_OscConfig+0xb44>
 800202a:	4b02      	ldr	r3, [pc, #8]	; (8002034 <HAL_RCC_OscConfig+0xb40>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	e017      	b.n	8002060 <HAL_RCC_OscConfig+0xb6c>
 8002030:	40007000 	.word	0x40007000
 8002034:	40021000 	.word	0x40021000
 8002038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002040:	2202      	movs	r2, #2
 8002042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002048:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	fa93 f2a3 	rbit	r2, r3
 8002052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002056:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	4bb3      	ldr	r3, [pc, #716]	; (800232c <HAL_RCC_OscConfig+0xe38>)
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002064:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002068:	2102      	movs	r1, #2
 800206a:	6011      	str	r1, [r2, #0]
 800206c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002070:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	fa92 f1a2 	rbit	r1, r2
 800207a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800207e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002082:	6011      	str	r1, [r2, #0]
  return result;
 8002084:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002088:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	fab2 f282 	clz	r2, r2
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	f002 021f 	and.w	r2, r2, #31
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f202 	lsl.w	r2, r1, r2
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d180      	bne.n	8001fac <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020aa:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b2:	4b9e      	ldr	r3, [pc, #632]	; (800232c <HAL_RCC_OscConfig+0xe38>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4a9d      	ldr	r2, [pc, #628]	; (800232c <HAL_RCC_OscConfig+0xe38>)
 80020b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020bc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 825e 	beq.w	800258c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d0:	4b96      	ldr	r3, [pc, #600]	; (800232c <HAL_RCC_OscConfig+0xe38>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	f000 821f 	beq.w	800251c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	f040 8170 	bne.w	80023d0 <HAL_RCC_OscConfig+0xedc>
 80020f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002102:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa93 f2a3 	rbit	r2, r3
 800210c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002110:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002114:	601a      	str	r2, [r3, #0]
  return result;
 8002116:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800211e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800212a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	461a      	mov	r2, r3
 8002132:	2300      	movs	r3, #0
 8002134:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7fe ff0d 	bl	8000f54 <HAL_GetTick>
 800213a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213e:	e009      	b.n	8002154 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002140:	f7fe ff08 	bl	8000f54 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e21c      	b.n	800258e <HAL_RCC_OscConfig+0x109a>
 8002154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002158:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800215c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002166:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	fa93 f2a3 	rbit	r2, r3
 8002170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002174:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002178:	601a      	str	r2, [r3, #0]
  return result;
 800217a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002182:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	b2db      	uxtb	r3, r3
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d102      	bne.n	800219e <HAL_RCC_OscConfig+0xcaa>
 8002198:	4b64      	ldr	r3, [pc, #400]	; (800232c <HAL_RCC_OscConfig+0xe38>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	e027      	b.n	80021ee <HAL_RCC_OscConfig+0xcfa>
 800219e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80021a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	fa93 f2a3 	rbit	r2, r3
 80021ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021be:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80021cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	fa93 f2a3 	rbit	r2, r3
 80021e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	4b50      	ldr	r3, [pc, #320]	; (800232c <HAL_RCC_OscConfig+0xe38>)
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021f2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021fa:	6011      	str	r1, [r2, #0]
 80021fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002200:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	fa92 f1a2 	rbit	r1, r2
 800220a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800220e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002212:	6011      	str	r1, [r2, #0]
  return result;
 8002214:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002218:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	fab2 f282 	clz	r2, r2
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	f042 0220 	orr.w	r2, r2, #32
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	f002 021f 	and.w	r2, r2, #31
 800222e:	2101      	movs	r1, #1
 8002230:	fa01 f202 	lsl.w	r2, r1, r2
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d182      	bne.n	8002140 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223a:	4b3c      	ldr	r3, [pc, #240]	; (800232c <HAL_RCC_OscConfig+0xe38>)
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	f023 020f 	bic.w	r2, r3, #15
 8002242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002246:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	4937      	ldr	r1, [pc, #220]	; (800232c <HAL_RCC_OscConfig+0xe38>)
 8002250:	4313      	orrs	r3, r2
 8002252:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002254:	4b35      	ldr	r3, [pc, #212]	; (800232c <HAL_RCC_OscConfig+0xe38>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800225c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002260:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6a19      	ldr	r1, [r3, #32]
 8002268:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	430b      	orrs	r3, r1
 8002276:	492d      	ldr	r1, [pc, #180]	; (800232c <HAL_RCC_OscConfig+0xe38>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
 800227c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002280:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	fa93 f2a3 	rbit	r2, r3
 8002298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80022a0:	601a      	str	r2, [r3, #0]
  return result;
 80022a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80022aa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	461a      	mov	r2, r3
 80022be:	2301      	movs	r3, #1
 80022c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe fe47 	bl	8000f54 <HAL_GetTick>
 80022c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ca:	e009      	b.n	80022e0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022cc:	f7fe fe42 	bl	8000f54 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e156      	b.n	800258e <HAL_RCC_OscConfig+0x109a>
 80022e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80022e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	fa93 f2a3 	rbit	r2, r3
 80022fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002300:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002304:	601a      	str	r2, [r3, #0]
  return result;
 8002306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800230e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	b2db      	uxtb	r3, r3
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b01      	cmp	r3, #1
 8002322:	d105      	bne.n	8002330 <HAL_RCC_OscConfig+0xe3c>
 8002324:	4b01      	ldr	r3, [pc, #4]	; (800232c <HAL_RCC_OscConfig+0xe38>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	e02a      	b.n	8002380 <HAL_RCC_OscConfig+0xe8c>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002334:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002338:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800233c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002342:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	fa93 f2a3 	rbit	r2, r3
 800234c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002350:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800235a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800235e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002368:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	fa93 f2a3 	rbit	r2, r3
 8002372:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002376:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	4b86      	ldr	r3, [pc, #536]	; (8002598 <HAL_RCC_OscConfig+0x10a4>)
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002384:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002388:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800238c:	6011      	str	r1, [r2, #0]
 800238e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002392:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	fa92 f1a2 	rbit	r1, r2
 800239c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023a0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80023a4:	6011      	str	r1, [r2, #0]
  return result;
 80023a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80023aa:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	fab2 f282 	clz	r2, r2
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	f042 0220 	orr.w	r2, r2, #32
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	f002 021f 	and.w	r2, r2, #31
 80023c0:	2101      	movs	r1, #1
 80023c2:	fa01 f202 	lsl.w	r2, r1, r2
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f43f af7f 	beq.w	80022cc <HAL_RCC_OscConfig+0xdd8>
 80023ce:	e0dd      	b.n	800258c <HAL_RCC_OscConfig+0x1098>
 80023d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80023d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	fa93 f2a3 	rbit	r2, r3
 80023ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023f4:	601a      	str	r2, [r3, #0]
  return result;
 80023f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023fa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023fe:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800240a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	461a      	mov	r2, r3
 8002412:	2300      	movs	r3, #0
 8002414:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7fe fd9d 	bl	8000f54 <HAL_GetTick>
 800241a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241e:	e009      	b.n	8002434 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002420:	f7fe fd98 	bl	8000f54 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0ac      	b.n	800258e <HAL_RCC_OscConfig+0x109a>
 8002434:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002438:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800243c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002446:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	fa93 f2a3 	rbit	r2, r3
 8002450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002454:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002458:	601a      	str	r2, [r3, #0]
  return result;
 800245a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800245e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002462:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d102      	bne.n	800247e <HAL_RCC_OscConfig+0xf8a>
 8002478:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCC_OscConfig+0x10a4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	e027      	b.n	80024ce <HAL_RCC_OscConfig+0xfda>
 800247e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002482:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002486:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800248a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002490:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f2a3 	rbit	r2, r3
 800249a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800249e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80024ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	fa93 f2a3 	rbit	r2, r3
 80024c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	4b33      	ldr	r3, [pc, #204]	; (8002598 <HAL_RCC_OscConfig+0x10a4>)
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024d2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80024d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024da:	6011      	str	r1, [r2, #0]
 80024dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024e0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	fa92 f1a2 	rbit	r1, r2
 80024ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024ee:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80024f2:	6011      	str	r1, [r2, #0]
  return result;
 80024f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024f8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	fab2 f282 	clz	r2, r2
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f042 0220 	orr.w	r2, r2, #32
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f002 021f 	and.w	r2, r2, #31
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d182      	bne.n	8002420 <HAL_RCC_OscConfig+0xf2c>
 800251a:	e037      	b.n	800258c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800251c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002520:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e02e      	b.n	800258e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_RCC_OscConfig+0x10a4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <HAL_RCC_OscConfig+0x10a4>)
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002540:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002544:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002548:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800254c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	429a      	cmp	r2, r3
 8002556:	d117      	bne.n	8002588 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002558:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800255c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002564:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800256c:	429a      	cmp	r2, r3
 800256e:	d10b      	bne.n	8002588 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002570:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002574:	f003 020f 	and.w	r2, r3, #15
 8002578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b09e      	sub	sp, #120	; 0x78
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e162      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b90      	ldr	r3, [pc, #576]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d910      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b8d      	ldr	r3, [pc, #564]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 0207 	bic.w	r2, r3, #7
 80025ca:	498b      	ldr	r1, [pc, #556]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b89      	ldr	r3, [pc, #548]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e14a      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f0:	4b82      	ldr	r3, [pc, #520]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	497f      	ldr	r1, [pc, #508]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 80dc 	beq.w	80027c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d13c      	bne.n	8002692 <HAL_RCC_ClockConfig+0xf6>
 8002618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d102      	bne.n	8002642 <HAL_RCC_ClockConfig+0xa6>
 800263c:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	e00f      	b.n	8002662 <HAL_RCC_ClockConfig+0xc6>
 8002642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002646:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	667b      	str	r3, [r7, #100]	; 0x64
 8002650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002654:	663b      	str	r3, [r7, #96]	; 0x60
 8002656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800265e:	4b67      	ldr	r3, [pc, #412]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002666:	65ba      	str	r2, [r7, #88]	; 0x58
 8002668:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800266a:	fa92 f2a2 	rbit	r2, r2
 800266e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002672:	fab2 f282 	clz	r2, r2
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	f042 0220 	orr.w	r2, r2, #32
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	f002 021f 	and.w	r2, r2, #31
 8002682:	2101      	movs	r1, #1
 8002684:	fa01 f202 	lsl.w	r2, r1, r2
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d17b      	bne.n	8002786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0f3      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d13c      	bne.n	8002714 <HAL_RCC_ClockConfig+0x178>
 800269a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d102      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x128>
 80026be:	4b4f      	ldr	r3, [pc, #316]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	e00f      	b.n	80026e4 <HAL_RCC_ClockConfig+0x148>
 80026c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	647b      	str	r3, [r7, #68]	; 0x44
 80026d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d6:	643b      	str	r3, [r7, #64]	; 0x40
 80026d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026e0:	4b46      	ldr	r3, [pc, #280]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80026ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026ec:	fa92 f2a2 	rbit	r2, r2
 80026f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026f4:	fab2 f282 	clz	r2, r2
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	f042 0220 	orr.w	r2, r2, #32
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	f002 021f 	and.w	r2, r2, #31
 8002704:	2101      	movs	r1, #1
 8002706:	fa01 f202 	lsl.w	r2, r1, r2
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d13a      	bne.n	8002786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0b2      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
 8002714:	2302      	movs	r3, #2
 8002716:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d102      	bne.n	800273c <HAL_RCC_ClockConfig+0x1a0>
 8002736:	4b31      	ldr	r3, [pc, #196]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	e00d      	b.n	8002758 <HAL_RCC_ClockConfig+0x1bc>
 800273c:	2302      	movs	r3, #2
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
 8002748:	2302      	movs	r3, #2
 800274a:	623b      	str	r3, [r7, #32]
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	4b29      	ldr	r3, [pc, #164]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	2202      	movs	r2, #2
 800275a:	61ba      	str	r2, [r7, #24]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	fa92 f2a2 	rbit	r2, r2
 8002762:	617a      	str	r2, [r7, #20]
  return result;
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	fab2 f282 	clz	r2, r2
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f042 0220 	orr.w	r2, r2, #32
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f002 021f 	and.w	r2, r2, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e079      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f023 0203 	bic.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	491a      	ldr	r1, [pc, #104]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002798:	f7fe fbdc 	bl	8000f54 <HAL_GetTick>
 800279c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7fe fbd8 	bl	8000f54 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e061      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 020c 	and.w	r2, r3, #12
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1eb      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d214      	bcs.n	8002800 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 0207 	bic.w	r2, r3, #7
 80027de:	4906      	ldr	r1, [pc, #24]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e040      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
 80027f8:	40022000 	.word	0x40022000
 80027fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280c:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_RCC_ClockConfig+0x2e8>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	491a      	ldr	r1, [pc, #104]	; (8002884 <HAL_RCC_ClockConfig+0x2e8>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800282a:	4b16      	ldr	r3, [pc, #88]	; (8002884 <HAL_RCC_ClockConfig+0x2e8>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4912      	ldr	r1, [pc, #72]	; (8002884 <HAL_RCC_ClockConfig+0x2e8>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800283e:	f000 f829 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002842:	4601      	mov	r1, r0
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_RCC_ClockConfig+0x2e8>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800284c:	22f0      	movs	r2, #240	; 0xf0
 800284e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	fa92 f2a2 	rbit	r2, r2
 8002856:	60fa      	str	r2, [r7, #12]
  return result;
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	fab2 f282 	clz	r2, r2
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	40d3      	lsrs	r3, r2
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x2ec>)
 8002864:	5cd3      	ldrb	r3, [r2, r3]
 8002866:	fa21 f303 	lsr.w	r3, r1, r3
 800286a:	4a08      	ldr	r2, [pc, #32]	; (800288c <HAL_RCC_ClockConfig+0x2f0>)
 800286c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <HAL_RCC_ClockConfig+0x2f4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fb2a 	bl	8000ecc <HAL_InitTick>
  
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3778      	adds	r7, #120	; 0x78
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	08004444 	.word	0x08004444
 800288c:	20000004 	.word	0x20000004
 8002890:	20000008 	.word	0x20000008

08002894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b08b      	sub	sp, #44	; 0x2c
 8002898:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028ae:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d002      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x30>
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d003      	beq.n	80028ca <HAL_RCC_GetSysClockFreq+0x36>
 80028c2:	e03f      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c4:	4b25      	ldr	r3, [pc, #148]	; (800295c <HAL_RCC_GetSysClockFreq+0xc8>)
 80028c6:	623b      	str	r3, [r7, #32]
      break;
 80028c8:	e03f      	b.n	800294a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80028d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	fa92 f2a2 	rbit	r2, r2
 80028dc:	607a      	str	r2, [r7, #4]
  return result;
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	fab2 f282 	clz	r2, r2
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	40d3      	lsrs	r3, r2
 80028e8:	4a1d      	ldr	r2, [pc, #116]	; (8002960 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80028ee:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	220f      	movs	r2, #15
 80028f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	fa92 f2a2 	rbit	r2, r2
 8002900:	60fa      	str	r2, [r7, #12]
  return result;
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	fab2 f282 	clz	r2, r2
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	40d3      	lsrs	r3, r2
 800290c:	4a15      	ldr	r2, [pc, #84]	; (8002964 <HAL_RCC_GetSysClockFreq+0xd0>)
 800290e:	5cd3      	ldrb	r3, [r2, r3]
 8002910:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800291c:	4a0f      	ldr	r2, [pc, #60]	; (800295c <HAL_RCC_GetSysClockFreq+0xc8>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	fbb2 f2f3 	udiv	r2, r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	e007      	b.n	800293e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800292e:	4a0b      	ldr	r2, [pc, #44]	; (800295c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	fbb2 f2f3 	udiv	r2, r2, r3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	fb02 f303 	mul.w	r3, r2, r3
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	623b      	str	r3, [r7, #32]
      break;
 8002942:	e002      	b.n	800294a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002946:	623b      	str	r3, [r7, #32]
      break;
 8002948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800294a:	6a3b      	ldr	r3, [r7, #32]
}
 800294c:	4618      	mov	r0, r3
 800294e:	372c      	adds	r7, #44	; 0x2c
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	40021000 	.word	0x40021000
 800295c:	007a1200 	.word	0x007a1200
 8002960:	08004454 	.word	0x08004454
 8002964:	08004464 	.word	0x08004464

08002968 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b092      	sub	sp, #72	; 0x48
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002978:	2300      	movs	r3, #0
 800297a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80d4 	beq.w	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298c:	4b4e      	ldr	r3, [pc, #312]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10e      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002998:	4b4b      	ldr	r3, [pc, #300]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	4a4a      	ldr	r2, [pc, #296]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a2:	61d3      	str	r3, [r2, #28]
 80029a4:	4b48      	ldr	r3, [pc, #288]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	4b45      	ldr	r3, [pc, #276]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d118      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c2:	4b42      	ldr	r3, [pc, #264]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a41      	ldr	r2, [pc, #260]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fac1 	bl	8000f54 <HAL_GetTick>
 80029d2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	e008      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d6:	f7fe fabd 	bl	8000f54 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b64      	cmp	r3, #100	; 0x64
 80029e2:	d901      	bls.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e1d6      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	4b38      	ldr	r3, [pc, #224]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029f4:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8084 	beq.w	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d07c      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a14:	4b2c      	ldr	r3, [pc, #176]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2301      	movs	r3, #1
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	461a      	mov	r2, r3
 8002a62:	2300      	movs	r3, #0
 8002a64:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a66:	4a18      	ldr	r2, [pc, #96]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d04b      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7fe fa6d 	bl	8000f54 <HAL_GetTick>
 8002a7a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7fe fa69 	bl	8000f54 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e180      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a94:	2302      	movs	r3, #2
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	623b      	str	r3, [r7, #32]
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	61fb      	str	r3, [r7, #28]
  return result;
 8002aac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	095b      	lsrs	r3, r3, #5
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d108      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ac2:	4b01      	ldr	r3, [pc, #4]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	e00d      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	10908100 	.word	0x10908100
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	4b9a      	ldr	r3, [pc, #616]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	613a      	str	r2, [r7, #16]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	fa92 f2a2 	rbit	r2, r2
 8002aee:	60fa      	str	r2, [r7, #12]
  return result;
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	fab2 f282 	clz	r2, r2
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	f002 021f 	and.w	r2, r2, #31
 8002b02:	2101      	movs	r1, #1
 8002b04:	fa01 f202 	lsl.w	r2, r1, r2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0b7      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b0e:	4b8f      	ldr	r3, [pc, #572]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	498c      	ldr	r1, [pc, #560]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d105      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b28:	4b88      	ldr	r3, [pc, #544]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	4a87      	ldr	r2, [pc, #540]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b40:	4b82      	ldr	r3, [pc, #520]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f023 0203 	bic.w	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	497f      	ldr	r1, [pc, #508]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d008      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b5e:	4b7b      	ldr	r3, [pc, #492]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4978      	ldr	r1, [pc, #480]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b7c:	4b73      	ldr	r3, [pc, #460]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	4970      	ldr	r1, [pc, #448]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b9a:	4b6c      	ldr	r3, [pc, #432]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f023 0210 	bic.w	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	4969      	ldr	r1, [pc, #420]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002bb8:	4b64      	ldr	r3, [pc, #400]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	4961      	ldr	r1, [pc, #388]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bd6:	4b5d      	ldr	r3, [pc, #372]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f023 0220 	bic.w	r2, r3, #32
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	495a      	ldr	r1, [pc, #360]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bf4:	4b55      	ldr	r3, [pc, #340]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	4952      	ldr	r1, [pc, #328]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c12:	4b4e      	ldr	r3, [pc, #312]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	494b      	ldr	r1, [pc, #300]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c30:	4b46      	ldr	r3, [pc, #280]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	4943      	ldr	r1, [pc, #268]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c4e:	4b3f      	ldr	r3, [pc, #252]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	493c      	ldr	r1, [pc, #240]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c6c:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	4934      	ldr	r1, [pc, #208]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c8a:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	492d      	ldr	r1, [pc, #180]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ca8:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb4:	4925      	ldr	r1, [pc, #148]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002cc6:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	491e      	ldr	r1, [pc, #120]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002ce4:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	4916      	ldr	r1, [pc, #88]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d008      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	490f      	ldr	r1, [pc, #60]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d20:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2c:	4907      	ldr	r1, [pc, #28]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00c      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d3e:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	e002      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d52:	4913      	ldr	r1, [pc, #76]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002d64:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d70:	490b      	ldr	r1, [pc, #44]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8e:	4904      	ldr	r1, [pc, #16]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3748      	adds	r7, #72	; 0x48
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000

08002da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e049      	b.n	8002e4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fd ff1c 	bl	8000c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3304      	adds	r3, #4
 8002de0:	4619      	mov	r1, r3
 8002de2:	4610      	mov	r0, r2
 8002de4:	f000 f968 	bl	80030b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d001      	beq.n	8002e6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e047      	b.n	8002efc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a23      	ldr	r2, [pc, #140]	; (8002f08 <HAL_TIM_Base_Start+0xb4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01d      	beq.n	8002eba <HAL_TIM_Base_Start+0x66>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e86:	d018      	beq.n	8002eba <HAL_TIM_Base_Start+0x66>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <HAL_TIM_Base_Start+0xb8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <HAL_TIM_Base_Start+0x66>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1e      	ldr	r2, [pc, #120]	; (8002f10 <HAL_TIM_Base_Start+0xbc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00e      	beq.n	8002eba <HAL_TIM_Base_Start+0x66>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1c      	ldr	r2, [pc, #112]	; (8002f14 <HAL_TIM_Base_Start+0xc0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d009      	beq.n	8002eba <HAL_TIM_Base_Start+0x66>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1b      	ldr	r2, [pc, #108]	; (8002f18 <HAL_TIM_Base_Start+0xc4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <HAL_TIM_Base_Start+0x66>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <HAL_TIM_Base_Start+0xc8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d115      	bne.n	8002ee6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <HAL_TIM_Base_Start+0xcc>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b06      	cmp	r3, #6
 8002eca:	d015      	beq.n	8002ef8 <HAL_TIM_Base_Start+0xa4>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed2:	d011      	beq.n	8002ef8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee4:	e008      	b.n	8002ef8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e000      	b.n	8002efa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40012c00 	.word	0x40012c00
 8002f0c:	40000400 	.word	0x40000400
 8002f10:	40000800 	.word	0x40000800
 8002f14:	40013400 	.word	0x40013400
 8002f18:	40014000 	.word	0x40014000
 8002f1c:	40015000 	.word	0x40015000
 8002f20:	00010007 	.word	0x00010007

08002f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_TIM_ConfigClockSource+0x1c>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e0b6      	b.n	80030ae <HAL_TIM_ConfigClockSource+0x18a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f7c:	d03e      	beq.n	8002ffc <HAL_TIM_ConfigClockSource+0xd8>
 8002f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f82:	f200 8087 	bhi.w	8003094 <HAL_TIM_ConfigClockSource+0x170>
 8002f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8a:	f000 8086 	beq.w	800309a <HAL_TIM_ConfigClockSource+0x176>
 8002f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f92:	d87f      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x170>
 8002f94:	2b70      	cmp	r3, #112	; 0x70
 8002f96:	d01a      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0xaa>
 8002f98:	2b70      	cmp	r3, #112	; 0x70
 8002f9a:	d87b      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x170>
 8002f9c:	2b60      	cmp	r3, #96	; 0x60
 8002f9e:	d050      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x11e>
 8002fa0:	2b60      	cmp	r3, #96	; 0x60
 8002fa2:	d877      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x170>
 8002fa4:	2b50      	cmp	r3, #80	; 0x50
 8002fa6:	d03c      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0xfe>
 8002fa8:	2b50      	cmp	r3, #80	; 0x50
 8002faa:	d873      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x170>
 8002fac:	2b40      	cmp	r3, #64	; 0x40
 8002fae:	d058      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x13e>
 8002fb0:	2b40      	cmp	r3, #64	; 0x40
 8002fb2:	d86f      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x170>
 8002fb4:	2b30      	cmp	r3, #48	; 0x30
 8002fb6:	d064      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x15e>
 8002fb8:	2b30      	cmp	r3, #48	; 0x30
 8002fba:	d86b      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x170>
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d060      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x15e>
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d867      	bhi.n	8003094 <HAL_TIM_ConfigClockSource+0x170>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d05c      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x15e>
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d05a      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x15e>
 8002fcc:	e062      	b.n	8003094 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fde:	f000 f983 	bl	80032e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	609a      	str	r2, [r3, #8]
      break;
 8002ffa:	e04f      	b.n	800309c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800300c:	f000 f96c 	bl	80032e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800301e:	609a      	str	r2, [r3, #8]
      break;
 8003020:	e03c      	b.n	800309c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800302e:	461a      	mov	r2, r3
 8003030:	f000 f8e0 	bl	80031f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2150      	movs	r1, #80	; 0x50
 800303a:	4618      	mov	r0, r3
 800303c:	f000 f939 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8003040:	e02c      	b.n	800309c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800304e:	461a      	mov	r2, r3
 8003050:	f000 f8ff 	bl	8003252 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2160      	movs	r1, #96	; 0x60
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f929 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8003060:	e01c      	b.n	800309c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800306e:	461a      	mov	r2, r3
 8003070:	f000 f8c0 	bl	80031f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2140      	movs	r1, #64	; 0x40
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f919 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8003080:	e00c      	b.n	800309c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f000 f910 	bl	80032b2 <TIM_ITRx_SetConfig>
      break;
 8003092:	e003      	b.n	800309c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      break;
 8003098:	e000      	b.n	800309c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800309a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a42      	ldr	r2, [pc, #264]	; (80031d4 <TIM_Base_SetConfig+0x11c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d013      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d6:	d00f      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a3f      	ldr	r2, [pc, #252]	; (80031d8 <TIM_Base_SetConfig+0x120>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00b      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a3e      	ldr	r2, [pc, #248]	; (80031dc <TIM_Base_SetConfig+0x124>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d007      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a3d      	ldr	r2, [pc, #244]	; (80031e0 <TIM_Base_SetConfig+0x128>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d003      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a3c      	ldr	r2, [pc, #240]	; (80031e4 <TIM_Base_SetConfig+0x12c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d108      	bne.n	800310a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a31      	ldr	r2, [pc, #196]	; (80031d4 <TIM_Base_SetConfig+0x11c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01f      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003118:	d01b      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a2e      	ldr	r2, [pc, #184]	; (80031d8 <TIM_Base_SetConfig+0x120>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d017      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a2d      	ldr	r2, [pc, #180]	; (80031dc <TIM_Base_SetConfig+0x124>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a2c      	ldr	r2, [pc, #176]	; (80031e0 <TIM_Base_SetConfig+0x128>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00f      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a2c      	ldr	r2, [pc, #176]	; (80031e8 <TIM_Base_SetConfig+0x130>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00b      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a2b      	ldr	r2, [pc, #172]	; (80031ec <TIM_Base_SetConfig+0x134>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a2a      	ldr	r2, [pc, #168]	; (80031f0 <TIM_Base_SetConfig+0x138>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d003      	beq.n	8003152 <TIM_Base_SetConfig+0x9a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a25      	ldr	r2, [pc, #148]	; (80031e4 <TIM_Base_SetConfig+0x12c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d108      	bne.n	8003164 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a12      	ldr	r2, [pc, #72]	; (80031d4 <TIM_Base_SetConfig+0x11c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d013      	beq.n	80031b8 <TIM_Base_SetConfig+0x100>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <TIM_Base_SetConfig+0x128>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00f      	beq.n	80031b8 <TIM_Base_SetConfig+0x100>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a13      	ldr	r2, [pc, #76]	; (80031e8 <TIM_Base_SetConfig+0x130>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00b      	beq.n	80031b8 <TIM_Base_SetConfig+0x100>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a12      	ldr	r2, [pc, #72]	; (80031ec <TIM_Base_SetConfig+0x134>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d007      	beq.n	80031b8 <TIM_Base_SetConfig+0x100>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a11      	ldr	r2, [pc, #68]	; (80031f0 <TIM_Base_SetConfig+0x138>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <TIM_Base_SetConfig+0x100>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <TIM_Base_SetConfig+0x12c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d103      	bne.n	80031c0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	615a      	str	r2, [r3, #20]
}
 80031c6:	bf00      	nop
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40012c00 	.word	0x40012c00
 80031d8:	40000400 	.word	0x40000400
 80031dc:	40000800 	.word	0x40000800
 80031e0:	40013400 	.word	0x40013400
 80031e4:	40015000 	.word	0x40015000
 80031e8:	40014000 	.word	0x40014000
 80031ec:	40014400 	.word	0x40014400
 80031f0:	40014800 	.word	0x40014800

080031f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	f023 0201 	bic.w	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800321e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f023 030a 	bic.w	r3, r3, #10
 8003230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4313      	orrs	r3, r2
 8003238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003252:	b480      	push	{r7}
 8003254:	b087      	sub	sp, #28
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f023 0210 	bic.w	r2, r3, #16
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800327c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	031b      	lsls	r3, r3, #12
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800328e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	621a      	str	r2, [r3, #32]
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b085      	sub	sp, #20
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f043 0307 	orr.w	r3, r3, #7
 80032d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	609a      	str	r2, [r3, #8]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	021a      	lsls	r2, r3, #8
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	431a      	orrs	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4313      	orrs	r3, r2
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	609a      	str	r2, [r3, #8]
}
 800331c:	bf00      	nop
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800333c:	2302      	movs	r3, #2
 800333e:	e06d      	b.n	800341c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a30      	ldr	r2, [pc, #192]	; (8003428 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a2f      	ldr	r2, [pc, #188]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a2d      	ldr	r2, [pc, #180]	; (8003430 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d108      	bne.n	8003390 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003384:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d01d      	beq.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033bc:	d018      	beq.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1a      	ldr	r2, [pc, #104]	; (8003438 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00e      	beq.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a15      	ldr	r2, [pc, #84]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d009      	beq.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a16      	ldr	r2, [pc, #88]	; (800343c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d004      	beq.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a11      	ldr	r2, [pc, #68]	; (8003430 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d10c      	bne.n	800340a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40012c00 	.word	0x40012c00
 800342c:	40013400 	.word	0x40013400
 8003430:	40015000 	.word	0x40015000
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800
 800343c:	40014000 	.word	0x40014000

08003440 <malloc>:
 8003440:	4b02      	ldr	r3, [pc, #8]	; (800344c <malloc+0xc>)
 8003442:	4601      	mov	r1, r0
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	f000 b823 	b.w	8003490 <_malloc_r>
 800344a:	bf00      	nop
 800344c:	20000068 	.word	0x20000068

08003450 <sbrk_aligned>:
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	4e0e      	ldr	r6, [pc, #56]	; (800348c <sbrk_aligned+0x3c>)
 8003454:	460c      	mov	r4, r1
 8003456:	6831      	ldr	r1, [r6, #0]
 8003458:	4605      	mov	r5, r0
 800345a:	b911      	cbnz	r1, 8003462 <sbrk_aligned+0x12>
 800345c:	f000 fa24 	bl	80038a8 <_sbrk_r>
 8003460:	6030      	str	r0, [r6, #0]
 8003462:	4621      	mov	r1, r4
 8003464:	4628      	mov	r0, r5
 8003466:	f000 fa1f 	bl	80038a8 <_sbrk_r>
 800346a:	1c43      	adds	r3, r0, #1
 800346c:	d00a      	beq.n	8003484 <sbrk_aligned+0x34>
 800346e:	1cc4      	adds	r4, r0, #3
 8003470:	f024 0403 	bic.w	r4, r4, #3
 8003474:	42a0      	cmp	r0, r4
 8003476:	d007      	beq.n	8003488 <sbrk_aligned+0x38>
 8003478:	1a21      	subs	r1, r4, r0
 800347a:	4628      	mov	r0, r5
 800347c:	f000 fa14 	bl	80038a8 <_sbrk_r>
 8003480:	3001      	adds	r0, #1
 8003482:	d101      	bne.n	8003488 <sbrk_aligned+0x38>
 8003484:	f04f 34ff 	mov.w	r4, #4294967295
 8003488:	4620      	mov	r0, r4
 800348a:	bd70      	pop	{r4, r5, r6, pc}
 800348c:	200000fc 	.word	0x200000fc

08003490 <_malloc_r>:
 8003490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003494:	1ccd      	adds	r5, r1, #3
 8003496:	f025 0503 	bic.w	r5, r5, #3
 800349a:	3508      	adds	r5, #8
 800349c:	2d0c      	cmp	r5, #12
 800349e:	bf38      	it	cc
 80034a0:	250c      	movcc	r5, #12
 80034a2:	2d00      	cmp	r5, #0
 80034a4:	4607      	mov	r7, r0
 80034a6:	db01      	blt.n	80034ac <_malloc_r+0x1c>
 80034a8:	42a9      	cmp	r1, r5
 80034aa:	d905      	bls.n	80034b8 <_malloc_r+0x28>
 80034ac:	230c      	movs	r3, #12
 80034ae:	603b      	str	r3, [r7, #0]
 80034b0:	2600      	movs	r6, #0
 80034b2:	4630      	mov	r0, r6
 80034b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800358c <_malloc_r+0xfc>
 80034bc:	f000 f868 	bl	8003590 <__malloc_lock>
 80034c0:	f8d8 3000 	ldr.w	r3, [r8]
 80034c4:	461c      	mov	r4, r3
 80034c6:	bb5c      	cbnz	r4, 8003520 <_malloc_r+0x90>
 80034c8:	4629      	mov	r1, r5
 80034ca:	4638      	mov	r0, r7
 80034cc:	f7ff ffc0 	bl	8003450 <sbrk_aligned>
 80034d0:	1c43      	adds	r3, r0, #1
 80034d2:	4604      	mov	r4, r0
 80034d4:	d155      	bne.n	8003582 <_malloc_r+0xf2>
 80034d6:	f8d8 4000 	ldr.w	r4, [r8]
 80034da:	4626      	mov	r6, r4
 80034dc:	2e00      	cmp	r6, #0
 80034de:	d145      	bne.n	800356c <_malloc_r+0xdc>
 80034e0:	2c00      	cmp	r4, #0
 80034e2:	d048      	beq.n	8003576 <_malloc_r+0xe6>
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	4631      	mov	r1, r6
 80034e8:	4638      	mov	r0, r7
 80034ea:	eb04 0903 	add.w	r9, r4, r3
 80034ee:	f000 f9db 	bl	80038a8 <_sbrk_r>
 80034f2:	4581      	cmp	r9, r0
 80034f4:	d13f      	bne.n	8003576 <_malloc_r+0xe6>
 80034f6:	6821      	ldr	r1, [r4, #0]
 80034f8:	1a6d      	subs	r5, r5, r1
 80034fa:	4629      	mov	r1, r5
 80034fc:	4638      	mov	r0, r7
 80034fe:	f7ff ffa7 	bl	8003450 <sbrk_aligned>
 8003502:	3001      	adds	r0, #1
 8003504:	d037      	beq.n	8003576 <_malloc_r+0xe6>
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	442b      	add	r3, r5
 800350a:	6023      	str	r3, [r4, #0]
 800350c:	f8d8 3000 	ldr.w	r3, [r8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d038      	beq.n	8003586 <_malloc_r+0xf6>
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	42a2      	cmp	r2, r4
 8003518:	d12b      	bne.n	8003572 <_malloc_r+0xe2>
 800351a:	2200      	movs	r2, #0
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	e00f      	b.n	8003540 <_malloc_r+0xb0>
 8003520:	6822      	ldr	r2, [r4, #0]
 8003522:	1b52      	subs	r2, r2, r5
 8003524:	d41f      	bmi.n	8003566 <_malloc_r+0xd6>
 8003526:	2a0b      	cmp	r2, #11
 8003528:	d917      	bls.n	800355a <_malloc_r+0xca>
 800352a:	1961      	adds	r1, r4, r5
 800352c:	42a3      	cmp	r3, r4
 800352e:	6025      	str	r5, [r4, #0]
 8003530:	bf18      	it	ne
 8003532:	6059      	strne	r1, [r3, #4]
 8003534:	6863      	ldr	r3, [r4, #4]
 8003536:	bf08      	it	eq
 8003538:	f8c8 1000 	streq.w	r1, [r8]
 800353c:	5162      	str	r2, [r4, r5]
 800353e:	604b      	str	r3, [r1, #4]
 8003540:	4638      	mov	r0, r7
 8003542:	f104 060b 	add.w	r6, r4, #11
 8003546:	f000 f829 	bl	800359c <__malloc_unlock>
 800354a:	f026 0607 	bic.w	r6, r6, #7
 800354e:	1d23      	adds	r3, r4, #4
 8003550:	1af2      	subs	r2, r6, r3
 8003552:	d0ae      	beq.n	80034b2 <_malloc_r+0x22>
 8003554:	1b9b      	subs	r3, r3, r6
 8003556:	50a3      	str	r3, [r4, r2]
 8003558:	e7ab      	b.n	80034b2 <_malloc_r+0x22>
 800355a:	42a3      	cmp	r3, r4
 800355c:	6862      	ldr	r2, [r4, #4]
 800355e:	d1dd      	bne.n	800351c <_malloc_r+0x8c>
 8003560:	f8c8 2000 	str.w	r2, [r8]
 8003564:	e7ec      	b.n	8003540 <_malloc_r+0xb0>
 8003566:	4623      	mov	r3, r4
 8003568:	6864      	ldr	r4, [r4, #4]
 800356a:	e7ac      	b.n	80034c6 <_malloc_r+0x36>
 800356c:	4634      	mov	r4, r6
 800356e:	6876      	ldr	r6, [r6, #4]
 8003570:	e7b4      	b.n	80034dc <_malloc_r+0x4c>
 8003572:	4613      	mov	r3, r2
 8003574:	e7cc      	b.n	8003510 <_malloc_r+0x80>
 8003576:	230c      	movs	r3, #12
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	4638      	mov	r0, r7
 800357c:	f000 f80e 	bl	800359c <__malloc_unlock>
 8003580:	e797      	b.n	80034b2 <_malloc_r+0x22>
 8003582:	6025      	str	r5, [r4, #0]
 8003584:	e7dc      	b.n	8003540 <_malloc_r+0xb0>
 8003586:	605b      	str	r3, [r3, #4]
 8003588:	deff      	udf	#255	; 0xff
 800358a:	bf00      	nop
 800358c:	200000f8 	.word	0x200000f8

08003590 <__malloc_lock>:
 8003590:	4801      	ldr	r0, [pc, #4]	; (8003598 <__malloc_lock+0x8>)
 8003592:	f000 b9d6 	b.w	8003942 <__retarget_lock_acquire_recursive>
 8003596:	bf00      	nop
 8003598:	20000240 	.word	0x20000240

0800359c <__malloc_unlock>:
 800359c:	4801      	ldr	r0, [pc, #4]	; (80035a4 <__malloc_unlock+0x8>)
 800359e:	f000 b9d1 	b.w	8003944 <__retarget_lock_release_recursive>
 80035a2:	bf00      	nop
 80035a4:	20000240 	.word	0x20000240

080035a8 <rand>:
 80035a8:	4b16      	ldr	r3, [pc, #88]	; (8003604 <rand+0x5c>)
 80035aa:	b510      	push	{r4, lr}
 80035ac:	681c      	ldr	r4, [r3, #0]
 80035ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035b0:	b9b3      	cbnz	r3, 80035e0 <rand+0x38>
 80035b2:	2018      	movs	r0, #24
 80035b4:	f7ff ff44 	bl	8003440 <malloc>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6320      	str	r0, [r4, #48]	; 0x30
 80035bc:	b920      	cbnz	r0, 80035c8 <rand+0x20>
 80035be:	4b12      	ldr	r3, [pc, #72]	; (8003608 <rand+0x60>)
 80035c0:	4812      	ldr	r0, [pc, #72]	; (800360c <rand+0x64>)
 80035c2:	2152      	movs	r1, #82	; 0x52
 80035c4:	f000 f9c0 	bl	8003948 <__assert_func>
 80035c8:	4911      	ldr	r1, [pc, #68]	; (8003610 <rand+0x68>)
 80035ca:	4b12      	ldr	r3, [pc, #72]	; (8003614 <rand+0x6c>)
 80035cc:	e9c0 1300 	strd	r1, r3, [r0]
 80035d0:	4b11      	ldr	r3, [pc, #68]	; (8003618 <rand+0x70>)
 80035d2:	6083      	str	r3, [r0, #8]
 80035d4:	230b      	movs	r3, #11
 80035d6:	8183      	strh	r3, [r0, #12]
 80035d8:	2100      	movs	r1, #0
 80035da:	2001      	movs	r0, #1
 80035dc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80035e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80035e2:	480e      	ldr	r0, [pc, #56]	; (800361c <rand+0x74>)
 80035e4:	690b      	ldr	r3, [r1, #16]
 80035e6:	694c      	ldr	r4, [r1, #20]
 80035e8:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <rand+0x78>)
 80035ea:	4358      	muls	r0, r3
 80035ec:	fb02 0004 	mla	r0, r2, r4, r0
 80035f0:	fba3 3202 	umull	r3, r2, r3, r2
 80035f4:	3301      	adds	r3, #1
 80035f6:	eb40 0002 	adc.w	r0, r0, r2
 80035fa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80035fe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003602:	bd10      	pop	{r4, pc}
 8003604:	20000068 	.word	0x20000068
 8003608:	08004474 	.word	0x08004474
 800360c:	0800448b 	.word	0x0800448b
 8003610:	abcd330e 	.word	0xabcd330e
 8003614:	e66d1234 	.word	0xe66d1234
 8003618:	0005deec 	.word	0x0005deec
 800361c:	5851f42d 	.word	0x5851f42d
 8003620:	4c957f2d 	.word	0x4c957f2d

08003624 <std>:
 8003624:	2300      	movs	r3, #0
 8003626:	b510      	push	{r4, lr}
 8003628:	4604      	mov	r4, r0
 800362a:	e9c0 3300 	strd	r3, r3, [r0]
 800362e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003632:	6083      	str	r3, [r0, #8]
 8003634:	8181      	strh	r1, [r0, #12]
 8003636:	6643      	str	r3, [r0, #100]	; 0x64
 8003638:	81c2      	strh	r2, [r0, #14]
 800363a:	6183      	str	r3, [r0, #24]
 800363c:	4619      	mov	r1, r3
 800363e:	2208      	movs	r2, #8
 8003640:	305c      	adds	r0, #92	; 0x5c
 8003642:	f000 f8f4 	bl	800382e <memset>
 8003646:	4b0d      	ldr	r3, [pc, #52]	; (800367c <std+0x58>)
 8003648:	6263      	str	r3, [r4, #36]	; 0x24
 800364a:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <std+0x5c>)
 800364c:	62a3      	str	r3, [r4, #40]	; 0x28
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <std+0x60>)
 8003650:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003652:	4b0d      	ldr	r3, [pc, #52]	; (8003688 <std+0x64>)
 8003654:	6323      	str	r3, [r4, #48]	; 0x30
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <std+0x68>)
 8003658:	6224      	str	r4, [r4, #32]
 800365a:	429c      	cmp	r4, r3
 800365c:	d006      	beq.n	800366c <std+0x48>
 800365e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003662:	4294      	cmp	r4, r2
 8003664:	d002      	beq.n	800366c <std+0x48>
 8003666:	33d0      	adds	r3, #208	; 0xd0
 8003668:	429c      	cmp	r4, r3
 800366a:	d105      	bne.n	8003678 <std+0x54>
 800366c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003674:	f000 b964 	b.w	8003940 <__retarget_lock_init_recursive>
 8003678:	bd10      	pop	{r4, pc}
 800367a:	bf00      	nop
 800367c:	080037a9 	.word	0x080037a9
 8003680:	080037cb 	.word	0x080037cb
 8003684:	08003803 	.word	0x08003803
 8003688:	08003827 	.word	0x08003827
 800368c:	20000100 	.word	0x20000100

08003690 <stdio_exit_handler>:
 8003690:	4a02      	ldr	r2, [pc, #8]	; (800369c <stdio_exit_handler+0xc>)
 8003692:	4903      	ldr	r1, [pc, #12]	; (80036a0 <stdio_exit_handler+0x10>)
 8003694:	4803      	ldr	r0, [pc, #12]	; (80036a4 <stdio_exit_handler+0x14>)
 8003696:	f000 b869 	b.w	800376c <_fwalk_sglue>
 800369a:	bf00      	nop
 800369c:	20000010 	.word	0x20000010
 80036a0:	08003b29 	.word	0x08003b29
 80036a4:	2000001c 	.word	0x2000001c

080036a8 <cleanup_stdio>:
 80036a8:	6841      	ldr	r1, [r0, #4]
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <cleanup_stdio+0x34>)
 80036ac:	4299      	cmp	r1, r3
 80036ae:	b510      	push	{r4, lr}
 80036b0:	4604      	mov	r4, r0
 80036b2:	d001      	beq.n	80036b8 <cleanup_stdio+0x10>
 80036b4:	f000 fa38 	bl	8003b28 <_fflush_r>
 80036b8:	68a1      	ldr	r1, [r4, #8]
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <cleanup_stdio+0x38>)
 80036bc:	4299      	cmp	r1, r3
 80036be:	d002      	beq.n	80036c6 <cleanup_stdio+0x1e>
 80036c0:	4620      	mov	r0, r4
 80036c2:	f000 fa31 	bl	8003b28 <_fflush_r>
 80036c6:	68e1      	ldr	r1, [r4, #12]
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <cleanup_stdio+0x3c>)
 80036ca:	4299      	cmp	r1, r3
 80036cc:	d004      	beq.n	80036d8 <cleanup_stdio+0x30>
 80036ce:	4620      	mov	r0, r4
 80036d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036d4:	f000 ba28 	b.w	8003b28 <_fflush_r>
 80036d8:	bd10      	pop	{r4, pc}
 80036da:	bf00      	nop
 80036dc:	20000100 	.word	0x20000100
 80036e0:	20000168 	.word	0x20000168
 80036e4:	200001d0 	.word	0x200001d0

080036e8 <global_stdio_init.part.0>:
 80036e8:	b510      	push	{r4, lr}
 80036ea:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <global_stdio_init.part.0+0x30>)
 80036ec:	4c0b      	ldr	r4, [pc, #44]	; (800371c <global_stdio_init.part.0+0x34>)
 80036ee:	4a0c      	ldr	r2, [pc, #48]	; (8003720 <global_stdio_init.part.0+0x38>)
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	4620      	mov	r0, r4
 80036f4:	2200      	movs	r2, #0
 80036f6:	2104      	movs	r1, #4
 80036f8:	f7ff ff94 	bl	8003624 <std>
 80036fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003700:	2201      	movs	r2, #1
 8003702:	2109      	movs	r1, #9
 8003704:	f7ff ff8e 	bl	8003624 <std>
 8003708:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800370c:	2202      	movs	r2, #2
 800370e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003712:	2112      	movs	r1, #18
 8003714:	f7ff bf86 	b.w	8003624 <std>
 8003718:	20000238 	.word	0x20000238
 800371c:	20000100 	.word	0x20000100
 8003720:	08003691 	.word	0x08003691

08003724 <__sfp_lock_acquire>:
 8003724:	4801      	ldr	r0, [pc, #4]	; (800372c <__sfp_lock_acquire+0x8>)
 8003726:	f000 b90c 	b.w	8003942 <__retarget_lock_acquire_recursive>
 800372a:	bf00      	nop
 800372c:	20000241 	.word	0x20000241

08003730 <__sfp_lock_release>:
 8003730:	4801      	ldr	r0, [pc, #4]	; (8003738 <__sfp_lock_release+0x8>)
 8003732:	f000 b907 	b.w	8003944 <__retarget_lock_release_recursive>
 8003736:	bf00      	nop
 8003738:	20000241 	.word	0x20000241

0800373c <__sinit>:
 800373c:	b510      	push	{r4, lr}
 800373e:	4604      	mov	r4, r0
 8003740:	f7ff fff0 	bl	8003724 <__sfp_lock_acquire>
 8003744:	6a23      	ldr	r3, [r4, #32]
 8003746:	b11b      	cbz	r3, 8003750 <__sinit+0x14>
 8003748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800374c:	f7ff bff0 	b.w	8003730 <__sfp_lock_release>
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <__sinit+0x28>)
 8003752:	6223      	str	r3, [r4, #32]
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <__sinit+0x2c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f5      	bne.n	8003748 <__sinit+0xc>
 800375c:	f7ff ffc4 	bl	80036e8 <global_stdio_init.part.0>
 8003760:	e7f2      	b.n	8003748 <__sinit+0xc>
 8003762:	bf00      	nop
 8003764:	080036a9 	.word	0x080036a9
 8003768:	20000238 	.word	0x20000238

0800376c <_fwalk_sglue>:
 800376c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003770:	4607      	mov	r7, r0
 8003772:	4688      	mov	r8, r1
 8003774:	4614      	mov	r4, r2
 8003776:	2600      	movs	r6, #0
 8003778:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800377c:	f1b9 0901 	subs.w	r9, r9, #1
 8003780:	d505      	bpl.n	800378e <_fwalk_sglue+0x22>
 8003782:	6824      	ldr	r4, [r4, #0]
 8003784:	2c00      	cmp	r4, #0
 8003786:	d1f7      	bne.n	8003778 <_fwalk_sglue+0xc>
 8003788:	4630      	mov	r0, r6
 800378a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800378e:	89ab      	ldrh	r3, [r5, #12]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d907      	bls.n	80037a4 <_fwalk_sglue+0x38>
 8003794:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003798:	3301      	adds	r3, #1
 800379a:	d003      	beq.n	80037a4 <_fwalk_sglue+0x38>
 800379c:	4629      	mov	r1, r5
 800379e:	4638      	mov	r0, r7
 80037a0:	47c0      	blx	r8
 80037a2:	4306      	orrs	r6, r0
 80037a4:	3568      	adds	r5, #104	; 0x68
 80037a6:	e7e9      	b.n	800377c <_fwalk_sglue+0x10>

080037a8 <__sread>:
 80037a8:	b510      	push	{r4, lr}
 80037aa:	460c      	mov	r4, r1
 80037ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b0:	f000 f868 	bl	8003884 <_read_r>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	bfab      	itete	ge
 80037b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037ba:	89a3      	ldrhlt	r3, [r4, #12]
 80037bc:	181b      	addge	r3, r3, r0
 80037be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037c2:	bfac      	ite	ge
 80037c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80037c6:	81a3      	strhlt	r3, [r4, #12]
 80037c8:	bd10      	pop	{r4, pc}

080037ca <__swrite>:
 80037ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ce:	461f      	mov	r7, r3
 80037d0:	898b      	ldrh	r3, [r1, #12]
 80037d2:	05db      	lsls	r3, r3, #23
 80037d4:	4605      	mov	r5, r0
 80037d6:	460c      	mov	r4, r1
 80037d8:	4616      	mov	r6, r2
 80037da:	d505      	bpl.n	80037e8 <__swrite+0x1e>
 80037dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e0:	2302      	movs	r3, #2
 80037e2:	2200      	movs	r2, #0
 80037e4:	f000 f83c 	bl	8003860 <_lseek_r>
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037f2:	81a3      	strh	r3, [r4, #12]
 80037f4:	4632      	mov	r2, r6
 80037f6:	463b      	mov	r3, r7
 80037f8:	4628      	mov	r0, r5
 80037fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037fe:	f000 b863 	b.w	80038c8 <_write_r>

08003802 <__sseek>:
 8003802:	b510      	push	{r4, lr}
 8003804:	460c      	mov	r4, r1
 8003806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800380a:	f000 f829 	bl	8003860 <_lseek_r>
 800380e:	1c43      	adds	r3, r0, #1
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	bf15      	itete	ne
 8003814:	6560      	strne	r0, [r4, #84]	; 0x54
 8003816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800381a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800381e:	81a3      	strheq	r3, [r4, #12]
 8003820:	bf18      	it	ne
 8003822:	81a3      	strhne	r3, [r4, #12]
 8003824:	bd10      	pop	{r4, pc}

08003826 <__sclose>:
 8003826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800382a:	f000 b809 	b.w	8003840 <_close_r>

0800382e <memset>:
 800382e:	4402      	add	r2, r0
 8003830:	4603      	mov	r3, r0
 8003832:	4293      	cmp	r3, r2
 8003834:	d100      	bne.n	8003838 <memset+0xa>
 8003836:	4770      	bx	lr
 8003838:	f803 1b01 	strb.w	r1, [r3], #1
 800383c:	e7f9      	b.n	8003832 <memset+0x4>
	...

08003840 <_close_r>:
 8003840:	b538      	push	{r3, r4, r5, lr}
 8003842:	4d06      	ldr	r5, [pc, #24]	; (800385c <_close_r+0x1c>)
 8003844:	2300      	movs	r3, #0
 8003846:	4604      	mov	r4, r0
 8003848:	4608      	mov	r0, r1
 800384a:	602b      	str	r3, [r5, #0]
 800384c:	f7fd fa81 	bl	8000d52 <_close>
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	d102      	bne.n	800385a <_close_r+0x1a>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	b103      	cbz	r3, 800385a <_close_r+0x1a>
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	bd38      	pop	{r3, r4, r5, pc}
 800385c:	2000023c 	.word	0x2000023c

08003860 <_lseek_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	4d07      	ldr	r5, [pc, #28]	; (8003880 <_lseek_r+0x20>)
 8003864:	4604      	mov	r4, r0
 8003866:	4608      	mov	r0, r1
 8003868:	4611      	mov	r1, r2
 800386a:	2200      	movs	r2, #0
 800386c:	602a      	str	r2, [r5, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	f7fd fa96 	bl	8000da0 <_lseek>
 8003874:	1c43      	adds	r3, r0, #1
 8003876:	d102      	bne.n	800387e <_lseek_r+0x1e>
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	b103      	cbz	r3, 800387e <_lseek_r+0x1e>
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	bd38      	pop	{r3, r4, r5, pc}
 8003880:	2000023c 	.word	0x2000023c

08003884 <_read_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	4d07      	ldr	r5, [pc, #28]	; (80038a4 <_read_r+0x20>)
 8003888:	4604      	mov	r4, r0
 800388a:	4608      	mov	r0, r1
 800388c:	4611      	mov	r1, r2
 800388e:	2200      	movs	r2, #0
 8003890:	602a      	str	r2, [r5, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	f7fd fa24 	bl	8000ce0 <_read>
 8003898:	1c43      	adds	r3, r0, #1
 800389a:	d102      	bne.n	80038a2 <_read_r+0x1e>
 800389c:	682b      	ldr	r3, [r5, #0]
 800389e:	b103      	cbz	r3, 80038a2 <_read_r+0x1e>
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	bd38      	pop	{r3, r4, r5, pc}
 80038a4:	2000023c 	.word	0x2000023c

080038a8 <_sbrk_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4d06      	ldr	r5, [pc, #24]	; (80038c4 <_sbrk_r+0x1c>)
 80038ac:	2300      	movs	r3, #0
 80038ae:	4604      	mov	r4, r0
 80038b0:	4608      	mov	r0, r1
 80038b2:	602b      	str	r3, [r5, #0]
 80038b4:	f7fd fa82 	bl	8000dbc <_sbrk>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d102      	bne.n	80038c2 <_sbrk_r+0x1a>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	b103      	cbz	r3, 80038c2 <_sbrk_r+0x1a>
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	bd38      	pop	{r3, r4, r5, pc}
 80038c4:	2000023c 	.word	0x2000023c

080038c8 <_write_r>:
 80038c8:	b538      	push	{r3, r4, r5, lr}
 80038ca:	4d07      	ldr	r5, [pc, #28]	; (80038e8 <_write_r+0x20>)
 80038cc:	4604      	mov	r4, r0
 80038ce:	4608      	mov	r0, r1
 80038d0:	4611      	mov	r1, r2
 80038d2:	2200      	movs	r2, #0
 80038d4:	602a      	str	r2, [r5, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f7fd fa1f 	bl	8000d1a <_write>
 80038dc:	1c43      	adds	r3, r0, #1
 80038de:	d102      	bne.n	80038e6 <_write_r+0x1e>
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	b103      	cbz	r3, 80038e6 <_write_r+0x1e>
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
 80038e8:	2000023c 	.word	0x2000023c

080038ec <__errno>:
 80038ec:	4b01      	ldr	r3, [pc, #4]	; (80038f4 <__errno+0x8>)
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000068 	.word	0x20000068

080038f8 <__libc_init_array>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	4d0d      	ldr	r5, [pc, #52]	; (8003930 <__libc_init_array+0x38>)
 80038fc:	4c0d      	ldr	r4, [pc, #52]	; (8003934 <__libc_init_array+0x3c>)
 80038fe:	1b64      	subs	r4, r4, r5
 8003900:	10a4      	asrs	r4, r4, #2
 8003902:	2600      	movs	r6, #0
 8003904:	42a6      	cmp	r6, r4
 8003906:	d109      	bne.n	800391c <__libc_init_array+0x24>
 8003908:	4d0b      	ldr	r5, [pc, #44]	; (8003938 <__libc_init_array+0x40>)
 800390a:	4c0c      	ldr	r4, [pc, #48]	; (800393c <__libc_init_array+0x44>)
 800390c:	f000 fd7e 	bl	800440c <_init>
 8003910:	1b64      	subs	r4, r4, r5
 8003912:	10a4      	asrs	r4, r4, #2
 8003914:	2600      	movs	r6, #0
 8003916:	42a6      	cmp	r6, r4
 8003918:	d105      	bne.n	8003926 <__libc_init_array+0x2e>
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003920:	4798      	blx	r3
 8003922:	3601      	adds	r6, #1
 8003924:	e7ee      	b.n	8003904 <__libc_init_array+0xc>
 8003926:	f855 3b04 	ldr.w	r3, [r5], #4
 800392a:	4798      	blx	r3
 800392c:	3601      	adds	r6, #1
 800392e:	e7f2      	b.n	8003916 <__libc_init_array+0x1e>
 8003930:	08004554 	.word	0x08004554
 8003934:	08004554 	.word	0x08004554
 8003938:	08004554 	.word	0x08004554
 800393c:	08004558 	.word	0x08004558

08003940 <__retarget_lock_init_recursive>:
 8003940:	4770      	bx	lr

08003942 <__retarget_lock_acquire_recursive>:
 8003942:	4770      	bx	lr

08003944 <__retarget_lock_release_recursive>:
 8003944:	4770      	bx	lr
	...

08003948 <__assert_func>:
 8003948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800394a:	4614      	mov	r4, r2
 800394c:	461a      	mov	r2, r3
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <__assert_func+0x2c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4605      	mov	r5, r0
 8003954:	68d8      	ldr	r0, [r3, #12]
 8003956:	b14c      	cbz	r4, 800396c <__assert_func+0x24>
 8003958:	4b07      	ldr	r3, [pc, #28]	; (8003978 <__assert_func+0x30>)
 800395a:	9100      	str	r1, [sp, #0]
 800395c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003960:	4906      	ldr	r1, [pc, #24]	; (800397c <__assert_func+0x34>)
 8003962:	462b      	mov	r3, r5
 8003964:	f000 f908 	bl	8003b78 <fiprintf>
 8003968:	f000 f918 	bl	8003b9c <abort>
 800396c:	4b04      	ldr	r3, [pc, #16]	; (8003980 <__assert_func+0x38>)
 800396e:	461c      	mov	r4, r3
 8003970:	e7f3      	b.n	800395a <__assert_func+0x12>
 8003972:	bf00      	nop
 8003974:	20000068 	.word	0x20000068
 8003978:	080044e3 	.word	0x080044e3
 800397c:	080044f0 	.word	0x080044f0
 8003980:	0800451e 	.word	0x0800451e

08003984 <_free_r>:
 8003984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003986:	2900      	cmp	r1, #0
 8003988:	d044      	beq.n	8003a14 <_free_r+0x90>
 800398a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800398e:	9001      	str	r0, [sp, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f1a1 0404 	sub.w	r4, r1, #4
 8003996:	bfb8      	it	lt
 8003998:	18e4      	addlt	r4, r4, r3
 800399a:	f7ff fdf9 	bl	8003590 <__malloc_lock>
 800399e:	4a1e      	ldr	r2, [pc, #120]	; (8003a18 <_free_r+0x94>)
 80039a0:	9801      	ldr	r0, [sp, #4]
 80039a2:	6813      	ldr	r3, [r2, #0]
 80039a4:	b933      	cbnz	r3, 80039b4 <_free_r+0x30>
 80039a6:	6063      	str	r3, [r4, #4]
 80039a8:	6014      	str	r4, [r2, #0]
 80039aa:	b003      	add	sp, #12
 80039ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039b0:	f7ff bdf4 	b.w	800359c <__malloc_unlock>
 80039b4:	42a3      	cmp	r3, r4
 80039b6:	d908      	bls.n	80039ca <_free_r+0x46>
 80039b8:	6825      	ldr	r5, [r4, #0]
 80039ba:	1961      	adds	r1, r4, r5
 80039bc:	428b      	cmp	r3, r1
 80039be:	bf01      	itttt	eq
 80039c0:	6819      	ldreq	r1, [r3, #0]
 80039c2:	685b      	ldreq	r3, [r3, #4]
 80039c4:	1949      	addeq	r1, r1, r5
 80039c6:	6021      	streq	r1, [r4, #0]
 80039c8:	e7ed      	b.n	80039a6 <_free_r+0x22>
 80039ca:	461a      	mov	r2, r3
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	b10b      	cbz	r3, 80039d4 <_free_r+0x50>
 80039d0:	42a3      	cmp	r3, r4
 80039d2:	d9fa      	bls.n	80039ca <_free_r+0x46>
 80039d4:	6811      	ldr	r1, [r2, #0]
 80039d6:	1855      	adds	r5, r2, r1
 80039d8:	42a5      	cmp	r5, r4
 80039da:	d10b      	bne.n	80039f4 <_free_r+0x70>
 80039dc:	6824      	ldr	r4, [r4, #0]
 80039de:	4421      	add	r1, r4
 80039e0:	1854      	adds	r4, r2, r1
 80039e2:	42a3      	cmp	r3, r4
 80039e4:	6011      	str	r1, [r2, #0]
 80039e6:	d1e0      	bne.n	80039aa <_free_r+0x26>
 80039e8:	681c      	ldr	r4, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	6053      	str	r3, [r2, #4]
 80039ee:	440c      	add	r4, r1
 80039f0:	6014      	str	r4, [r2, #0]
 80039f2:	e7da      	b.n	80039aa <_free_r+0x26>
 80039f4:	d902      	bls.n	80039fc <_free_r+0x78>
 80039f6:	230c      	movs	r3, #12
 80039f8:	6003      	str	r3, [r0, #0]
 80039fa:	e7d6      	b.n	80039aa <_free_r+0x26>
 80039fc:	6825      	ldr	r5, [r4, #0]
 80039fe:	1961      	adds	r1, r4, r5
 8003a00:	428b      	cmp	r3, r1
 8003a02:	bf04      	itt	eq
 8003a04:	6819      	ldreq	r1, [r3, #0]
 8003a06:	685b      	ldreq	r3, [r3, #4]
 8003a08:	6063      	str	r3, [r4, #4]
 8003a0a:	bf04      	itt	eq
 8003a0c:	1949      	addeq	r1, r1, r5
 8003a0e:	6021      	streq	r1, [r4, #0]
 8003a10:	6054      	str	r4, [r2, #4]
 8003a12:	e7ca      	b.n	80039aa <_free_r+0x26>
 8003a14:	b003      	add	sp, #12
 8003a16:	bd30      	pop	{r4, r5, pc}
 8003a18:	200000f8 	.word	0x200000f8

08003a1c <__sflush_r>:
 8003a1c:	898a      	ldrh	r2, [r1, #12]
 8003a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a22:	4605      	mov	r5, r0
 8003a24:	0710      	lsls	r0, r2, #28
 8003a26:	460c      	mov	r4, r1
 8003a28:	d458      	bmi.n	8003adc <__sflush_r+0xc0>
 8003a2a:	684b      	ldr	r3, [r1, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	dc05      	bgt.n	8003a3c <__sflush_r+0x20>
 8003a30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	dc02      	bgt.n	8003a3c <__sflush_r+0x20>
 8003a36:	2000      	movs	r0, #0
 8003a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a3e:	2e00      	cmp	r6, #0
 8003a40:	d0f9      	beq.n	8003a36 <__sflush_r+0x1a>
 8003a42:	2300      	movs	r3, #0
 8003a44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a48:	682f      	ldr	r7, [r5, #0]
 8003a4a:	6a21      	ldr	r1, [r4, #32]
 8003a4c:	602b      	str	r3, [r5, #0]
 8003a4e:	d032      	beq.n	8003ab6 <__sflush_r+0x9a>
 8003a50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a52:	89a3      	ldrh	r3, [r4, #12]
 8003a54:	075a      	lsls	r2, r3, #29
 8003a56:	d505      	bpl.n	8003a64 <__sflush_r+0x48>
 8003a58:	6863      	ldr	r3, [r4, #4]
 8003a5a:	1ac0      	subs	r0, r0, r3
 8003a5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a5e:	b10b      	cbz	r3, 8003a64 <__sflush_r+0x48>
 8003a60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a62:	1ac0      	subs	r0, r0, r3
 8003a64:	2300      	movs	r3, #0
 8003a66:	4602      	mov	r2, r0
 8003a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a6a:	6a21      	ldr	r1, [r4, #32]
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	47b0      	blx	r6
 8003a70:	1c43      	adds	r3, r0, #1
 8003a72:	89a3      	ldrh	r3, [r4, #12]
 8003a74:	d106      	bne.n	8003a84 <__sflush_r+0x68>
 8003a76:	6829      	ldr	r1, [r5, #0]
 8003a78:	291d      	cmp	r1, #29
 8003a7a:	d82b      	bhi.n	8003ad4 <__sflush_r+0xb8>
 8003a7c:	4a29      	ldr	r2, [pc, #164]	; (8003b24 <__sflush_r+0x108>)
 8003a7e:	410a      	asrs	r2, r1
 8003a80:	07d6      	lsls	r6, r2, #31
 8003a82:	d427      	bmi.n	8003ad4 <__sflush_r+0xb8>
 8003a84:	2200      	movs	r2, #0
 8003a86:	6062      	str	r2, [r4, #4]
 8003a88:	04d9      	lsls	r1, r3, #19
 8003a8a:	6922      	ldr	r2, [r4, #16]
 8003a8c:	6022      	str	r2, [r4, #0]
 8003a8e:	d504      	bpl.n	8003a9a <__sflush_r+0x7e>
 8003a90:	1c42      	adds	r2, r0, #1
 8003a92:	d101      	bne.n	8003a98 <__sflush_r+0x7c>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	b903      	cbnz	r3, 8003a9a <__sflush_r+0x7e>
 8003a98:	6560      	str	r0, [r4, #84]	; 0x54
 8003a9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a9c:	602f      	str	r7, [r5, #0]
 8003a9e:	2900      	cmp	r1, #0
 8003aa0:	d0c9      	beq.n	8003a36 <__sflush_r+0x1a>
 8003aa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003aa6:	4299      	cmp	r1, r3
 8003aa8:	d002      	beq.n	8003ab0 <__sflush_r+0x94>
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f7ff ff6a 	bl	8003984 <_free_r>
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	6360      	str	r0, [r4, #52]	; 0x34
 8003ab4:	e7c0      	b.n	8003a38 <__sflush_r+0x1c>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	4628      	mov	r0, r5
 8003aba:	47b0      	blx	r6
 8003abc:	1c41      	adds	r1, r0, #1
 8003abe:	d1c8      	bne.n	8003a52 <__sflush_r+0x36>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0c5      	beq.n	8003a52 <__sflush_r+0x36>
 8003ac6:	2b1d      	cmp	r3, #29
 8003ac8:	d001      	beq.n	8003ace <__sflush_r+0xb2>
 8003aca:	2b16      	cmp	r3, #22
 8003acc:	d101      	bne.n	8003ad2 <__sflush_r+0xb6>
 8003ace:	602f      	str	r7, [r5, #0]
 8003ad0:	e7b1      	b.n	8003a36 <__sflush_r+0x1a>
 8003ad2:	89a3      	ldrh	r3, [r4, #12]
 8003ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad8:	81a3      	strh	r3, [r4, #12]
 8003ada:	e7ad      	b.n	8003a38 <__sflush_r+0x1c>
 8003adc:	690f      	ldr	r7, [r1, #16]
 8003ade:	2f00      	cmp	r7, #0
 8003ae0:	d0a9      	beq.n	8003a36 <__sflush_r+0x1a>
 8003ae2:	0793      	lsls	r3, r2, #30
 8003ae4:	680e      	ldr	r6, [r1, #0]
 8003ae6:	bf08      	it	eq
 8003ae8:	694b      	ldreq	r3, [r1, #20]
 8003aea:	600f      	str	r7, [r1, #0]
 8003aec:	bf18      	it	ne
 8003aee:	2300      	movne	r3, #0
 8003af0:	eba6 0807 	sub.w	r8, r6, r7
 8003af4:	608b      	str	r3, [r1, #8]
 8003af6:	f1b8 0f00 	cmp.w	r8, #0
 8003afa:	dd9c      	ble.n	8003a36 <__sflush_r+0x1a>
 8003afc:	6a21      	ldr	r1, [r4, #32]
 8003afe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b00:	4643      	mov	r3, r8
 8003b02:	463a      	mov	r2, r7
 8003b04:	4628      	mov	r0, r5
 8003b06:	47b0      	blx	r6
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	dc06      	bgt.n	8003b1a <__sflush_r+0xfe>
 8003b0c:	89a3      	ldrh	r3, [r4, #12]
 8003b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b12:	81a3      	strh	r3, [r4, #12]
 8003b14:	f04f 30ff 	mov.w	r0, #4294967295
 8003b18:	e78e      	b.n	8003a38 <__sflush_r+0x1c>
 8003b1a:	4407      	add	r7, r0
 8003b1c:	eba8 0800 	sub.w	r8, r8, r0
 8003b20:	e7e9      	b.n	8003af6 <__sflush_r+0xda>
 8003b22:	bf00      	nop
 8003b24:	dfbffffe 	.word	0xdfbffffe

08003b28 <_fflush_r>:
 8003b28:	b538      	push	{r3, r4, r5, lr}
 8003b2a:	690b      	ldr	r3, [r1, #16]
 8003b2c:	4605      	mov	r5, r0
 8003b2e:	460c      	mov	r4, r1
 8003b30:	b913      	cbnz	r3, 8003b38 <_fflush_r+0x10>
 8003b32:	2500      	movs	r5, #0
 8003b34:	4628      	mov	r0, r5
 8003b36:	bd38      	pop	{r3, r4, r5, pc}
 8003b38:	b118      	cbz	r0, 8003b42 <_fflush_r+0x1a>
 8003b3a:	6a03      	ldr	r3, [r0, #32]
 8003b3c:	b90b      	cbnz	r3, 8003b42 <_fflush_r+0x1a>
 8003b3e:	f7ff fdfd 	bl	800373c <__sinit>
 8003b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f3      	beq.n	8003b32 <_fflush_r+0xa>
 8003b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b4c:	07d0      	lsls	r0, r2, #31
 8003b4e:	d404      	bmi.n	8003b5a <_fflush_r+0x32>
 8003b50:	0599      	lsls	r1, r3, #22
 8003b52:	d402      	bmi.n	8003b5a <_fflush_r+0x32>
 8003b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b56:	f7ff fef4 	bl	8003942 <__retarget_lock_acquire_recursive>
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	f7ff ff5d 	bl	8003a1c <__sflush_r>
 8003b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b64:	07da      	lsls	r2, r3, #31
 8003b66:	4605      	mov	r5, r0
 8003b68:	d4e4      	bmi.n	8003b34 <_fflush_r+0xc>
 8003b6a:	89a3      	ldrh	r3, [r4, #12]
 8003b6c:	059b      	lsls	r3, r3, #22
 8003b6e:	d4e1      	bmi.n	8003b34 <_fflush_r+0xc>
 8003b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b72:	f7ff fee7 	bl	8003944 <__retarget_lock_release_recursive>
 8003b76:	e7dd      	b.n	8003b34 <_fflush_r+0xc>

08003b78 <fiprintf>:
 8003b78:	b40e      	push	{r1, r2, r3}
 8003b7a:	b503      	push	{r0, r1, lr}
 8003b7c:	4601      	mov	r1, r0
 8003b7e:	ab03      	add	r3, sp, #12
 8003b80:	4805      	ldr	r0, [pc, #20]	; (8003b98 <fiprintf+0x20>)
 8003b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b86:	6800      	ldr	r0, [r0, #0]
 8003b88:	9301      	str	r3, [sp, #4]
 8003b8a:	f000 f837 	bl	8003bfc <_vfiprintf_r>
 8003b8e:	b002      	add	sp, #8
 8003b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b94:	b003      	add	sp, #12
 8003b96:	4770      	bx	lr
 8003b98:	20000068 	.word	0x20000068

08003b9c <abort>:
 8003b9c:	b508      	push	{r3, lr}
 8003b9e:	2006      	movs	r0, #6
 8003ba0:	f000 fb94 	bl	80042cc <raise>
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	f7fd f891 	bl	8000ccc <_exit>

08003baa <__sfputc_r>:
 8003baa:	6893      	ldr	r3, [r2, #8]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	b410      	push	{r4}
 8003bb2:	6093      	str	r3, [r2, #8]
 8003bb4:	da08      	bge.n	8003bc8 <__sfputc_r+0x1e>
 8003bb6:	6994      	ldr	r4, [r2, #24]
 8003bb8:	42a3      	cmp	r3, r4
 8003bba:	db01      	blt.n	8003bc0 <__sfputc_r+0x16>
 8003bbc:	290a      	cmp	r1, #10
 8003bbe:	d103      	bne.n	8003bc8 <__sfputc_r+0x1e>
 8003bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bc4:	f000 bac4 	b.w	8004150 <__swbuf_r>
 8003bc8:	6813      	ldr	r3, [r2, #0]
 8003bca:	1c58      	adds	r0, r3, #1
 8003bcc:	6010      	str	r0, [r2, #0]
 8003bce:	7019      	strb	r1, [r3, #0]
 8003bd0:	4608      	mov	r0, r1
 8003bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <__sfputs_r>:
 8003bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bda:	4606      	mov	r6, r0
 8003bdc:	460f      	mov	r7, r1
 8003bde:	4614      	mov	r4, r2
 8003be0:	18d5      	adds	r5, r2, r3
 8003be2:	42ac      	cmp	r4, r5
 8003be4:	d101      	bne.n	8003bea <__sfputs_r+0x12>
 8003be6:	2000      	movs	r0, #0
 8003be8:	e007      	b.n	8003bfa <__sfputs_r+0x22>
 8003bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bee:	463a      	mov	r2, r7
 8003bf0:	4630      	mov	r0, r6
 8003bf2:	f7ff ffda 	bl	8003baa <__sfputc_r>
 8003bf6:	1c43      	adds	r3, r0, #1
 8003bf8:	d1f3      	bne.n	8003be2 <__sfputs_r+0xa>
 8003bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003bfc <_vfiprintf_r>:
 8003bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c00:	460d      	mov	r5, r1
 8003c02:	b09d      	sub	sp, #116	; 0x74
 8003c04:	4614      	mov	r4, r2
 8003c06:	4698      	mov	r8, r3
 8003c08:	4606      	mov	r6, r0
 8003c0a:	b118      	cbz	r0, 8003c14 <_vfiprintf_r+0x18>
 8003c0c:	6a03      	ldr	r3, [r0, #32]
 8003c0e:	b90b      	cbnz	r3, 8003c14 <_vfiprintf_r+0x18>
 8003c10:	f7ff fd94 	bl	800373c <__sinit>
 8003c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c16:	07d9      	lsls	r1, r3, #31
 8003c18:	d405      	bmi.n	8003c26 <_vfiprintf_r+0x2a>
 8003c1a:	89ab      	ldrh	r3, [r5, #12]
 8003c1c:	059a      	lsls	r2, r3, #22
 8003c1e:	d402      	bmi.n	8003c26 <_vfiprintf_r+0x2a>
 8003c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c22:	f7ff fe8e 	bl	8003942 <__retarget_lock_acquire_recursive>
 8003c26:	89ab      	ldrh	r3, [r5, #12]
 8003c28:	071b      	lsls	r3, r3, #28
 8003c2a:	d501      	bpl.n	8003c30 <_vfiprintf_r+0x34>
 8003c2c:	692b      	ldr	r3, [r5, #16]
 8003c2e:	b99b      	cbnz	r3, 8003c58 <_vfiprintf_r+0x5c>
 8003c30:	4629      	mov	r1, r5
 8003c32:	4630      	mov	r0, r6
 8003c34:	f000 faca 	bl	80041cc <__swsetup_r>
 8003c38:	b170      	cbz	r0, 8003c58 <_vfiprintf_r+0x5c>
 8003c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c3c:	07dc      	lsls	r4, r3, #31
 8003c3e:	d504      	bpl.n	8003c4a <_vfiprintf_r+0x4e>
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	b01d      	add	sp, #116	; 0x74
 8003c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c4a:	89ab      	ldrh	r3, [r5, #12]
 8003c4c:	0598      	lsls	r0, r3, #22
 8003c4e:	d4f7      	bmi.n	8003c40 <_vfiprintf_r+0x44>
 8003c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c52:	f7ff fe77 	bl	8003944 <__retarget_lock_release_recursive>
 8003c56:	e7f3      	b.n	8003c40 <_vfiprintf_r+0x44>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c66:	2330      	movs	r3, #48	; 0x30
 8003c68:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003e1c <_vfiprintf_r+0x220>
 8003c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c70:	f04f 0901 	mov.w	r9, #1
 8003c74:	4623      	mov	r3, r4
 8003c76:	469a      	mov	sl, r3
 8003c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c7c:	b10a      	cbz	r2, 8003c82 <_vfiprintf_r+0x86>
 8003c7e:	2a25      	cmp	r2, #37	; 0x25
 8003c80:	d1f9      	bne.n	8003c76 <_vfiprintf_r+0x7a>
 8003c82:	ebba 0b04 	subs.w	fp, sl, r4
 8003c86:	d00b      	beq.n	8003ca0 <_vfiprintf_r+0xa4>
 8003c88:	465b      	mov	r3, fp
 8003c8a:	4622      	mov	r2, r4
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	4630      	mov	r0, r6
 8003c90:	f7ff ffa2 	bl	8003bd8 <__sfputs_r>
 8003c94:	3001      	adds	r0, #1
 8003c96:	f000 80a9 	beq.w	8003dec <_vfiprintf_r+0x1f0>
 8003c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c9c:	445a      	add	r2, fp
 8003c9e:	9209      	str	r2, [sp, #36]	; 0x24
 8003ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80a1 	beq.w	8003dec <_vfiprintf_r+0x1f0>
 8003caa:	2300      	movs	r3, #0
 8003cac:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cb4:	f10a 0a01 	add.w	sl, sl, #1
 8003cb8:	9304      	str	r3, [sp, #16]
 8003cba:	9307      	str	r3, [sp, #28]
 8003cbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cc0:	931a      	str	r3, [sp, #104]	; 0x68
 8003cc2:	4654      	mov	r4, sl
 8003cc4:	2205      	movs	r2, #5
 8003cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cca:	4854      	ldr	r0, [pc, #336]	; (8003e1c <_vfiprintf_r+0x220>)
 8003ccc:	f7fc fa88 	bl	80001e0 <memchr>
 8003cd0:	9a04      	ldr	r2, [sp, #16]
 8003cd2:	b9d8      	cbnz	r0, 8003d0c <_vfiprintf_r+0x110>
 8003cd4:	06d1      	lsls	r1, r2, #27
 8003cd6:	bf44      	itt	mi
 8003cd8:	2320      	movmi	r3, #32
 8003cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cde:	0713      	lsls	r3, r2, #28
 8003ce0:	bf44      	itt	mi
 8003ce2:	232b      	movmi	r3, #43	; 0x2b
 8003ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8003cec:	2b2a      	cmp	r3, #42	; 0x2a
 8003cee:	d015      	beq.n	8003d1c <_vfiprintf_r+0x120>
 8003cf0:	9a07      	ldr	r2, [sp, #28]
 8003cf2:	4654      	mov	r4, sl
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	f04f 0c0a 	mov.w	ip, #10
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d00:	3b30      	subs	r3, #48	; 0x30
 8003d02:	2b09      	cmp	r3, #9
 8003d04:	d94d      	bls.n	8003da2 <_vfiprintf_r+0x1a6>
 8003d06:	b1b0      	cbz	r0, 8003d36 <_vfiprintf_r+0x13a>
 8003d08:	9207      	str	r2, [sp, #28]
 8003d0a:	e014      	b.n	8003d36 <_vfiprintf_r+0x13a>
 8003d0c:	eba0 0308 	sub.w	r3, r0, r8
 8003d10:	fa09 f303 	lsl.w	r3, r9, r3
 8003d14:	4313      	orrs	r3, r2
 8003d16:	9304      	str	r3, [sp, #16]
 8003d18:	46a2      	mov	sl, r4
 8003d1a:	e7d2      	b.n	8003cc2 <_vfiprintf_r+0xc6>
 8003d1c:	9b03      	ldr	r3, [sp, #12]
 8003d1e:	1d19      	adds	r1, r3, #4
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	9103      	str	r1, [sp, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bfbb      	ittet	lt
 8003d28:	425b      	neglt	r3, r3
 8003d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8003d2e:	9307      	strge	r3, [sp, #28]
 8003d30:	9307      	strlt	r3, [sp, #28]
 8003d32:	bfb8      	it	lt
 8003d34:	9204      	strlt	r2, [sp, #16]
 8003d36:	7823      	ldrb	r3, [r4, #0]
 8003d38:	2b2e      	cmp	r3, #46	; 0x2e
 8003d3a:	d10c      	bne.n	8003d56 <_vfiprintf_r+0x15a>
 8003d3c:	7863      	ldrb	r3, [r4, #1]
 8003d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d40:	d134      	bne.n	8003dac <_vfiprintf_r+0x1b0>
 8003d42:	9b03      	ldr	r3, [sp, #12]
 8003d44:	1d1a      	adds	r2, r3, #4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	9203      	str	r2, [sp, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bfb8      	it	lt
 8003d4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d52:	3402      	adds	r4, #2
 8003d54:	9305      	str	r3, [sp, #20]
 8003d56:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003e2c <_vfiprintf_r+0x230>
 8003d5a:	7821      	ldrb	r1, [r4, #0]
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	4650      	mov	r0, sl
 8003d60:	f7fc fa3e 	bl	80001e0 <memchr>
 8003d64:	b138      	cbz	r0, 8003d76 <_vfiprintf_r+0x17a>
 8003d66:	9b04      	ldr	r3, [sp, #16]
 8003d68:	eba0 000a 	sub.w	r0, r0, sl
 8003d6c:	2240      	movs	r2, #64	; 0x40
 8003d6e:	4082      	lsls	r2, r0
 8003d70:	4313      	orrs	r3, r2
 8003d72:	3401      	adds	r4, #1
 8003d74:	9304      	str	r3, [sp, #16]
 8003d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d7a:	4829      	ldr	r0, [pc, #164]	; (8003e20 <_vfiprintf_r+0x224>)
 8003d7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d80:	2206      	movs	r2, #6
 8003d82:	f7fc fa2d 	bl	80001e0 <memchr>
 8003d86:	2800      	cmp	r0, #0
 8003d88:	d03f      	beq.n	8003e0a <_vfiprintf_r+0x20e>
 8003d8a:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <_vfiprintf_r+0x228>)
 8003d8c:	bb1b      	cbnz	r3, 8003dd6 <_vfiprintf_r+0x1da>
 8003d8e:	9b03      	ldr	r3, [sp, #12]
 8003d90:	3307      	adds	r3, #7
 8003d92:	f023 0307 	bic.w	r3, r3, #7
 8003d96:	3308      	adds	r3, #8
 8003d98:	9303      	str	r3, [sp, #12]
 8003d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d9c:	443b      	add	r3, r7
 8003d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003da0:	e768      	b.n	8003c74 <_vfiprintf_r+0x78>
 8003da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003da6:	460c      	mov	r4, r1
 8003da8:	2001      	movs	r0, #1
 8003daa:	e7a6      	b.n	8003cfa <_vfiprintf_r+0xfe>
 8003dac:	2300      	movs	r3, #0
 8003dae:	3401      	adds	r4, #1
 8003db0:	9305      	str	r3, [sp, #20]
 8003db2:	4619      	mov	r1, r3
 8003db4:	f04f 0c0a 	mov.w	ip, #10
 8003db8:	4620      	mov	r0, r4
 8003dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dbe:	3a30      	subs	r2, #48	; 0x30
 8003dc0:	2a09      	cmp	r2, #9
 8003dc2:	d903      	bls.n	8003dcc <_vfiprintf_r+0x1d0>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0c6      	beq.n	8003d56 <_vfiprintf_r+0x15a>
 8003dc8:	9105      	str	r1, [sp, #20]
 8003dca:	e7c4      	b.n	8003d56 <_vfiprintf_r+0x15a>
 8003dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e7f0      	b.n	8003db8 <_vfiprintf_r+0x1bc>
 8003dd6:	ab03      	add	r3, sp, #12
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	462a      	mov	r2, r5
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <_vfiprintf_r+0x22c>)
 8003dde:	a904      	add	r1, sp, #16
 8003de0:	4630      	mov	r0, r6
 8003de2:	f3af 8000 	nop.w
 8003de6:	4607      	mov	r7, r0
 8003de8:	1c78      	adds	r0, r7, #1
 8003dea:	d1d6      	bne.n	8003d9a <_vfiprintf_r+0x19e>
 8003dec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dee:	07d9      	lsls	r1, r3, #31
 8003df0:	d405      	bmi.n	8003dfe <_vfiprintf_r+0x202>
 8003df2:	89ab      	ldrh	r3, [r5, #12]
 8003df4:	059a      	lsls	r2, r3, #22
 8003df6:	d402      	bmi.n	8003dfe <_vfiprintf_r+0x202>
 8003df8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dfa:	f7ff fda3 	bl	8003944 <__retarget_lock_release_recursive>
 8003dfe:	89ab      	ldrh	r3, [r5, #12]
 8003e00:	065b      	lsls	r3, r3, #25
 8003e02:	f53f af1d 	bmi.w	8003c40 <_vfiprintf_r+0x44>
 8003e06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e08:	e71c      	b.n	8003c44 <_vfiprintf_r+0x48>
 8003e0a:	ab03      	add	r3, sp, #12
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	462a      	mov	r2, r5
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <_vfiprintf_r+0x22c>)
 8003e12:	a904      	add	r1, sp, #16
 8003e14:	4630      	mov	r0, r6
 8003e16:	f000 f879 	bl	8003f0c <_printf_i>
 8003e1a:	e7e4      	b.n	8003de6 <_vfiprintf_r+0x1ea>
 8003e1c:	0800451f 	.word	0x0800451f
 8003e20:	08004529 	.word	0x08004529
 8003e24:	00000000 	.word	0x00000000
 8003e28:	08003bd9 	.word	0x08003bd9
 8003e2c:	08004525 	.word	0x08004525

08003e30 <_printf_common>:
 8003e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e34:	4616      	mov	r6, r2
 8003e36:	4699      	mov	r9, r3
 8003e38:	688a      	ldr	r2, [r1, #8]
 8003e3a:	690b      	ldr	r3, [r1, #16]
 8003e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e40:	4293      	cmp	r3, r2
 8003e42:	bfb8      	it	lt
 8003e44:	4613      	movlt	r3, r2
 8003e46:	6033      	str	r3, [r6, #0]
 8003e48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e4c:	4607      	mov	r7, r0
 8003e4e:	460c      	mov	r4, r1
 8003e50:	b10a      	cbz	r2, 8003e56 <_printf_common+0x26>
 8003e52:	3301      	adds	r3, #1
 8003e54:	6033      	str	r3, [r6, #0]
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	0699      	lsls	r1, r3, #26
 8003e5a:	bf42      	ittt	mi
 8003e5c:	6833      	ldrmi	r3, [r6, #0]
 8003e5e:	3302      	addmi	r3, #2
 8003e60:	6033      	strmi	r3, [r6, #0]
 8003e62:	6825      	ldr	r5, [r4, #0]
 8003e64:	f015 0506 	ands.w	r5, r5, #6
 8003e68:	d106      	bne.n	8003e78 <_printf_common+0x48>
 8003e6a:	f104 0a19 	add.w	sl, r4, #25
 8003e6e:	68e3      	ldr	r3, [r4, #12]
 8003e70:	6832      	ldr	r2, [r6, #0]
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	42ab      	cmp	r3, r5
 8003e76:	dc26      	bgt.n	8003ec6 <_printf_common+0x96>
 8003e78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e7c:	1e13      	subs	r3, r2, #0
 8003e7e:	6822      	ldr	r2, [r4, #0]
 8003e80:	bf18      	it	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	0692      	lsls	r2, r2, #26
 8003e86:	d42b      	bmi.n	8003ee0 <_printf_common+0xb0>
 8003e88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e8c:	4649      	mov	r1, r9
 8003e8e:	4638      	mov	r0, r7
 8003e90:	47c0      	blx	r8
 8003e92:	3001      	adds	r0, #1
 8003e94:	d01e      	beq.n	8003ed4 <_printf_common+0xa4>
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	6922      	ldr	r2, [r4, #16]
 8003e9a:	f003 0306 	and.w	r3, r3, #6
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	bf02      	ittt	eq
 8003ea2:	68e5      	ldreq	r5, [r4, #12]
 8003ea4:	6833      	ldreq	r3, [r6, #0]
 8003ea6:	1aed      	subeq	r5, r5, r3
 8003ea8:	68a3      	ldr	r3, [r4, #8]
 8003eaa:	bf0c      	ite	eq
 8003eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003eb0:	2500      	movne	r5, #0
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	bfc4      	itt	gt
 8003eb6:	1a9b      	subgt	r3, r3, r2
 8003eb8:	18ed      	addgt	r5, r5, r3
 8003eba:	2600      	movs	r6, #0
 8003ebc:	341a      	adds	r4, #26
 8003ebe:	42b5      	cmp	r5, r6
 8003ec0:	d11a      	bne.n	8003ef8 <_printf_common+0xc8>
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	e008      	b.n	8003ed8 <_printf_common+0xa8>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	4652      	mov	r2, sl
 8003eca:	4649      	mov	r1, r9
 8003ecc:	4638      	mov	r0, r7
 8003ece:	47c0      	blx	r8
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d103      	bne.n	8003edc <_printf_common+0xac>
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003edc:	3501      	adds	r5, #1
 8003ede:	e7c6      	b.n	8003e6e <_printf_common+0x3e>
 8003ee0:	18e1      	adds	r1, r4, r3
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	2030      	movs	r0, #48	; 0x30
 8003ee6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003eea:	4422      	add	r2, r4
 8003eec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ef0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ef4:	3302      	adds	r3, #2
 8003ef6:	e7c7      	b.n	8003e88 <_printf_common+0x58>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	4622      	mov	r2, r4
 8003efc:	4649      	mov	r1, r9
 8003efe:	4638      	mov	r0, r7
 8003f00:	47c0      	blx	r8
 8003f02:	3001      	adds	r0, #1
 8003f04:	d0e6      	beq.n	8003ed4 <_printf_common+0xa4>
 8003f06:	3601      	adds	r6, #1
 8003f08:	e7d9      	b.n	8003ebe <_printf_common+0x8e>
	...

08003f0c <_printf_i>:
 8003f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f10:	7e0f      	ldrb	r7, [r1, #24]
 8003f12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f14:	2f78      	cmp	r7, #120	; 0x78
 8003f16:	4691      	mov	r9, r2
 8003f18:	4680      	mov	r8, r0
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	469a      	mov	sl, r3
 8003f1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f22:	d807      	bhi.n	8003f34 <_printf_i+0x28>
 8003f24:	2f62      	cmp	r7, #98	; 0x62
 8003f26:	d80a      	bhi.n	8003f3e <_printf_i+0x32>
 8003f28:	2f00      	cmp	r7, #0
 8003f2a:	f000 80d4 	beq.w	80040d6 <_printf_i+0x1ca>
 8003f2e:	2f58      	cmp	r7, #88	; 0x58
 8003f30:	f000 80c0 	beq.w	80040b4 <_printf_i+0x1a8>
 8003f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f3c:	e03a      	b.n	8003fb4 <_printf_i+0xa8>
 8003f3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f42:	2b15      	cmp	r3, #21
 8003f44:	d8f6      	bhi.n	8003f34 <_printf_i+0x28>
 8003f46:	a101      	add	r1, pc, #4	; (adr r1, 8003f4c <_printf_i+0x40>)
 8003f48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f4c:	08003fa5 	.word	0x08003fa5
 8003f50:	08003fb9 	.word	0x08003fb9
 8003f54:	08003f35 	.word	0x08003f35
 8003f58:	08003f35 	.word	0x08003f35
 8003f5c:	08003f35 	.word	0x08003f35
 8003f60:	08003f35 	.word	0x08003f35
 8003f64:	08003fb9 	.word	0x08003fb9
 8003f68:	08003f35 	.word	0x08003f35
 8003f6c:	08003f35 	.word	0x08003f35
 8003f70:	08003f35 	.word	0x08003f35
 8003f74:	08003f35 	.word	0x08003f35
 8003f78:	080040bd 	.word	0x080040bd
 8003f7c:	08003fe5 	.word	0x08003fe5
 8003f80:	08004077 	.word	0x08004077
 8003f84:	08003f35 	.word	0x08003f35
 8003f88:	08003f35 	.word	0x08003f35
 8003f8c:	080040df 	.word	0x080040df
 8003f90:	08003f35 	.word	0x08003f35
 8003f94:	08003fe5 	.word	0x08003fe5
 8003f98:	08003f35 	.word	0x08003f35
 8003f9c:	08003f35 	.word	0x08003f35
 8003fa0:	0800407f 	.word	0x0800407f
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	1d1a      	adds	r2, r3, #4
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	602a      	str	r2, [r5, #0]
 8003fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e09f      	b.n	80040f8 <_printf_i+0x1ec>
 8003fb8:	6820      	ldr	r0, [r4, #0]
 8003fba:	682b      	ldr	r3, [r5, #0]
 8003fbc:	0607      	lsls	r7, r0, #24
 8003fbe:	f103 0104 	add.w	r1, r3, #4
 8003fc2:	6029      	str	r1, [r5, #0]
 8003fc4:	d501      	bpl.n	8003fca <_printf_i+0xbe>
 8003fc6:	681e      	ldr	r6, [r3, #0]
 8003fc8:	e003      	b.n	8003fd2 <_printf_i+0xc6>
 8003fca:	0646      	lsls	r6, r0, #25
 8003fcc:	d5fb      	bpl.n	8003fc6 <_printf_i+0xba>
 8003fce:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003fd2:	2e00      	cmp	r6, #0
 8003fd4:	da03      	bge.n	8003fde <_printf_i+0xd2>
 8003fd6:	232d      	movs	r3, #45	; 0x2d
 8003fd8:	4276      	negs	r6, r6
 8003fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fde:	485a      	ldr	r0, [pc, #360]	; (8004148 <_printf_i+0x23c>)
 8003fe0:	230a      	movs	r3, #10
 8003fe2:	e012      	b.n	800400a <_printf_i+0xfe>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	6820      	ldr	r0, [r4, #0]
 8003fe8:	1d19      	adds	r1, r3, #4
 8003fea:	6029      	str	r1, [r5, #0]
 8003fec:	0605      	lsls	r5, r0, #24
 8003fee:	d501      	bpl.n	8003ff4 <_printf_i+0xe8>
 8003ff0:	681e      	ldr	r6, [r3, #0]
 8003ff2:	e002      	b.n	8003ffa <_printf_i+0xee>
 8003ff4:	0641      	lsls	r1, r0, #25
 8003ff6:	d5fb      	bpl.n	8003ff0 <_printf_i+0xe4>
 8003ff8:	881e      	ldrh	r6, [r3, #0]
 8003ffa:	4853      	ldr	r0, [pc, #332]	; (8004148 <_printf_i+0x23c>)
 8003ffc:	2f6f      	cmp	r7, #111	; 0x6f
 8003ffe:	bf0c      	ite	eq
 8004000:	2308      	moveq	r3, #8
 8004002:	230a      	movne	r3, #10
 8004004:	2100      	movs	r1, #0
 8004006:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800400a:	6865      	ldr	r5, [r4, #4]
 800400c:	60a5      	str	r5, [r4, #8]
 800400e:	2d00      	cmp	r5, #0
 8004010:	bfa2      	ittt	ge
 8004012:	6821      	ldrge	r1, [r4, #0]
 8004014:	f021 0104 	bicge.w	r1, r1, #4
 8004018:	6021      	strge	r1, [r4, #0]
 800401a:	b90e      	cbnz	r6, 8004020 <_printf_i+0x114>
 800401c:	2d00      	cmp	r5, #0
 800401e:	d04b      	beq.n	80040b8 <_printf_i+0x1ac>
 8004020:	4615      	mov	r5, r2
 8004022:	fbb6 f1f3 	udiv	r1, r6, r3
 8004026:	fb03 6711 	mls	r7, r3, r1, r6
 800402a:	5dc7      	ldrb	r7, [r0, r7]
 800402c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004030:	4637      	mov	r7, r6
 8004032:	42bb      	cmp	r3, r7
 8004034:	460e      	mov	r6, r1
 8004036:	d9f4      	bls.n	8004022 <_printf_i+0x116>
 8004038:	2b08      	cmp	r3, #8
 800403a:	d10b      	bne.n	8004054 <_printf_i+0x148>
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	07de      	lsls	r6, r3, #31
 8004040:	d508      	bpl.n	8004054 <_printf_i+0x148>
 8004042:	6923      	ldr	r3, [r4, #16]
 8004044:	6861      	ldr	r1, [r4, #4]
 8004046:	4299      	cmp	r1, r3
 8004048:	bfde      	ittt	le
 800404a:	2330      	movle	r3, #48	; 0x30
 800404c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004050:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004054:	1b52      	subs	r2, r2, r5
 8004056:	6122      	str	r2, [r4, #16]
 8004058:	f8cd a000 	str.w	sl, [sp]
 800405c:	464b      	mov	r3, r9
 800405e:	aa03      	add	r2, sp, #12
 8004060:	4621      	mov	r1, r4
 8004062:	4640      	mov	r0, r8
 8004064:	f7ff fee4 	bl	8003e30 <_printf_common>
 8004068:	3001      	adds	r0, #1
 800406a:	d14a      	bne.n	8004102 <_printf_i+0x1f6>
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	b004      	add	sp, #16
 8004072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	f043 0320 	orr.w	r3, r3, #32
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	4833      	ldr	r0, [pc, #204]	; (800414c <_printf_i+0x240>)
 8004080:	2778      	movs	r7, #120	; 0x78
 8004082:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	6829      	ldr	r1, [r5, #0]
 800408a:	061f      	lsls	r7, r3, #24
 800408c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004090:	d402      	bmi.n	8004098 <_printf_i+0x18c>
 8004092:	065f      	lsls	r7, r3, #25
 8004094:	bf48      	it	mi
 8004096:	b2b6      	uxthmi	r6, r6
 8004098:	07df      	lsls	r7, r3, #31
 800409a:	bf48      	it	mi
 800409c:	f043 0320 	orrmi.w	r3, r3, #32
 80040a0:	6029      	str	r1, [r5, #0]
 80040a2:	bf48      	it	mi
 80040a4:	6023      	strmi	r3, [r4, #0]
 80040a6:	b91e      	cbnz	r6, 80040b0 <_printf_i+0x1a4>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	f023 0320 	bic.w	r3, r3, #32
 80040ae:	6023      	str	r3, [r4, #0]
 80040b0:	2310      	movs	r3, #16
 80040b2:	e7a7      	b.n	8004004 <_printf_i+0xf8>
 80040b4:	4824      	ldr	r0, [pc, #144]	; (8004148 <_printf_i+0x23c>)
 80040b6:	e7e4      	b.n	8004082 <_printf_i+0x176>
 80040b8:	4615      	mov	r5, r2
 80040ba:	e7bd      	b.n	8004038 <_printf_i+0x12c>
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	6826      	ldr	r6, [r4, #0]
 80040c0:	6961      	ldr	r1, [r4, #20]
 80040c2:	1d18      	adds	r0, r3, #4
 80040c4:	6028      	str	r0, [r5, #0]
 80040c6:	0635      	lsls	r5, r6, #24
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	d501      	bpl.n	80040d0 <_printf_i+0x1c4>
 80040cc:	6019      	str	r1, [r3, #0]
 80040ce:	e002      	b.n	80040d6 <_printf_i+0x1ca>
 80040d0:	0670      	lsls	r0, r6, #25
 80040d2:	d5fb      	bpl.n	80040cc <_printf_i+0x1c0>
 80040d4:	8019      	strh	r1, [r3, #0]
 80040d6:	2300      	movs	r3, #0
 80040d8:	6123      	str	r3, [r4, #16]
 80040da:	4615      	mov	r5, r2
 80040dc:	e7bc      	b.n	8004058 <_printf_i+0x14c>
 80040de:	682b      	ldr	r3, [r5, #0]
 80040e0:	1d1a      	adds	r2, r3, #4
 80040e2:	602a      	str	r2, [r5, #0]
 80040e4:	681d      	ldr	r5, [r3, #0]
 80040e6:	6862      	ldr	r2, [r4, #4]
 80040e8:	2100      	movs	r1, #0
 80040ea:	4628      	mov	r0, r5
 80040ec:	f7fc f878 	bl	80001e0 <memchr>
 80040f0:	b108      	cbz	r0, 80040f6 <_printf_i+0x1ea>
 80040f2:	1b40      	subs	r0, r0, r5
 80040f4:	6060      	str	r0, [r4, #4]
 80040f6:	6863      	ldr	r3, [r4, #4]
 80040f8:	6123      	str	r3, [r4, #16]
 80040fa:	2300      	movs	r3, #0
 80040fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004100:	e7aa      	b.n	8004058 <_printf_i+0x14c>
 8004102:	6923      	ldr	r3, [r4, #16]
 8004104:	462a      	mov	r2, r5
 8004106:	4649      	mov	r1, r9
 8004108:	4640      	mov	r0, r8
 800410a:	47d0      	blx	sl
 800410c:	3001      	adds	r0, #1
 800410e:	d0ad      	beq.n	800406c <_printf_i+0x160>
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	079b      	lsls	r3, r3, #30
 8004114:	d413      	bmi.n	800413e <_printf_i+0x232>
 8004116:	68e0      	ldr	r0, [r4, #12]
 8004118:	9b03      	ldr	r3, [sp, #12]
 800411a:	4298      	cmp	r0, r3
 800411c:	bfb8      	it	lt
 800411e:	4618      	movlt	r0, r3
 8004120:	e7a6      	b.n	8004070 <_printf_i+0x164>
 8004122:	2301      	movs	r3, #1
 8004124:	4632      	mov	r2, r6
 8004126:	4649      	mov	r1, r9
 8004128:	4640      	mov	r0, r8
 800412a:	47d0      	blx	sl
 800412c:	3001      	adds	r0, #1
 800412e:	d09d      	beq.n	800406c <_printf_i+0x160>
 8004130:	3501      	adds	r5, #1
 8004132:	68e3      	ldr	r3, [r4, #12]
 8004134:	9903      	ldr	r1, [sp, #12]
 8004136:	1a5b      	subs	r3, r3, r1
 8004138:	42ab      	cmp	r3, r5
 800413a:	dcf2      	bgt.n	8004122 <_printf_i+0x216>
 800413c:	e7eb      	b.n	8004116 <_printf_i+0x20a>
 800413e:	2500      	movs	r5, #0
 8004140:	f104 0619 	add.w	r6, r4, #25
 8004144:	e7f5      	b.n	8004132 <_printf_i+0x226>
 8004146:	bf00      	nop
 8004148:	08004530 	.word	0x08004530
 800414c:	08004541 	.word	0x08004541

08004150 <__swbuf_r>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	460e      	mov	r6, r1
 8004154:	4614      	mov	r4, r2
 8004156:	4605      	mov	r5, r0
 8004158:	b118      	cbz	r0, 8004162 <__swbuf_r+0x12>
 800415a:	6a03      	ldr	r3, [r0, #32]
 800415c:	b90b      	cbnz	r3, 8004162 <__swbuf_r+0x12>
 800415e:	f7ff faed 	bl	800373c <__sinit>
 8004162:	69a3      	ldr	r3, [r4, #24]
 8004164:	60a3      	str	r3, [r4, #8]
 8004166:	89a3      	ldrh	r3, [r4, #12]
 8004168:	071a      	lsls	r2, r3, #28
 800416a:	d525      	bpl.n	80041b8 <__swbuf_r+0x68>
 800416c:	6923      	ldr	r3, [r4, #16]
 800416e:	b31b      	cbz	r3, 80041b8 <__swbuf_r+0x68>
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	6922      	ldr	r2, [r4, #16]
 8004174:	1a98      	subs	r0, r3, r2
 8004176:	6963      	ldr	r3, [r4, #20]
 8004178:	b2f6      	uxtb	r6, r6
 800417a:	4283      	cmp	r3, r0
 800417c:	4637      	mov	r7, r6
 800417e:	dc04      	bgt.n	800418a <__swbuf_r+0x3a>
 8004180:	4621      	mov	r1, r4
 8004182:	4628      	mov	r0, r5
 8004184:	f7ff fcd0 	bl	8003b28 <_fflush_r>
 8004188:	b9e0      	cbnz	r0, 80041c4 <__swbuf_r+0x74>
 800418a:	68a3      	ldr	r3, [r4, #8]
 800418c:	3b01      	subs	r3, #1
 800418e:	60a3      	str	r3, [r4, #8]
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	6022      	str	r2, [r4, #0]
 8004196:	701e      	strb	r6, [r3, #0]
 8004198:	6962      	ldr	r2, [r4, #20]
 800419a:	1c43      	adds	r3, r0, #1
 800419c:	429a      	cmp	r2, r3
 800419e:	d004      	beq.n	80041aa <__swbuf_r+0x5a>
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	07db      	lsls	r3, r3, #31
 80041a4:	d506      	bpl.n	80041b4 <__swbuf_r+0x64>
 80041a6:	2e0a      	cmp	r6, #10
 80041a8:	d104      	bne.n	80041b4 <__swbuf_r+0x64>
 80041aa:	4621      	mov	r1, r4
 80041ac:	4628      	mov	r0, r5
 80041ae:	f7ff fcbb 	bl	8003b28 <_fflush_r>
 80041b2:	b938      	cbnz	r0, 80041c4 <__swbuf_r+0x74>
 80041b4:	4638      	mov	r0, r7
 80041b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041b8:	4621      	mov	r1, r4
 80041ba:	4628      	mov	r0, r5
 80041bc:	f000 f806 	bl	80041cc <__swsetup_r>
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d0d5      	beq.n	8004170 <__swbuf_r+0x20>
 80041c4:	f04f 37ff 	mov.w	r7, #4294967295
 80041c8:	e7f4      	b.n	80041b4 <__swbuf_r+0x64>
	...

080041cc <__swsetup_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <__swsetup_r+0xac>)
 80041d0:	4605      	mov	r5, r0
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	460c      	mov	r4, r1
 80041d6:	b118      	cbz	r0, 80041e0 <__swsetup_r+0x14>
 80041d8:	6a03      	ldr	r3, [r0, #32]
 80041da:	b90b      	cbnz	r3, 80041e0 <__swsetup_r+0x14>
 80041dc:	f7ff faae 	bl	800373c <__sinit>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041e6:	0718      	lsls	r0, r3, #28
 80041e8:	d422      	bmi.n	8004230 <__swsetup_r+0x64>
 80041ea:	06d9      	lsls	r1, r3, #27
 80041ec:	d407      	bmi.n	80041fe <__swsetup_r+0x32>
 80041ee:	2309      	movs	r3, #9
 80041f0:	602b      	str	r3, [r5, #0]
 80041f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041f6:	81a3      	strh	r3, [r4, #12]
 80041f8:	f04f 30ff 	mov.w	r0, #4294967295
 80041fc:	e034      	b.n	8004268 <__swsetup_r+0x9c>
 80041fe:	0758      	lsls	r0, r3, #29
 8004200:	d512      	bpl.n	8004228 <__swsetup_r+0x5c>
 8004202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004204:	b141      	cbz	r1, 8004218 <__swsetup_r+0x4c>
 8004206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800420a:	4299      	cmp	r1, r3
 800420c:	d002      	beq.n	8004214 <__swsetup_r+0x48>
 800420e:	4628      	mov	r0, r5
 8004210:	f7ff fbb8 	bl	8003984 <_free_r>
 8004214:	2300      	movs	r3, #0
 8004216:	6363      	str	r3, [r4, #52]	; 0x34
 8004218:	89a3      	ldrh	r3, [r4, #12]
 800421a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800421e:	81a3      	strh	r3, [r4, #12]
 8004220:	2300      	movs	r3, #0
 8004222:	6063      	str	r3, [r4, #4]
 8004224:	6923      	ldr	r3, [r4, #16]
 8004226:	6023      	str	r3, [r4, #0]
 8004228:	89a3      	ldrh	r3, [r4, #12]
 800422a:	f043 0308 	orr.w	r3, r3, #8
 800422e:	81a3      	strh	r3, [r4, #12]
 8004230:	6923      	ldr	r3, [r4, #16]
 8004232:	b94b      	cbnz	r3, 8004248 <__swsetup_r+0x7c>
 8004234:	89a3      	ldrh	r3, [r4, #12]
 8004236:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800423a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423e:	d003      	beq.n	8004248 <__swsetup_r+0x7c>
 8004240:	4621      	mov	r1, r4
 8004242:	4628      	mov	r0, r5
 8004244:	f000 f884 	bl	8004350 <__smakebuf_r>
 8004248:	89a0      	ldrh	r0, [r4, #12]
 800424a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800424e:	f010 0301 	ands.w	r3, r0, #1
 8004252:	d00a      	beq.n	800426a <__swsetup_r+0x9e>
 8004254:	2300      	movs	r3, #0
 8004256:	60a3      	str	r3, [r4, #8]
 8004258:	6963      	ldr	r3, [r4, #20]
 800425a:	425b      	negs	r3, r3
 800425c:	61a3      	str	r3, [r4, #24]
 800425e:	6923      	ldr	r3, [r4, #16]
 8004260:	b943      	cbnz	r3, 8004274 <__swsetup_r+0xa8>
 8004262:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004266:	d1c4      	bne.n	80041f2 <__swsetup_r+0x26>
 8004268:	bd38      	pop	{r3, r4, r5, pc}
 800426a:	0781      	lsls	r1, r0, #30
 800426c:	bf58      	it	pl
 800426e:	6963      	ldrpl	r3, [r4, #20]
 8004270:	60a3      	str	r3, [r4, #8]
 8004272:	e7f4      	b.n	800425e <__swsetup_r+0x92>
 8004274:	2000      	movs	r0, #0
 8004276:	e7f7      	b.n	8004268 <__swsetup_r+0x9c>
 8004278:	20000068 	.word	0x20000068

0800427c <_raise_r>:
 800427c:	291f      	cmp	r1, #31
 800427e:	b538      	push	{r3, r4, r5, lr}
 8004280:	4604      	mov	r4, r0
 8004282:	460d      	mov	r5, r1
 8004284:	d904      	bls.n	8004290 <_raise_r+0x14>
 8004286:	2316      	movs	r3, #22
 8004288:	6003      	str	r3, [r0, #0]
 800428a:	f04f 30ff 	mov.w	r0, #4294967295
 800428e:	bd38      	pop	{r3, r4, r5, pc}
 8004290:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004292:	b112      	cbz	r2, 800429a <_raise_r+0x1e>
 8004294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004298:	b94b      	cbnz	r3, 80042ae <_raise_r+0x32>
 800429a:	4620      	mov	r0, r4
 800429c:	f000 f830 	bl	8004300 <_getpid_r>
 80042a0:	462a      	mov	r2, r5
 80042a2:	4601      	mov	r1, r0
 80042a4:	4620      	mov	r0, r4
 80042a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042aa:	f000 b817 	b.w	80042dc <_kill_r>
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d00a      	beq.n	80042c8 <_raise_r+0x4c>
 80042b2:	1c59      	adds	r1, r3, #1
 80042b4:	d103      	bne.n	80042be <_raise_r+0x42>
 80042b6:	2316      	movs	r3, #22
 80042b8:	6003      	str	r3, [r0, #0]
 80042ba:	2001      	movs	r0, #1
 80042bc:	e7e7      	b.n	800428e <_raise_r+0x12>
 80042be:	2400      	movs	r4, #0
 80042c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80042c4:	4628      	mov	r0, r5
 80042c6:	4798      	blx	r3
 80042c8:	2000      	movs	r0, #0
 80042ca:	e7e0      	b.n	800428e <_raise_r+0x12>

080042cc <raise>:
 80042cc:	4b02      	ldr	r3, [pc, #8]	; (80042d8 <raise+0xc>)
 80042ce:	4601      	mov	r1, r0
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	f7ff bfd3 	b.w	800427c <_raise_r>
 80042d6:	bf00      	nop
 80042d8:	20000068 	.word	0x20000068

080042dc <_kill_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	4d07      	ldr	r5, [pc, #28]	; (80042fc <_kill_r+0x20>)
 80042e0:	2300      	movs	r3, #0
 80042e2:	4604      	mov	r4, r0
 80042e4:	4608      	mov	r0, r1
 80042e6:	4611      	mov	r1, r2
 80042e8:	602b      	str	r3, [r5, #0]
 80042ea:	f7fc fcdf 	bl	8000cac <_kill>
 80042ee:	1c43      	adds	r3, r0, #1
 80042f0:	d102      	bne.n	80042f8 <_kill_r+0x1c>
 80042f2:	682b      	ldr	r3, [r5, #0]
 80042f4:	b103      	cbz	r3, 80042f8 <_kill_r+0x1c>
 80042f6:	6023      	str	r3, [r4, #0]
 80042f8:	bd38      	pop	{r3, r4, r5, pc}
 80042fa:	bf00      	nop
 80042fc:	2000023c 	.word	0x2000023c

08004300 <_getpid_r>:
 8004300:	f7fc bccc 	b.w	8000c9c <_getpid>

08004304 <__swhatbuf_r>:
 8004304:	b570      	push	{r4, r5, r6, lr}
 8004306:	460c      	mov	r4, r1
 8004308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800430c:	2900      	cmp	r1, #0
 800430e:	b096      	sub	sp, #88	; 0x58
 8004310:	4615      	mov	r5, r2
 8004312:	461e      	mov	r6, r3
 8004314:	da0d      	bge.n	8004332 <__swhatbuf_r+0x2e>
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	f013 0f80 	tst.w	r3, #128	; 0x80
 800431c:	f04f 0100 	mov.w	r1, #0
 8004320:	bf0c      	ite	eq
 8004322:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004326:	2340      	movne	r3, #64	; 0x40
 8004328:	2000      	movs	r0, #0
 800432a:	6031      	str	r1, [r6, #0]
 800432c:	602b      	str	r3, [r5, #0]
 800432e:	b016      	add	sp, #88	; 0x58
 8004330:	bd70      	pop	{r4, r5, r6, pc}
 8004332:	466a      	mov	r2, sp
 8004334:	f000 f848 	bl	80043c8 <_fstat_r>
 8004338:	2800      	cmp	r0, #0
 800433a:	dbec      	blt.n	8004316 <__swhatbuf_r+0x12>
 800433c:	9901      	ldr	r1, [sp, #4]
 800433e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004342:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004346:	4259      	negs	r1, r3
 8004348:	4159      	adcs	r1, r3
 800434a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800434e:	e7eb      	b.n	8004328 <__swhatbuf_r+0x24>

08004350 <__smakebuf_r>:
 8004350:	898b      	ldrh	r3, [r1, #12]
 8004352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004354:	079d      	lsls	r5, r3, #30
 8004356:	4606      	mov	r6, r0
 8004358:	460c      	mov	r4, r1
 800435a:	d507      	bpl.n	800436c <__smakebuf_r+0x1c>
 800435c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	6123      	str	r3, [r4, #16]
 8004364:	2301      	movs	r3, #1
 8004366:	6163      	str	r3, [r4, #20]
 8004368:	b002      	add	sp, #8
 800436a:	bd70      	pop	{r4, r5, r6, pc}
 800436c:	ab01      	add	r3, sp, #4
 800436e:	466a      	mov	r2, sp
 8004370:	f7ff ffc8 	bl	8004304 <__swhatbuf_r>
 8004374:	9900      	ldr	r1, [sp, #0]
 8004376:	4605      	mov	r5, r0
 8004378:	4630      	mov	r0, r6
 800437a:	f7ff f889 	bl	8003490 <_malloc_r>
 800437e:	b948      	cbnz	r0, 8004394 <__smakebuf_r+0x44>
 8004380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004384:	059a      	lsls	r2, r3, #22
 8004386:	d4ef      	bmi.n	8004368 <__smakebuf_r+0x18>
 8004388:	f023 0303 	bic.w	r3, r3, #3
 800438c:	f043 0302 	orr.w	r3, r3, #2
 8004390:	81a3      	strh	r3, [r4, #12]
 8004392:	e7e3      	b.n	800435c <__smakebuf_r+0xc>
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	6020      	str	r0, [r4, #0]
 8004398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439c:	81a3      	strh	r3, [r4, #12]
 800439e:	9b00      	ldr	r3, [sp, #0]
 80043a0:	6163      	str	r3, [r4, #20]
 80043a2:	9b01      	ldr	r3, [sp, #4]
 80043a4:	6120      	str	r0, [r4, #16]
 80043a6:	b15b      	cbz	r3, 80043c0 <__smakebuf_r+0x70>
 80043a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ac:	4630      	mov	r0, r6
 80043ae:	f000 f81d 	bl	80043ec <_isatty_r>
 80043b2:	b128      	cbz	r0, 80043c0 <__smakebuf_r+0x70>
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	f023 0303 	bic.w	r3, r3, #3
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	81a3      	strh	r3, [r4, #12]
 80043c0:	89a3      	ldrh	r3, [r4, #12]
 80043c2:	431d      	orrs	r5, r3
 80043c4:	81a5      	strh	r5, [r4, #12]
 80043c6:	e7cf      	b.n	8004368 <__smakebuf_r+0x18>

080043c8 <_fstat_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	4d07      	ldr	r5, [pc, #28]	; (80043e8 <_fstat_r+0x20>)
 80043cc:	2300      	movs	r3, #0
 80043ce:	4604      	mov	r4, r0
 80043d0:	4608      	mov	r0, r1
 80043d2:	4611      	mov	r1, r2
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	f7fc fcc8 	bl	8000d6a <_fstat>
 80043da:	1c43      	adds	r3, r0, #1
 80043dc:	d102      	bne.n	80043e4 <_fstat_r+0x1c>
 80043de:	682b      	ldr	r3, [r5, #0]
 80043e0:	b103      	cbz	r3, 80043e4 <_fstat_r+0x1c>
 80043e2:	6023      	str	r3, [r4, #0]
 80043e4:	bd38      	pop	{r3, r4, r5, pc}
 80043e6:	bf00      	nop
 80043e8:	2000023c 	.word	0x2000023c

080043ec <_isatty_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4d06      	ldr	r5, [pc, #24]	; (8004408 <_isatty_r+0x1c>)
 80043f0:	2300      	movs	r3, #0
 80043f2:	4604      	mov	r4, r0
 80043f4:	4608      	mov	r0, r1
 80043f6:	602b      	str	r3, [r5, #0]
 80043f8:	f7fc fcc7 	bl	8000d8a <_isatty>
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	d102      	bne.n	8004406 <_isatty_r+0x1a>
 8004400:	682b      	ldr	r3, [r5, #0]
 8004402:	b103      	cbz	r3, 8004406 <_isatty_r+0x1a>
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	bd38      	pop	{r3, r4, r5, pc}
 8004408:	2000023c 	.word	0x2000023c

0800440c <_init>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	bf00      	nop
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr

08004418 <_fini>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr
